import flet as ft
from datetime import datetime, timedelta
import json
import os
from typing import Dict, List, Optional

class FinanceApp:
    def __init__(self):
        self.data_file = "finance_data.json"
        self.load_data()
        
    def load_data(self):
        if os.path.exists(self.data_file):
            with open(self.data_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
                if "goal_investments" not in self.data:
                    self.data["goal_investments"] = {}
                if "salary_dates" not in self.data:
                    self.data["salary_dates"] = [8, 22]
                if "rent" not in self.data:
                    self.data["rent"] = 0
                if "rent_paid_until" not in self.data:
                    self.data["rent_paid_until"] = None
                if "safety_reserve" not in self.data:
                    self.data["safety_reserve"] = 20000
                if "chatgpt_enabled" not in self.data:
                    self.data["chatgpt_enabled"] = True
                if "birthdays" not in self.data:
                    self.data["birthdays"] = []
                if "notes" not in self.data:
                    self.data["notes"] = []
        else:
            self.data = {
                "salary": 0,
                "current_money": 0,
                "transactions": [],
                "goals": [],
                "monthly_budget": {},
                "goal_investments": {},
                "salary_dates": [8, 22],
                "rent": 0,
                "rent_paid_until": None,
                "safety_reserve": 20000,
                "chatgpt_enabled": True,
                "birthdays": [],
                "notes": []
            }
    
    def save_data(self):
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)

class MainApp:
    def __init__(self, page: ft.Page):
        self.page = page
        self.finance_app = FinanceApp()
        self.purchase_name = ""
        self.purchase_price = 0
        self.purchase_analysis = ft.Text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω—É", size=14, color=ft.Colors.GREY_600)
        self.setup_page()
        self.create_main_interface()
    
    def setup_page(self):
        self.page.title = "–£–º–Ω–æ–µ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        self.page.theme_mode = ft.ThemeMode.LIGHT
        self.page.window_width = 1000
        self.page.window_height = 700
        self.page.padding = 20
    
    def create_main_interface(self):
        self.navigation_bar = ft.NavigationBar(
            destinations=[
                ft.NavigationBarDestination(icon=ft.Icons.HOME, label="–ì–ª–∞–≤–Ω–∞—è"),
                ft.NavigationBarDestination(icon=ft.Icons.ACCOUNT_BALANCE_WALLET, label="–î–µ–Ω—å–≥–∏"),
                ft.NavigationBarDestination(icon=ft.Icons.STAR, label="–¶–µ–ª–∏"),
                ft.NavigationBarDestination(icon=ft.Icons.ANALYTICS, label="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
                ft.NavigationBarDestination(icon=ft.Icons.TRENDING_UP, label="–ü—Ä–æ–≥–Ω–æ–∑"),
                ft.NavigationBarDestination(icon=ft.Icons.CALCULATE, label="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
                ft.NavigationBarDestination(icon=ft.Icons.NOTE, label="–ó–∞–º–µ—Ç–∫–∏"),
            ],
            on_change=self.on_navigation_change
        )
        
        self.main_content = ft.Container(
            content=self.create_home_page(),
            expand=True
        )
        
        self.page.add(
            ft.Column([
                self.main_content,
                self.navigation_bar
            ], expand=True)
        )
    
    def on_navigation_change(self, e):
        selected_index = e.control.selected_index
        
        if selected_index == 0:
            self.main_content.content = self.create_home_page()
        elif selected_index == 1:
            self.main_content.content = self.create_money_page()
        elif selected_index == 2:
            self.main_content.content = self.create_goals_page()
        elif selected_index == 3:
            self.main_content.content = self.create_analytics_page()
        elif selected_index == 4:
            self.main_content.content = self.create_forecast_page()
        elif selected_index == 5:
            self.main_content.content = self.create_calculator_page()
        elif selected_index == 6:
            self.main_content.content = self.create_notes_page()
        
        self.page.update()
    
    def create_home_page(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        free_money = current_money - safety_reserve
        daily_budget = self.calculate_daily_budget()
        days_until_salary = self.calculate_days_until_salary(self.finance_app.data["salary_dates"][0])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        current_month_income = self.get_current_month_income()
        current_month_expenses = self.get_current_month_expenses()
        month_balance = current_month_income - current_month_expenses
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª—è—Ö
        goals = self.finance_app.data["goals"]
        goal_investments = self.finance_app.data["goal_investments"]
        total_goals = sum(goal["amount"] for goal in goals)
        total_invested = sum(goal_investments.values())
        remaining_goals = total_goals - total_invested
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month = datetime.now().month
        current_birthdays = self.get_birthdays_for_month(current_month)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        warnings = []
        recommendations = []
        
        if free_money < 5000:
            warnings.append("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥")
        elif free_money < 10000:
            warnings.append("‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥")
        
        if daily_budget < 500:
            warnings.append("‚ö†Ô∏è –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç")
        elif daily_budget < 1000:
            warnings.append("‚ö†Ô∏è –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç")
        
        if month_balance < 0:
            warnings.append("‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ—Å—è—Ü–∞")
        elif month_balance < 5000:
            warnings.append("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –º–µ—Å—è—Ü–∞")
        
        if days_until_salary > 20:
            recommendations.append("üí° –î–æ –∑–∞—Ä–ø–ª–∞—Ç—ã –µ—â–µ –¥–æ–ª–≥–æ - —ç–∫–æ–Ω–æ–º—å—Ç–µ")
        elif days_until_salary < 3:
            recommendations.append("üí° –°–∫–æ—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ - –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å")
        
        return ft.Column([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
            ft.Container(
                content=ft.Row([
                    ft.Text(f"üìÖ {datetime.now().strftime('%d %B %Y')}", size=24, weight=ft.FontWeight.BOLD),
                    ft.Container(expand=True),
                    ft.Text(f"üìÖ {datetime.now().strftime('%A')}", size=18, color=ft.Colors.GREY_600)
                ]),
                padding=20,
                bgcolor=ft.Colors.BLUE_50,
                border_radius=10
            ),
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
            ft.Row([
                # –§–∏–Ω–∞–Ω—Å—ã
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("üí∞ –§–∏–Ω–∞–Ω—Å—ã", size=20, weight=ft.FontWeight.BOLD),
                            ft.Divider(),
                            ft.Text(f"–í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ", size=16, weight=ft.FontWeight.BOLD),
                            ft.Text(f"–°–≤–æ–±–æ–¥–Ω–æ: {free_money:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
                            ft.Text(f"–†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_reserve:,.0f} ‚ÇΩ", size=14, color=ft.Colors.BLUE)
                        ], spacing=10),
                        padding=20
                    ),
                    expand=1
                ),
                
                # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("üìä –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", size=20, weight=ft.FontWeight.BOLD),
                            ft.Divider(),
                            ft.Text(f"–î–æ—Ö–æ–¥—ã: {current_month_income:,.0f} ‚ÇΩ", size=16, color=ft.Colors.GREEN, weight=ft.FontWeight.BOLD),
                            ft.Text(f"–†–∞—Å—Ö–æ–¥—ã: {current_month_expenses:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED, weight=ft.FontWeight.BOLD),
                            ft.Text(f"–ë–∞–ª–∞–Ω—Å: {month_balance:,.0f} ‚ÇΩ", size=16, color=ft.Colors.BLUE if month_balance >= 0 else ft.Colors.RED, weight=ft.FontWeight.BOLD)
                        ], spacing=10),
                        padding=20
                    ),
                    expand=1
                )
            ], spacing=20),
            
            # –¶–µ–ª–∏ –∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è - –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
            ft.Row([
                # –¶–µ–ª–∏
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("üéØ –¶–µ–ª–∏", size=20, weight=ft.FontWeight.BOLD),
                            ft.Divider(),
                            ft.Text(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(goals)}", size=16, weight=ft.FontWeight.BOLD),
                            ft.Text(f"–ù—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å: {remaining_goals:,.0f} ‚ÇΩ" if goals else "–ù–µ—Ç —Ü–µ–ª–µ–π", size=14, color=ft.Colors.ORANGE),
                            ft.Text(f"–£–∂–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {total_invested:,.0f} ‚ÇΩ" if goals else "", size=14, color=ft.Colors.GREEN)
                        ], spacing=10),
                        padding=20
                    ),
                    expand=1
                ),
                
                # –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", size=20, weight=ft.FontWeight.BOLD),
                            ft.Divider(),
                            ft.Text(f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {len(current_birthdays)}", size=16, weight=ft.FontWeight.BOLD),
                            ft.Text(", ".join([bday["name"] for bday in current_birthdays]) if current_birthdays else "–ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è", size=14, color=ft.Colors.PINK)
                        ], spacing=10),
                        padding=20
                    ),
                    expand=1
                )
            ], spacing=20),
            
            # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", size=20, weight=ft.FontWeight.BOLD),
                        ft.Divider(),
                        self.create_mini_calendar()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            # –î–æ –∑–∞—Ä–ø–ª–∞—Ç—ã
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìÖ –î–æ –∑–∞—Ä–ø–ª–∞—Ç—ã", size=20, weight=ft.FontWeight.BOLD),
                        ft.Divider(),
                        ft.Text(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_salary}", size=18, weight=ft.FontWeight.BOLD),
                        ft.Text(f"–î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: {daily_budget:,.0f} ‚ÇΩ", size=16, color=ft.Colors.GREEN),
                        ft.Text(f"–°–ª–µ–¥—É—é—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {self.get_next_salary_date_formatted()}", size=14, color=ft.Colors.GREY_600),
                        ft.Divider(),
                        ft.Text("üìä –î–µ—Ç–∞–ª–∏:", size=14, weight=ft.FontWeight.BOLD),
                        ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ", size=12),
                        ft.Text(f"‚Ä¢ –†–µ–∑–µ—Ä–≤: {safety_reserve:,.0f} ‚ÇΩ", size=12),
                        ft.Text(f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {free_money:,.0f} ‚ÇΩ", size=12),
                        ft.Text(f"‚Ä¢ –ù–∞ –¥–µ–Ω—å: {daily_budget:,.0f} ‚ÇΩ", size=12)
                    ]),
                    padding=20,
                    border_radius=10
                )
            ),
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫—É–ø–æ–∫
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üßÆ –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫—É–ø–æ–∫", size=20, weight=ft.FontWeight.BOLD),
                        ft.Divider(),
                        ft.Row([
                            ft.TextField(
                                label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                                value=self.purchase_name,
                                on_change=self.update_purchase_name,
                                expand=1,
                                border_radius=8
                            ),
                            ft.TextField(
                                label="–¶–µ–Ω–∞ (‚ÇΩ)",
                                value=str(self.purchase_price) if self.purchase_price > 0 else "",
                                on_change=self.update_purchase_price,
                                keyboard_type=ft.KeyboardType.NUMBER,
                                expand=1,
                                border_radius=8
                            )
                        ], spacing=10),
                        ft.ElevatedButton(
                            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É",
                            on_click=self.check_purchase_affordability,
                            bgcolor=ft.Colors.BLUE,
                            color=ft.Colors.WHITE,
                            style=ft.ButtonStyle(
                                shape=ft.RoundedRectangleBorder(radius=8)
                            )
                        ),
                        self.purchase_analysis
                    ], spacing=15),
                    padding=20
                )
            ),
            
            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", size=20, weight=ft.FontWeight.BOLD),
                        ft.Divider(),
                        ft.Row([
                            ft.ElevatedButton(
                                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥",
                                on_click=self.go_to_money_page,
                                bgcolor=ft.Colors.GREEN,
                                color=ft.Colors.WHITE,
                                expand=1,
                                style=ft.ButtonStyle(
                                    shape=ft.RoundedRectangleBorder(radius=8)
                                )
                            ),
                            ft.ElevatedButton(
                                "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥",
                                on_click=self.go_to_money_page,
                                bgcolor=ft.Colors.RED,
                                color=ft.Colors.WHITE,
                                expand=1,
                                style=ft.ButtonStyle(
                                    shape=ft.RoundedRectangleBorder(radius=8)
                                )
                            ),
                            ft.ElevatedButton(
                                "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                                on_click=self.go_to_analytics_page,
                                bgcolor=ft.Colors.BLUE,
                                color=ft.Colors.WHITE,
                                expand=1,
                                style=ft.ButtonStyle(
                                    shape=ft.RoundedRectangleBorder(radius=8)
                                )
                            )
                        ], spacing=10)
                    ], spacing=15),
                    padding=20
                )
            ),
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.create_smart_alerts(warnings, recommendations)
            
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def go_to_money_page(self, e):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–Ω–µ–≥"""
        self.main_content.content = self.create_money_page()
        self.page.update()
    
    def go_to_analytics_page(self, e):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.main_content.content = self.create_analytics_page()
        self.page.update()
    
    def create_mini_calendar(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –º–∏–Ω–∏-–∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
        import calendar
        now = datetime.now()
        year = now.year
        month = now.month
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞
        cal = calendar.monthcalendar(year, month)
        month_name = calendar.month_name[month]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = ft.Container(
            content=ft.Column([
                ft.Text("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(f"üìÖ {month_name} {year}", size=12, color=ft.Colors.BLUE)
            ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
            padding=8
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
        weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        weekday_row = ft.Row([
            ft.Container(
                content=ft.Text(day, size=11, weight=ft.FontWeight.BOLD, color=ft.Colors.GREY_600),
                width=28,
                height=24,
                alignment=ft.alignment.center
            )
            for day in weekdays
        ], alignment=ft.MainAxisAlignment.SPACE_EVENLY)
        
        # –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        day_rows = []
        for week in cal:
            week_row = ft.Row([], alignment=ft.MainAxisAlignment.SPACE_EVENLY)
            for day in week:
                if day == 0:
                    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ/—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                    week_row.controls.append(
                        ft.Container(
                            content=ft.Text("", size=11),
                            width=28,
                            height=28,
                            alignment=ft.alignment.center
                        )
                    )
                else:
                    is_today = day == now.day
                    is_weekend = week.index(day) >= 5
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞
                    if is_today:
                        color = ft.Colors.WHITE
                        bgcolor = ft.Colors.BLUE_400
                        border_color = ft.Colors.BLUE_600
                    elif is_weekend:
                        color = ft.Colors.RED_600
                        bgcolor = ft.Colors.RED_50
                        border_color = ft.Colors.RED_200
                    else:
                        color = ft.Colors.BLACK
                        bgcolor = ft.Colors.WHITE
                        border_color = ft.Colors.GREY_200
                    
                    week_row.controls.append(
                        ft.Container(
                            content=ft.Text(str(day), size=11, color=color, weight=ft.FontWeight.BOLD if is_today else ft.FontWeight.NORMAL),
                            width=28,
                            height=28,
                            bgcolor=bgcolor,
                            border=ft.border.all(1, border_color),
                            border_radius=4,
                            alignment=ft.alignment.center
                        )
                    )
            day_rows.append(week_row)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_container = ft.Container(
            content=ft.Column([
                weekday_row,
                *day_rows
            ], spacing=2),
            padding=8,
            bgcolor=ft.Colors.GREY_50,
            border_radius=8,
            border=ft.border.all(1, ft.Colors.GREY_300)
        )
        
        return ft.Column([
            header,
            calendar_container
        ], spacing=5, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
    
    def create_smart_alerts(self, warnings, recommendations):
        """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        alerts = []
        
        for warning in warnings:
            alerts.append(ft.Container(
                content=ft.Row([
                    ft.Icon(ft.Icons.WARNING, color=ft.Colors.ORANGE, size=16),
                    ft.Text(warning, size=12, color=ft.Colors.ORANGE)
                ]),
                padding=8,
                bgcolor=ft.Colors.ORANGE_50,
            ))
        
        for recommendation in recommendations:
            alerts.append(ft.Container(
                content=ft.Row([
                    ft.Icon(ft.Icons.THUMB_UP, color=ft.Colors.GREEN, size=16),
                    ft.Text(recommendation, size=12, color=ft.Colors.GREEN)
                ]),
                padding=8,
                bgcolor=ft.Colors.GREEN_50,
            ))
        
        return ft.Column(alerts, spacing=5) if alerts else ft.Container()
    
    def get_current_month_birthdays(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
        now = datetime.now()
        current_month = now.month
        
        birthdays = []
        for birthday in self.finance_app.data["birthdays"]:
            if self.convert_month_to_int(birthday["month"]) == current_month:
                birthdays.append(birthday["name"])
        
        return birthdays
    
    def convert_month_to_int(self, month_name):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ"""
        months = {
            "–Ø–Ω–≤–∞—Ä—å": 1, "–§–µ–≤—Ä–∞–ª—å": 2, "–ú–∞—Ä—Ç": 3, "–ê–ø—Ä–µ–ª—å": 4,
            "–ú–∞–π": 5, "–ò—é–Ω—å": 6, "–ò—é–ª—å": 7, "–ê–≤–≥—É—Å—Ç": 8,
            "–°–µ–Ω—Ç—è–±—Ä—å": 9, "–û–∫—Ç—è–±—Ä—å": 10, "–ù–æ—è–±—Ä—å": 11, "–î–µ–∫–∞–±—Ä—å": 12
        }
        return months.get(month_name, 1)
    
    def calculate_days_until_salary(self, salary_date):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        now = datetime.now()
        current_month = now.month
        current_year = now.year
        
        # –°–ª–µ–¥—É—é—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
        if now.day <= salary_date:
            next_salary = datetime(current_year, current_month, salary_date)
        else:
            if current_month == 12:
                next_salary = datetime(current_year + 1, 1, salary_date)
            else:
                next_salary = datetime(current_year, current_month + 1, salary_date)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        today = now.date()
        salary_day = next_salary.date()
        delta = salary_day - today
        return max(0, delta.days)
    
    def get_next_salary_date_formatted(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
        salary_date = self.finance_app.data["salary_dates"][0]
        now = datetime.now()
        current_month = now.month
        current_year = now.year
        
        if now.day <= salary_date:
            next_salary = datetime(current_year, current_month, salary_date)
        else:
            if current_month == 12:
                next_salary = datetime(current_year + 1, 1, salary_date)
            else:
                next_salary = datetime(current_year, current_month + 1, salary_date)
        
        return next_salary.strftime("%d.%m.%Y")
    
    def calculate_current_month_expenses(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        return 30000
    
    def analyze_purchase_new(self, e):
        """–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∫–∏"""
        if not hasattr(self, 'purchase_price') or self.purchase_price <= 0:
            self.purchase_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞", size=14, color=ft.Colors.GREY_600)
        else:
            self.purchase_result = self.create_simple_purchase_analysis()
        
        self.page.update()
    
    def create_new_purchase_result(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if not hasattr(self, 'purchase_result'):
            self.purchase_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω—É", size=14, color=ft.Colors.GREY_600)
        
        return ft.Container(
            content=self.purchase_result,
            padding=10
        )
    
    def create_simple_purchase_analysis(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        free_money = current_money - safety_reserve
        price = getattr(self, 'purchase_price', 0)
        product_name = getattr(self, 'purchase_name', '–¢–æ–≤–∞—Ä')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        goals = self.finance_app.data["goals"]
        goal_investments = self.finance_app.data["goal_investments"]
        total_goals = sum(goal["amount"] for goal in goals)
        total_invested = sum(goal_investments.values())
        remaining_goals = total_goals - total_invested
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        monthly_savings = self.finance_app.data["salary"] - self.calculate_average_monthly_expenses() - (3000 if self.finance_app.data["chatgpt_enabled"] else 0) - rent_cost
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏
        can_buy_now = free_money >= price
        after_purchase_free = free_money - price
        reserve_impact = max(0, safety_reserve - after_purchase_free)
        
        analysis = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        analysis.append(ft.Text(f"üõí {product_name} - {price:,.0f} ‚ÇΩ", size=18, weight=ft.FontWeight.BOLD))
        analysis.append(ft.Divider())
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        analysis.append(ft.Container(
            content=ft.Column([
                ft.Text("üí∞ –í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"‚Ä¢ –†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_reserve:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: {free_money:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: {after_purchase_free:,.0f} ‚ÇΩ", size=14)
            ], spacing=5),
            padding=15,
            bgcolor=ft.Colors.BLUE_50,
            border_radius=8
        ))
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∫–∏
        if can_buy_now:
            if after_purchase_free >= safety_reserve:
                # –†–µ–∑–µ—Ä–≤ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç
                analysis.append(ft.Container(
                    content=ft.Column([
                        ft.Text("‚úÖ –ú–û–ñ–ù–û –ö–£–ü–ò–¢–¨", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN),
                        ft.Text("–†–µ–∑–µ—Ä–≤ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç", size=16, color=ft.Colors.GREEN),
                        ft.Text(f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–∞: {after_purchase_free:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN)
                    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                    padding=15,
                    bgcolor=ft.Colors.GREEN_50,
                    border_radius=8
                ))
            elif after_purchase_free > 0:
                # –ó–∞—Ç—Ä–æ–Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                analysis.append(ft.Container(
                    content=ft.Column([
                        ft.Text("‚ö†Ô∏è –ú–û–ñ–ï–¢–ï –ö–£–ü–ò–¢–¨, –ù–û –ó–ê–¢–†–û–ù–ï–¢–ï –†–ï–ó–ï–†–í", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.ORANGE),
                        ft.Text(f"–ó–∞—Ç—Ä–æ–Ω–µ—Ç–µ —Ä–µ–∑–µ—Ä–≤ –Ω–∞: {reserve_impact:,.0f} ‚ÇΩ", size=16),
                        ft.Text(f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–∞: {after_purchase_free:,.0f} ‚ÇΩ", size=16),
                        ft.Text("‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è - –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", size=14, color=ft.Colors.RED)
                    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                    padding=15,
                    bgcolor=ft.Colors.ORANGE_50,
                    border_radius=8
                ))
            else:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                analysis.append(ft.Container(
                    content=ft.Column([
                        ft.Text("‚ùå –ù–ï–õ–¨–ó–Ø –ö–£–ü–ò–¢–¨", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.RED),
                        ft.Text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥", size=16, color=ft.Colors.RED),
                        ft.Text(f"–ù—É–∂–Ω–æ –µ—â–µ: {abs(after_purchase_free):,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED)
                    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                    padding=15,
                    bgcolor=ft.Colors.RED_50,
                ))
        else:
            # –ù–µ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å
            needed = price - free_money
            analysis.append(ft.Container(
                content=ft.Column([
                    ft.Text("‚ùå –ù–ï–õ–¨–ó–Ø –ö–£–ü–ò–¢–¨", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.RED),
                    ft.Text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥", size=14, color=ft.Colors.RED),
                    ft.Text(f"–ù—É–∂–Ω–æ –µ—â–µ: {needed:,.0f} ‚ÇΩ", size=14, color=ft.Colors.RED)
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=15,
                bgcolor=ft.Colors.RED_50,
            ))
        
        # –î–µ—Ç–∞–ª–∏
        analysis.append(ft.Text("üìä –î–µ—Ç–∞–ª–∏:", size=14, weight=ft.FontWeight.BOLD))
        analysis.append(ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ", size=12))
        analysis.append(ft.Text(f"‚Ä¢ –†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_reserve:,.0f} ‚ÇΩ", size=12))
        analysis.append(ft.Text(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: {free_money:,.0f} ‚ÇΩ", size=12))
        analysis.append(ft.Text(f"‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {after_purchase_free:,.0f} ‚ÇΩ", size=12, 
                               color=ft.Colors.GREEN if after_purchase_free >= 0 else ft.Colors.RED))
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
        analysis.append(ft.Text("üìÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º:", size=14, weight=ft.FontWeight.BOLD))
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        best_months = self.get_best_months_for_purchase(price)
        worst_months = self.get_worst_months_for_purchase(price)
        
        # –õ—É—á—à–∏–µ –º–µ—Å—è—Ü—ã
        if best_months:
            analysis.append(ft.Text("üü¢ –õ—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", size=12, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN))
            for month_info in best_months[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                month_name = month_info['month']
                reason = month_info['reason']
                analysis.append(ft.Text(f"  ‚Ä¢ {month_name}: {reason}", size=11, color=ft.Colors.GREEN))
        
        # –•—É–¥—à–∏–µ –º–µ—Å—è—Ü—ã
        if worst_months:
            analysis.append(ft.Text("üî¥ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –≤:", size=12, weight=ft.FontWeight.BOLD, color=ft.Colors.RED))
            for month_info in worst_months[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-2 —Ö—É–¥—à–∏—Ö
                month_name = month_info['month']
                reason = month_info['reason']
                analysis.append(ft.Text(f"  ‚Ä¢ {month_name}: {reason}", size=11, color=ft.Colors.RED))
        
        # –ü–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        if not can_buy_now:
            analysis.append(ft.Text("üí∞ –ü–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:", size=14, weight=ft.FontWeight.BOLD))
            needed = price - free_money
            monthly_savings = self.calculate_monthly_savings()
            
            if monthly_savings > 0:
                months_to_save = max(1, round(needed / monthly_savings))
                analysis.append(ft.Text(f"‚Ä¢ –ù—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å: {needed:,.0f} ‚ÇΩ", size=12))
                analysis.append(ft.Text(f"‚Ä¢ –ü—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ {monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å: {months_to_save} –º–µ—Å", size=12))
                
                # –õ—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
                best_saving_months = self.get_best_months_for_saving()
                if best_saving_months:
                    analysis.append(ft.Text("‚Ä¢ –õ—É—á—à–µ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å –≤:", size=12, weight=ft.FontWeight.BOLD))
                    for month_info in best_saving_months[:2]:
                        month_name = month_info['month']
                        reason = month_info['reason']
                        analysis.append(ft.Text(f"  - {month_name}: {reason}", size=11, color=ft.Colors.BLUE))
            else:
                analysis.append(ft.Text("‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ—Ö–æ–¥—ã –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã", size=12, color=ft.Colors.ORANGE))
        
        # –£–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        analysis.append(ft.Text("üí° –£–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:", size=14, weight=ft.FontWeight.BOLD))
        
        if can_buy_now and after_purchase_free >= safety_reserve:
            analysis.append(ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ - –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Å–µ–π—á–∞—Å", size=12, color=ft.Colors.GREEN))
            analysis.append(ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∫–∏–¥–∫–∏ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞", size=12, color=ft.Colors.BLUE))
        elif can_buy_now and after_purchase_free > 0:
            analysis.append(ft.Text("‚Ä¢ –õ—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å - –∑–∞—Ç—Ä–æ–Ω–µ—Ç–µ —Ä–µ–∑–µ—Ä–≤", size=12, color=ft.Colors.ORANGE))
            analysis.append(ft.Text("‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç–µ –µ—â–µ {:.0f} ‚ÇΩ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π".format(safety_reserve - after_purchase_free), size=12, color=ft.Colors.ORANGE))
        else:
            analysis.append(ft.Text("‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π", size=12, color=ft.Colors.RED))
            analysis.append(ft.Text("‚Ä¢ –ü–æ–∏—â–∏—Ç–µ —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏", size=12, color=ft.Colors.BLUE))
            analysis.append(ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É", size=12, color=ft.Colors.BLUE))
            analysis.append(ft.Text("‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ª—É—á—à–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", size=12, color=ft.Colors.BLUE))
        
        # –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–ª–∏
        if goals and remaining_goals > 0:
            analysis.append(ft.Text("üéØ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à–∏ —Ü–µ–ª–∏:", size=14, weight=ft.FontWeight.BOLD))
            analysis.append(ft.Text(f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å: {remaining_goals:,.0f} ‚ÇΩ", size=12))
            
            if can_buy_now:
                new_remaining = remaining_goals + price
                analysis.append(ft.Text(f"‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç—å: {new_remaining:,.0f} ‚ÇΩ", size=12, color=ft.Colors.ORANGE))
                
                if monthly_savings > 0:
                    months_delay = price / monthly_savings
                    analysis.append(ft.Text(f"‚Ä¢ –¶–µ–ª–∏ –æ—Ç–ª–æ–∂–∞—Ç—Å—è –Ω–∞: {months_delay:.1f} –º–µ—Å—è—Ü–µ–≤", size=12, color=ft.Colors.ORANGE))
            else:
                analysis.append(ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–ª–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥)", size=12, color=ft.Colors.GREY_600))
        
        # –†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑
        analysis.append(ft.Text("‚ö†Ô∏è –†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑:", size=14, weight=ft.FontWeight.BOLD))
        
        if after_purchase_free >= safety_reserve * 1.5:
            risk_level = "–ù–∏–∑–∫–∏–π"
            risk_color = ft.Colors.GREEN
        elif after_purchase_free >= safety_reserve:
            risk_level = "–°—Ä–µ–¥–Ω–∏–π"
            risk_color = ft.Colors.ORANGE
        else:
            risk_level = "–í—ã—Å–æ–∫–∏–π"
            risk_color = ft.Colors.RED
        
        analysis.append(ft.Text(f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}", size=12, color=risk_color))
        analysis.append(ft.Text(f"‚Ä¢ –û—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–∞: {after_purchase_free:,.0f} ‚ÇΩ", size=12))
        analysis.append(ft.Text(f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∑–µ—Ä–≤: {safety_reserve:,.0f} ‚ÇΩ", size=12))
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        analysis.append(ft.Text("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:", size=14, weight=ft.FontWeight.BOLD))
        
        if not can_buy_now:
            analysis.append(ft.Text("‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π", size=12, color=ft.Colors.BLUE))
            analysis.append(ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É", size=12, color=ft.Colors.BLUE))
            analysis.append(ft.Text("‚Ä¢ –ü–æ–∏—â–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏", size=12, color=ft.Colors.BLUE))
        else:
            analysis.append(ft.Text("‚Ä¢ –ú–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", size=12, color=ft.Colors.GREEN))
            analysis.append(ft.Text("‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–∫–∏–¥–æ–∫", size=12, color=ft.Colors.BLUE))
            analysis.append(ft.Text("‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏", size=12, color=ft.Colors.BLUE))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        analysis.append(ft.Text("üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:", size=12, weight=ft.FontWeight.BOLD))
        analysis.append(ft.Text("‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏", size=11, color=ft.Colors.GREY_600))
        analysis.append(ft.Text("‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Ü–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö", size=11, color=ft.Colors.GREY_600))
        analysis.append(ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±/—É –≤–∞—Ä–∏–∞–Ω—Ç—ã", size=11, color=ft.Colors.GREY_600))
        analysis.append(ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫ –∏ –±–æ–Ω—É—Å—ã", size=11, color=ft.Colors.GREY_600))
        analysis.append(ft.Text("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∏—é –∏ –≤–æ–∑–≤—Ä–∞—Ç", size=11, color=ft.Colors.GREY_600))
        analysis.append(ft.Text("‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", size=11, color=ft.Colors.GREY_600))
        
        return ft.Column(analysis, spacing=10)
    
    def get_best_months_for_purchase(self, price=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏"""
        months_analysis = {
            1: {"name": "–Ø–Ω–≤–∞—Ä—å", "good": True, "reason": "–ù–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"},
            2: {"name": "–§–µ–≤—Ä–∞–ª—å", "good": True, "reason": "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞, –Ω–æ –Ω–µ–±–æ–ª—å—à–∏–µ —Ç—Ä–∞—Ç—ã"},
            3: {"name": "–ú–∞—Ä—Ç", "good": True, "reason": "8 –ú–∞—Ä—Ç–∞, –Ω–æ —É–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"},
            4: {"name": "–ê–ø—Ä–µ–ª—å", "good": True, "reason": "–ù–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            5: {"name": "–ú–∞–π", "good": True, "reason": "–ú–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –Ω–æ –º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö"},
            6: {"name": "–ò—é–Ω—å", "good": True, "reason": "–ù–∞—á–∞–ª–æ –ª–µ—Ç–∞, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"},
            7: {"name": "–ò—é–ª—å", "good": True, "reason": "–°–µ—Ä–µ–¥–∏–Ω–∞ –ª–µ—Ç–∞, –æ—Ç–ø—É—Å–∫–∞"},
            8: {"name": "–ê–≤–≥—É—Å—Ç", "good": True, "reason": "–ö–æ–Ω–µ—Ü –ª–µ—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Å–µ–Ω–∏"},
            9: {"name": "–°–µ–Ω—Ç—è–±—Ä—å", "good": True, "reason": "–ù–∞—á–∞–ª–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"},
            10: {"name": "–û–∫—Ç—è–±—Ä—å", "good": True, "reason": "–û—Å–µ–Ω—å, —É–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"},
            11: {"name": "–ù–æ—è–±—Ä—å", "good": True, "reason": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∏–º–µ, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"},
            12: {"name": "–î–µ–∫–∞–±—Ä—å", "good": False, "reason": "–ù–æ–≤—ã–π –≥–æ–¥ - –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç"}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            if month in months_analysis:
                months_analysis[month]["good"] = False
                months_analysis[month]["reason"] = f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {birthday['name']} - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        good_months = []
        for month_num, data in months_analysis.items():
            if data["good"]:
                good_months.append({
                    "month": data["name"],
                    "reason": data["reason"],
                    "priority": self.get_month_priority(month_num)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        good_months.sort(key=lambda x: x["priority"], reverse=True)
        return good_months
    
    def get_worst_months_for_purchase(self, price=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—É–¥—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏"""
        months_analysis = {
            1: {"name": "–Ø–Ω–≤–∞—Ä—å", "bad": False, "reason": ""},
            2: {"name": "–§–µ–≤—Ä–∞–ª—å", "bad": False, "reason": ""},
            3: {"name": "–ú–∞—Ä—Ç", "bad": False, "reason": ""},
            4: {"name": "–ê–ø—Ä–µ–ª—å", "bad": False, "reason": ""},
            5: {"name": "–ú–∞–π", "bad": False, "reason": ""},
            6: {"name": "–ò—é–Ω—å", "bad": False, "reason": ""},
            7: {"name": "–ò—é–ª—å", "bad": False, "reason": ""},
            8: {"name": "–ê–≤–≥—É—Å—Ç", "bad": False, "reason": ""},
            9: {"name": "–°–µ–Ω—Ç—è–±—Ä—å", "bad": False, "reason": ""},
            10: {"name": "–û–∫—Ç—è–±—Ä—å", "bad": False, "reason": ""},
            11: {"name": "–ù–æ—è–±—Ä—å", "bad": False, "reason": ""},
            12: {"name": "–î–µ–∫–∞–±—Ä—å", "bad": True, "reason": "–ù–æ–≤—ã–π –≥–æ–¥ - –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏"}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            if month in months_analysis:
                months_analysis[month]["bad"] = True
                months_analysis[month]["reason"] = f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {birthday['name']} - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ –º–µ—Å—è—Ü—ã
        bad_months = []
        for month_num, data in months_analysis.items():
            if data["bad"]:
                bad_months.append({
                    "month": data["name"],
                    "reason": data["reason"],
                    "priority": self.get_month_bad_priority(month_num)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—á–µ–º –≤—ã—à–µ, —Ç–µ–º —Ö—É–∂–µ)
        bad_months.sort(key=lambda x: x["priority"], reverse=True)
        return bad_months
    
    def get_best_months_for_saving(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏"""
        best_purchase = self.get_best_months_for_purchase()
        # –î–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π
        saving_months = []
        for month_info in best_purchase:
            month_name = month_info["month"]
            if month_name in ["–ê–ø—Ä–µ–ª—å", "–û–∫—Ç—è–±—Ä—å", "–°–µ–Ω—Ç—è–±—Ä—å"]:
                reason = f"–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π - {month_info['reason']}"
            else:
                reason = f"–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π - {month_info['reason']}"
            
            saving_months.append({
                "month": month_name,
                "reason": reason
            })
        
        return saving_months
    
    def get_month_priority(self, month):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ (1-10)"""
        priorities = {
            1: 8,   # –Ø–Ω–≤–∞—Ä—å - –ø–æ—Å–ª–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —Ö–æ—Ä–æ—à–∏–µ —Å–∫–∏–¥–∫–∏
            2: 6,   # –§–µ–≤—Ä–∞–ª—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ
            3: 7,   # –ú–∞—Ä—Ç - –≤–µ—Å–Ω–∞, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            4: 9,   # –ê–ø—Ä–µ–ª—å - –æ—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü
            5: 8,   # –ú–∞–π - –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –Ω–æ –º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö
            6: 7,   # –ò—é–Ω—å - –ª–µ—Ç–æ
            7: 6,   # –ò—é–ª—å - –æ—Ç–ø—É—Å–∫–∞
            8: 7,   # –ê–≤–≥—É—Å—Ç - –∫–æ–Ω–µ—Ü –ª–µ—Ç–∞
            9: 8,   # –°–µ–Ω—Ç—è–±—Ä—å - –Ω–∞—á–∞–ª–æ –≥–æ–¥–∞
            10: 9,  # –û–∫—Ç—è–±—Ä—å - –æ—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü
            11: 8,  # –ù–æ—è–±—Ä—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ
            12: 2   # –î–µ–∫–∞–±—Ä—å - –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç
        }
        return priorities.get(month, 5)
    
    def get_month_bad_priority(self, month):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Å—è—Ü–∞ –¥–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ (1-10)"""
        priorities = {
            1: 3,   # –Ø–Ω–≤–∞—Ä—å - –ø–æ—Å–ª–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å
            2: 2,   # –§–µ–≤—Ä–∞–ª—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ
            3: 2,   # –ú–∞—Ä—Ç - —Å—Ç–∞–±–∏–ª—å–Ω–æ
            4: 1,   # –ê–ø—Ä–µ–ª—å - —Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü
            5: 2,   # –ú–∞–π - –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            6: 1,   # –ò—é–Ω—å - —Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü
            7: 2,   # –ò—é–ª—å - –æ—Ç–ø—É—Å–∫–∞, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            8: 1,   # –ê–≤–≥—É—Å—Ç - —Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü
            9: 1,   # –°–µ–Ω—Ç—è–±—Ä—å - —Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü
            10: 1,  # –û–∫—Ç—è–±—Ä—å - –æ—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü
            11: 1,  # –ù–æ—è–±—Ä—å - —Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü
            12: 10  # –î–µ–∫–∞–±—Ä—å - —Ö—É–¥—à–∏–π –º–µ—Å—è—Ü
        }
        return priorities.get(month, 1)
    
    def calculate_monthly_savings(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"""
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_current_month_expenses()
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        rent_cost = self.finance_app.data.get("rent", 25000)
        return salary - monthly_expenses - chatgpt_cost - rent_cost
    
    def update_purchase_name(self, e):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        self.purchase_name = e.control.value
    
    def update_purchase_price(self, e):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
        try:
            self.purchase_price = float(e.control.value) if e.control.value else 0
        except ValueError:
            self.purchase_price = 0
    
    def go_to_analytics_page(self, e):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.main_content.content = self.create_analytics_page()
        self.page.update()
    
    def create_money_page(self):
        return ft.Column([
            ft.Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–ª–∞–¥–∞", size=18, weight=ft.FontWeight.BOLD),
                        ft.TextField(
                            label="–û–∫–ª–∞–¥ (‚ÇΩ)",
                            value=str(self.finance_app.data["salary"]),
                            on_change=self.update_salary
                        ),
                        ft.Text("–î–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã:", size=14, weight=ft.FontWeight.BOLD),
                        ft.Row([
                            ft.TextField(
                                label="–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞",
                                value=str(self.finance_app.data["salary_dates"][0]),
                                width=100,
                                keyboard_type=ft.KeyboardType.NUMBER,
                                on_change=self.update_salary_date_1
                            ),
                            ft.TextField(
                                label="–í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞",
                                value=str(self.finance_app.data["salary_dates"][1]),
                                width=100,
                                keyboard_type=ft.KeyboardType.NUMBER,
                                on_change=self.update_salary_date_2
                            )
                        ], spacing=10),
                        ft.Text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 31", size=12, color=ft.Colors.GREY_600),
                        ft.ElevatedButton("–û–±–Ω–æ–≤–∏—Ç—å", on_click=self.update_money_values)
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–¢–µ–∫—É—â–∏–µ –¥–µ–Ω—å–≥–∏", size=18, weight=ft.FontWeight.BOLD),
                        ft.TextField(
                            label="–°—É–º–º–∞ (‚ÇΩ)",
                            value=str(self.finance_app.data["current_money"]),
                            on_change=self.update_current_money
                        ),
                        ft.ElevatedButton("–û–±–Ω–æ–≤–∏—Ç—å", on_click=self.update_money_values)
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üõ°Ô∏è –†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", size=18, weight=ft.FontWeight.BOLD),
                        ft.TextField(
                            label="–†–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–∞ (‚ÇΩ)",
                            value=str(self.finance_app.data["safety_reserve"]),
                            on_change=self.update_safety_reserve
                        ),
                        ft.Text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å—á–µ—Ç—É", size=12, color=ft.Colors.GREY_600),
                        self.create_reserve_status()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("ü§ñ ChatGPT Plus", size=18, weight=ft.FontWeight.BOLD),
                        ft.Row([
                            ft.Text("3,000 ‚ÇΩ/–º–µ—Å—è—Ü", size=16),
                            ft.Switch(
                                value=self.finance_app.data["chatgpt_enabled"],
                                on_change=self.toggle_chatgpt
                            )
                        ]),
                        ft.Text("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É—á–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ChatGPT", size=12, color=ft.Colors.GREY_600)
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD),
                        self.create_birthdays_management()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞", size=18, weight=ft.FontWeight.BOLD),
                        ft.TextField(
                            label="–°—É–º–º–∞ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã (‚ÇΩ)",
                            value=str(self.finance_app.data.get("rent_cost", 25000)),
                            on_change=self.update_rent_cost
                        ),
                        ft.TextField(
                            label="–û–ø–ª–∞—á–µ–Ω–æ –¥–æ (YYYY-MM-DD)",
                            value=self.finance_app.data["rent_paid_until"] or "",
                            on_change=self.update_rent_paid_until
                        ),
                        ft.Row([
                            ft.ElevatedButton(
                                "–û–ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É",
                                on_click=self.pay_rent,
                                style=ft.ButtonStyle(bgcolor=ft.Colors.ORANGE_400)
                            ),
                            ft.ElevatedButton(
                                "–°–±—Ä–æ—Å–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É",
                                on_click=self.reset_rent,
                                style=ft.ButtonStyle(bgcolor=ft.Colors.RED_400)
                            )
                        ], spacing=10),
                        ft.ElevatedButton("–û–±–Ω–æ–≤–∏—Ç—å", on_click=self.update_money_values),
                        self.create_rent_status()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_transactions_list()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_goals_page(self):
        self.goal_name_field = ft.TextField(label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
        self.goal_amount_field = ft.TextField(label="–°—É–º–º–∞ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER)
        self.goal_date_field = ft.TextField(
            label="–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (YYYY-MM-DD)", 
            hint_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25",
            helper_text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î"
        )
        
        return ft.Column([
            ft.Text("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", size=18, weight=ft.FontWeight.BOLD),
                        self.goal_name_field,
                        self.goal_amount_field,
                        self.goal_date_field,
                        ft.ElevatedButton("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", on_click=self.add_goal)
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–ú–æ–∏ —Ü–µ–ª–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_goals_list()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_analytics_page(self):
        return ft.Column([
            ft.Text("ü§ñ –£–º–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫", size=24, weight=ft.FontWeight.BOLD),
            ft.Text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –¥–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", size=14, color=ft.Colors.GREY_600),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üéØ –ú–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω", size=18, weight=ft.FontWeight.BOLD),
                        self.create_financial_plan()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∞ –ö–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –∫–æ–ø–∏—Ç—å", size=18, weight=ft.FontWeight.BOLD),
                        self.create_savings_strategy()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD),
                        self.create_critical_warnings()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üéØ –ú–æ–∏ —Ü–µ–ª–∏ –∏ —Å—Ä–æ–∫–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_goals_analysis()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º", size=18, weight=ft.FontWeight.BOLD),
                        self.create_detailed_monthly_analysis()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí° –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", size=18, weight=ft.FontWeight.BOLD),
                        self.create_action_plan()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def update_purchase_name(self, e):
        self.purchase_name = e.control.value
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        self.refresh_purchase_analysis()
    
    def update_purchase_price(self, e):
        try:
            self.purchase_price = float(e.control.value) if e.control.value else 0
        except ValueError:
            self.purchase_price = 0
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
        self.refresh_purchase_analysis()
    
    def create_purchase_analysis_container(self):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—É–ø–∫–∏
        self.purchase_analysis_container = ft.Container(
            content=self.create_purchase_analysis(),
            padding=10
        )
        return self.purchase_analysis_container
    
    def refresh_purchase_analysis(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—É–ø–∫–∏
        if hasattr(self, 'purchase_analysis_container'):
            self.purchase_analysis_container.content = self.create_purchase_analysis()
            self.page.update()
    
    def refresh_all_pages(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if hasattr(self, 'main_content') and self.main_content.content:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            current_page = self.navigation_bar.selected_index if hasattr(self, 'navigation_bar') else 0
            
            if current_page == 0:  # –ì–ª–∞–≤–Ω–∞—è
                self.main_content.content = self.create_home_page()
            elif current_page == 1:  # –î–µ–Ω—å–≥–∏
                self.main_content.content = self.create_money_page()
            elif current_page == 2:  # –¶–µ–ª–∏
                self.main_content.content = self.create_goals_page()
            elif current_page == 3:  # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                self.main_content.content = self.create_analytics_page()
            elif current_page == 4:  # –ü—Ä–æ–≥–Ω–æ–∑
                self.main_content.content = self.create_forecast_page()
            elif current_page == 5:  # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                self.main_content.content = self.create_calculator_page()
            elif current_page == 6:  # –ó–∞–º–µ—Ç–∫–∏
                self.main_content.content = self.create_notes_page()
        
        self.page.update()
    
    def check_purchase_affordability(self, e):
        self.refresh_purchase_analysis()
    
    def create_purchase_analysis(self):
        if not hasattr(self, 'purchase_price') or self.purchase_price <= 0:
            return ft.Text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞", size=14, color=ft.Colors.GREY_600)
        
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        free_money = current_money - safety_reserve
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–µ
        rent_paid_until = self.finance_app.data.get("rent_paid_until", "")
        current_date = datetime(2025, datetime.now().month, datetime.now().day)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        def should_pay_rent_current():
            if not rent_paid_until:
                return True
            try:
                paid_until = datetime.strptime(rent_paid_until, "%Y-%m-%d")
                return current_date > paid_until
            except:
                return True
        
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        rent_for_current_month = rent_cost if should_pay_rent_current() else 0
        monthly_savings = self.finance_app.data["salary"] - self.calculate_average_monthly_expenses() - (3000 if self.finance_app.data["chatgpt_enabled"] else 0) - rent_for_current_month
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        current_month = datetime.now().month
        current_year = datetime.now().year
        current_day = datetime.now().day
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –î–† –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        holidays = self.get_holidays_for_month(current_month)
        birthdays = self.get_birthdays_for_month(current_month)
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏
        can_buy_now = free_money >= self.purchase_price
        
        analysis = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
        product_name = getattr(self, 'purchase_name', '–¢–æ–≤–∞—Ä')
        analysis.append(ft.Text(f"üõí {product_name} - {self.purchase_price:,.0f} ‚ÇΩ", size=18, weight=ft.FontWeight.BOLD))
        analysis.append(ft.Divider())
        
        # –¢–µ–∫—É—â–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        analysis.append(ft.Text("üí∞ –í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:", size=16, weight=ft.FontWeight.BOLD))
        analysis.append(ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ", size=14))
        analysis.append(ft.Text(f"‚Ä¢ –†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_reserve:,.0f} ‚ÇΩ", size=14))
        analysis.append(ft.Text(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: {free_money:,.0f} ‚ÇΩ", size=14, color=ft.Colors.BLUE if free_money >= 0 else ft.Colors.RED))
        analysis.append(ft.Text(f"‚Ä¢ –ú–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å: {monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.GREEN if monthly_savings > 0 else ft.Colors.RED))
        
        analysis.append(ft.Divider())
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        analysis.append(ft.Text(f"üìÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ ({self.get_month_name(current_month)}):", size=16, weight=ft.FontWeight.BOLD))
        
        if holidays:
            analysis.append(ft.Text(f"‚Ä¢ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {', '.join(holidays)}", size=14, color=ft.Colors.ORANGE))
        else:
            analysis.append(ft.Text("‚Ä¢ –ü—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç", size=14, color=ft.Colors.GREEN))
        
        if birthdays:
            analysis.append(ft.Text(f"‚Ä¢ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: {', '.join(birthdays)}", size=14, color=ft.Colors.PURPLE))
        else:
            analysis.append(ft.Text("‚Ä¢ –î–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ—Ç", size=14, color=ft.Colors.GREEN))
        
        # –û—Å—Ç–∞—Ç–æ–∫ –º–µ—Å—è—Ü–∞
        import calendar
        days_in_month = calendar.monthrange(current_year, current_month)[1]
        remaining_days = days_in_month - current_day + 1
        analysis.append(ft.Text(f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ: {remaining_days}", size=14))
        
        analysis.append(ft.Divider())
        
        if can_buy_now:
            # –ú–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å
            remaining_after_purchase = free_money - self.purchase_price
            
            analysis.append(ft.Text("‚úÖ –ú–û–ñ–ï–¢–ï –ö–£–ü–ò–¢–¨ –°–ï–ô–ß–ê–°!", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN))
            analysis.append(ft.Text("–ü–æ—á–µ–º—É –î–ê:", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN))
            analysis.append(ft.Text(f"‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å {free_money:,.0f} ‚ÇΩ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥", size=14))
            analysis.append(ft.Text(f"‚Ä¢ –¢–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç {self.purchase_price:,.0f} ‚ÇΩ", size=14))
            analysis.append(ft.Text(f"‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è {remaining_after_purchase:,.0f} ‚ÇΩ", size=14))
            analysis.append(ft.Text("‚Ä¢ –†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", size=14, color=ft.Colors.GREEN))
            
            if remaining_after_purchase < 5000:
                analysis.append(ft.Text("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–∞–ª–æ –¥–µ–Ω–µ–≥", size=14, color=ft.Colors.ORANGE))
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫—É–ø–∫–∏
            if holidays or birthdays:
                analysis.append(ft.Text("‚ö†Ô∏è –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏/–î–† - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Ç—Ä–∞—Ç–∞–º–∏", size=14, color=ft.Colors.ORANGE))
            else:
                analysis.append(ft.Text("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç", size=14, color=ft.Colors.GREEN))
                
        else:
            # –ù—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å
            need_to_save = self.purchase_price - free_money
            
            analysis.append(ft.Text("‚ùå –ù–ï –ú–û–ñ–ï–¢–ï –ö–£–ü–ò–¢–¨ –°–ï–ô–ß–ê–°", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.RED))
            analysis.append(ft.Text("–ü–æ—á–µ–º—É –ù–ï–¢:", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.RED))
            analysis.append(ft.Text(f"‚Ä¢ –£ –≤–∞—Å —Ç–æ–ª—å–∫–æ {free_money:,.0f} ‚ÇΩ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥", size=14))
            analysis.append(ft.Text(f"‚Ä¢ –¢–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç {self.purchase_price:,.0f} ‚ÇΩ", size=14))
            analysis.append(ft.Text(f"‚Ä¢ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {need_to_save:,.0f} ‚ÇΩ", size=14, color=ft.Colors.RED))
            
            if monthly_savings > 0:
                months_to_save = need_to_save / monthly_savings
                best_month = self.find_best_month_for_purchase()
                
                analysis.append(ft.Divider())
                analysis.append(ft.Text("üí° –ü–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:", size=16, weight=ft.FontWeight.BOLD))
                analysis.append(ft.Text(f"‚Ä¢ –ù—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å: {need_to_save:,.0f} ‚ÇΩ", size=14, color=ft.Colors.ORANGE))
                analysis.append(ft.Text(f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {months_to_save:.1f} –º–µ—Å—è—Ü–µ–≤", size=14, color=ft.Colors.BLUE))
                analysis.append(ft.Text(f"‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ: {monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.BLUE))
                analysis.append(ft.Text(f"‚Ä¢ –õ—É—á—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {best_month}", size=14, color=ft.Colors.GREEN))
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º
                analysis.append(ft.Divider())
                analysis.append(ft.Text("üìÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º:", size=16, weight=ft.FontWeight.BOLD))
                self.add_monthly_savings_plan(analysis, need_to_save, monthly_savings, current_month)
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª—É—á—à–∏–º –º–µ—Å—è—Ü–∞–º
                analysis.append(ft.Divider())
                analysis.append(ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫—É–ø–∫–∏:", size=16, weight=ft.FontWeight.BOLD))
                self.add_purchase_recommendations(analysis, need_to_save, monthly_savings, current_month)
                
            else:
                analysis.append(ft.Divider())
                analysis.append(ft.Text("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.RED))
                analysis.append(ft.Text("‚Ä¢ –°–†–û–ß–ù–û: –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã!", size=14, color=ft.Colors.RED))
                analysis.append(ft.Text("‚Ä¢ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ", size=14, color=ft.Colors.RED))
                analysis.append(ft.Text("‚Ä¢ –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ç—Ä–∞—Ç—ã", size=14, color=ft.Colors.RED))
        
        return ft.Column(analysis, spacing=8)
    
    def get_holidays_for_month(self, month):
        holidays = []
        if month == 1:
            holidays.append("–ù–æ–≤—ã–π –≥–æ–¥")
        elif month == 2:
            holidays.append("–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞")
        elif month == 3:
            holidays.append("8 –ú–∞—Ä—Ç–∞")
        return holidays
    
    def get_birthdays_for_month(self, month):
        birthdays = []
        for birthday in self.finance_app.data["birthdays"]:
            if self.convert_month_to_int(birthday["month"]) == month:
                birthdays.append({
                    "name": birthday["name"],
                    "relationship": birthday["relationship"],
                    "gift_cost": birthday.get("gift_cost", 2000)
                })
        return birthdays
    
    def get_months_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–µ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        months_analysis = {
            1: {"name": "–Ø–Ω–≤–∞—Ä—å", "good": True, "cost": 0, "reason": ""},
            2: {"name": "–§–µ–≤—Ä–∞–ª—å", "good": True, "cost": 0, "reason": ""},
            3: {"name": "–ú–∞—Ä—Ç", "good": True, "cost": 0, "reason": ""},
            4: {"name": "–ê–ø—Ä–µ–ª—å", "good": True, "cost": 0, "reason": ""},
            5: {"name": "–ú–∞–π", "good": True, "cost": 0, "reason": ""},
            6: {"name": "–ò—é–Ω—å", "good": True, "cost": 0, "reason": ""},
            7: {"name": "–ò—é–ª—å", "good": True, "cost": 0, "reason": ""},
            8: {"name": "–ê–≤–≥—É—Å—Ç", "good": True, "cost": 0, "reason": ""},
            9: {"name": "–°–µ–Ω—Ç—è–±—Ä—å", "good": True, "cost": 0, "reason": ""},
            10: {"name": "–û–∫—Ç—è–±—Ä—å", "good": True, "cost": 0, "reason": ""},
            11: {"name": "–ù–æ—è–±—Ä—å", "good": True, "cost": 0, "reason": ""},
            12: {"name": "–î–µ–∫–∞–±—Ä—å", "good": True, "cost": 0, "reason": ""}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holiday_months = {
            2: 3000,  # –î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞
            3: 5000,  # 8 –ú–∞—Ä—Ç–∞
            5: 2000,  # –î–µ–Ω—å –ü–æ–±–µ–¥—ã
            6: 2000,  # –î–µ–Ω—å –†–æ—Å—Å–∏–∏
            11: 2000, # –î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞
            12: 15000 # –ù–æ–≤—ã–π –≥–æ–¥
        }
        
        for month, cost in holiday_months.items():
            months_analysis[month]["cost"] = cost
            months_analysis[month]["good"] = False
            months_analysis[month]["reason"] = "–ü—Ä–∞–∑–¥–Ω–∏–∫"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        for birthday in self.finance_app.data["birthdays"]:
            month = self.convert_month_to_int(birthday["month"])
            if month in months_analysis:
                months_analysis[month]["cost"] += birthday.get("gift_cost", 2000)
                months_analysis[month]["good"] = months_analysis[month]["cost"] < 5000
                if months_analysis[month]["reason"]:
                    months_analysis[month]["reason"] += f" + –î–† {birthday['name']}"
                else:
                    months_analysis[month]["reason"] = f"–î–† {birthday['name']}"
        
        return months_analysis
    
    def get_month_name(self, month):
        months = ["", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                 "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
        return months[month]
    
    def add_monthly_savings_plan(self, analysis, need_to_save, monthly_savings, current_month):
        saved_amount = 0
        month = current_month
        
        for i in range(12):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 12 –º–µ—Å—è—Ü–µ–≤
            if saved_amount >= need_to_save:
                break
                
            month_name = self.get_month_name(month)
            holidays = self.get_holidays_for_month(month)
            birthdays = self.get_birthdays_for_month(month)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
            if holidays or birthdays:
                # –í –º–µ—Å—è—Ü–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏/–î–† –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –º–µ–Ω—å—à–µ
                monthly_save = monthly_savings * 0.5
            else:
                monthly_save = monthly_savings
            
            saved_amount += monthly_save
            remaining = max(0, need_to_save - saved_amount)
            
            status = "‚úÖ –ì–û–¢–û–í–û" if remaining == 0 else f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f} ‚ÇΩ"
            color = ft.Colors.GREEN if remaining == 0 else ft.Colors.BLUE
            
            month_info = f"‚Ä¢ {month_name}: +{monthly_save:,.0f} ‚ÇΩ (–Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {min(saved_amount, need_to_save):,.0f} ‚ÇΩ) - {status}"
            
            if holidays:
                month_info += f" [–ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {', '.join(holidays)}]"
            if birthdays:
                month_info += f" [–î–†: {', '.join(birthdays)}]"
            
            analysis.append(ft.Text(month_info, size=12, color=color))
            
            month = (month % 12) + 1
    
    def add_purchase_recommendations(self, analysis, need_to_save, monthly_savings, current_month):
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        months_analysis = {
            1: {"name": "–Ø–Ω–≤–∞—Ä—å", "holiday": "", "cost": 0, "good": True, "reason": "–°–ø–æ–∫–æ–π–Ω—ã–π –º–µ—Å—è—Ü"},
            2: {"name": "–§–µ–≤—Ä–∞–ª—å", "holiday": "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "cost": 5000, "good": True, "reason": "–•–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü - –º–∞–ª–æ —Ç—Ä–∞—Ç"},
            3: {"name": "–ú–∞—Ä—Ç", "holiday": "8 –ú–∞—Ä—Ç–∞", "cost": 3000, "good": True, "reason": "–•–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü - –º–∞–ª–æ —Ç—Ä–∞—Ç"},
            4: {"name": "–ê–ø—Ä–µ–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            5: {"name": "–ú–∞–π", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            6: {"name": "–ò—é–Ω—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            7: {"name": "–ò—é–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            8: {"name": "–ê–≤–≥—É—Å—Ç", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            9: {"name": "–°–µ–Ω—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            10: {"name": "–û–∫—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            11: {"name": "–ù–æ—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True, "reason": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü - –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"},
            12: {"name": "–î–µ–∫–∞–±—Ä—å", "holiday": "–ù–æ–≤—ã–π –≥–æ–¥", "cost": 20000, "good": False, "reason": "–î–æ—Ä–æ–≥–æ–π –º–µ—Å—è—Ü - –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            if month in months_analysis:
                months_analysis[month]["cost"] += birthday["cost"]
                months_analysis[month]["good"] = months_analysis[month]["cost"] < 5000
                if birthday["cost"] > 0:
                    months_analysis[month]["reason"] += f" + –î–† {birthday['name']}"
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –º–µ—Å—è—Ü—ã
        good_months = [data for data in months_analysis.values() if data["good"]]
        bad_months = [data for data in months_analysis.values() if not data["good"]]
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ª—É—á—à–∏–µ –º–µ—Å—è—Ü—ã
        if good_months:
            analysis.append(ft.Text("‚úÖ –õ—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", size=14, color=ft.Colors.GREEN))
            for month_data in good_months[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                analysis.append(ft.Text(f"‚Ä¢ {month_data['name']}: {month_data['reason']}", size=12, color=ft.Colors.GREEN))
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø–ª–æ—Ö–∏—Ö –º–µ—Å—è—Ü–∞—Ö
        if bad_months:
            analysis.append(ft.Text("‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–∫—É–ø–æ–∫ –≤:", size=14, color=ft.Colors.RED))
            for month_data in bad_months:
                analysis.append(ft.Text(f"‚Ä¢ {month_data['name']}: {month_data['reason']}", size=12, color=ft.Colors.RED))
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if monthly_savings > 0:
            months_needed = need_to_save / monthly_savings
            recommended_month = good_months[0]["name"] if good_months else "–õ—é–±–æ–π –º–µ—Å—è—Ü"
            analysis.append(ft.Text(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–∞—á–Ω–∏—Ç–µ –∫–æ–ø–∏—Ç—å —Å–µ–π—á–∞—Å, –ø–æ–∫—É–ø–∞–π—Ç–µ –≤ {recommended_month}", size=14, color=ft.Colors.BLUE))
        else:
            analysis.append(ft.Text("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é", size=14, color=ft.Colors.ORANGE))
    
    def update_new_category(self, e):
        self.new_category_field = e.control
        self.page.update()
    
    def add_custom_category(self, e):
        if hasattr(self, 'new_category_field') and self.new_category_field.value:
            category_name = self.new_category_field.value.strip()
            category_key = category_name.lower().replace(" ", "_")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if "custom_categories" not in self.finance_app.data:
                self.finance_app.data["custom_categories"] = []
            
            if category_key not in [cat["key"] for cat in self.finance_app.data["custom_categories"]]:
                self.finance_app.data["custom_categories"].append({
                    "key": category_key,
                    "name": category_name,
                    "icon": "üì¶"
                })
                self.finance_app.save_data()
                self.refresh_all_pages()
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                self.new_category_field.value = ""
                self.page.update()
    
    def find_best_month_for_purchase(self):
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        months_analysis = {
            1: {"name": "–Ø–Ω–≤–∞—Ä—å", "holiday": "", "cost": 0, "good": True},
            2: {"name": "–§–µ–≤—Ä–∞–ª—å", "holiday": "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "cost": 5000, "good": True},
            3: {"name": "–ú–∞—Ä—Ç", "holiday": "8 –ú–∞—Ä—Ç–∞", "cost": 3000, "good": True},
            4: {"name": "–ê–ø—Ä–µ–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            5: {"name": "–ú–∞–π", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            6: {"name": "–ò—é–Ω—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            7: {"name": "–ò—é–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            8: {"name": "–ê–≤–≥—É—Å—Ç", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            9: {"name": "–°–µ–Ω—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            10: {"name": "–û–∫—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            11: {"name": "–ù–æ—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            12: {"name": "–î–µ–∫–∞–±—Ä—å", "holiday": "–ù–æ–≤—ã–π –≥–æ–¥", "cost": 20000, "good": False}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            if month in months_analysis:
                months_analysis[month]["cost"] += birthday["cost"]
                months_analysis[month]["good"] = months_analysis[month]["cost"] < 5000
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –º–µ—Å—è—Ü
        good_months = [data["name"] for data in months_analysis.values() if data["good"]]
        return good_months[0] if good_months else "–õ—é–±–æ–π –º–µ—Å—è—Ü"
    
    def create_financial_plan(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        current_month_expenses = self.get_current_month_expenses()
        current_month_income = self.get_current_month_income()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        free_money = current_money - safety_reserve
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        monthly_savings = salary - self.calculate_average_monthly_expenses() - (3000 if self.finance_app.data["chatgpt_enabled"] else 0) - rent_cost
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if free_money < 0:
            status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û"
            status_color = ft.Colors.RED
            advice = "–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç!"
        elif free_money < safety_reserve * 0.5:
            status = "üü° –í–ù–ò–ú–ê–ù–ò–ï"
            status_color = ft.Colors.ORANGE
            advice = "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã"
        elif free_money < safety_reserve:
            status = "üü† –û–°–¢–û–†–û–ñ–ù–û"
            status_color = ft.Colors.ORANGE
            advice = "–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∑–µ—Ä–≤—É"
        else:
            status = "üü¢ –û–¢–õ–ò–ß–ù–û"
            status_color = ft.Colors.GREEN
            advice = "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è"
        
        return ft.Column([
            ft.Row([
                ft.Text(f"–°—Ç–∞—Ç—É—Å: {status}", size=16, weight=ft.FontWeight.BOLD, color=status_color),
                ft.Text(f"–°–≤–æ–±–æ–¥–Ω–æ: {free_money:,.0f} ‚ÇΩ", size=16, color=ft.Colors.BLUE)
            ]),
            ft.Text(advice, size=14, color=status_color),
            ft.Divider(),
            
            ft.Text("üìä –í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∞:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ", size=14),
            ft.Text(f"‚Ä¢ –†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_reserve:,.0f} ‚ÇΩ", size=14),
            ft.Text(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: {free_money:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN if free_money >= 0 else ft.Colors.RED),
            ft.Text(f"‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –º–µ—Å—è—Ü: {salary:,.0f} ‚ÇΩ", size=14),
            ft.Text(f"‚Ä¢ –ú–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å: {monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.BLUE if monthly_savings > 0 else ft.Colors.RED),
            
            ft.Divider(),
            
            ft.Text("üéØ –ú–æ–π –ø–ª–∞–Ω –¥–ª—è –≤–∞—Å:", size=16, weight=ft.FontWeight.BOLD),
            self.get_personalized_plan(free_money, monthly_savings, safety_reserve)
        ], spacing=10)
    
    def get_personalized_plan(self, free_money, monthly_savings, safety_reserve):
        plans = []
        
        if free_money < 0:
            plans.append("1. –°–†–û–ß–ù–û: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –Ω–∞ 20,000+ ‚ÇΩ")
            plans.append("2. –ù–ï –¢–†–ê–¢–¨–¢–ï –Ω–∏—á–µ–≥–æ –¥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
            plans.append("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–µ–¥–∏—Ç–∫—É —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ")
        elif free_money < safety_reserve * 0.5:
            plans.append("1. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç—Ä–∞—Ç—ã –¥–æ –º–∏–Ω–∏–º—É–º–∞")
            plans.append("2. –ö–æ–ø–∏—Ç–µ –¥–æ 20,000 ‚ÇΩ —Ä–µ–∑–µ—Ä–≤–∞")
            plans.append("3. –ù–µ –ø–æ–∫—É–ø–∞–π—Ç–µ –Ω–∏—á–µ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ")
        elif free_money < safety_reserve:
            plans.append("1. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ç—Ä–∞—Ç–∞–º–∏")
            plans.append("2. –ö–æ–ø–∏—Ç–µ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞")
            plans.append("3. –û—Ç–ª–æ–∂–∏—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏")
        else:
            plans.append("1. –ú–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ")
            plans.append("2. –ö–æ–ø–∏—Ç–µ –Ω–∞ —Ü–µ–ª–∏")
            plans.append("3. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏")
        
        if monthly_savings > 0:
            plans.append(f"4. –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ {monthly_savings:,.0f} ‚ÇΩ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü")
        else:
            plans.append("4. –°–†–û–ß–ù–û: –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã!")
        
        return ft.Column([
            ft.Text(plan, size=12, color=ft.Colors.BLUE) for plan in plans
        ], spacing=5)
    
    def create_savings_strategy(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        goals = self.finance_app.data["goals"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–µ
        rent_paid_until = self.finance_app.data.get("rent_paid_until", "")
        current_date = datetime(2025, datetime.now().month, datetime.now().day)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        def should_pay_rent_current():
            if not rent_paid_until:
                return True
            try:
                paid_until = datetime.strptime(rent_paid_until, "%Y-%m-%d")
                return current_date > paid_until
            except:
                return True
        
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        rent_for_current_month = rent_cost if should_pay_rent_current() else 0
        
        # –†–∞—Å—á–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã –∏ —Ä–µ–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è), —Ç–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        current_day = datetime.now().day
        current_month = datetime.now().month
        current_year = 2025
        current_year = 2025  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 2025 –≥–æ–¥
        days_in_month = 30  # –°–µ–Ω—Ç—è–±—Ä—å
        if current_day >= days_in_month - 1:  # 29-30 —Å–µ–Ω—Ç—è–±—Ä—è
            monthly_savings = 0  # –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ –∫–æ–ø–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        else:
            # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º rent_for_current_month, –¥–ª—è –±—É–¥—É—â–∏—Ö - –≤—Å–µ–≥–¥–∞ rent_cost
            monthly_savings = salary - monthly_expenses - chatgpt_cost - rent_cost
        free_money = current_money - safety_reserve
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –î–†
        months_analysis = {
            1: {"name": "–Ø–Ω–≤–∞—Ä—å", "holiday": "", "cost": 0, "good": True},
            2: {"name": "–§–µ–≤—Ä–∞–ª—å", "holiday": "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "cost": 5000, "good": True},
            3: {"name": "–ú–∞—Ä—Ç", "holiday": "8 –ú–∞—Ä—Ç–∞", "cost": 3000, "good": True},
            4: {"name": "–ê–ø—Ä–µ–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            5: {"name": "–ú–∞–π", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            6: {"name": "–ò—é–Ω—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            7: {"name": "–ò—é–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            8: {"name": "–ê–≤–≥—É—Å—Ç", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            9: {"name": "–°–µ–Ω—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            10: {"name": "–û–∫—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            11: {"name": "–ù–æ—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "good": True},
            12: {"name": "–î–µ–∫–∞–±—Ä—å", "holiday": "–ù–æ–≤—ã–π –≥–æ–¥", "cost": 20000, "good": False}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            if month in months_analysis:
                months_analysis[month]["cost"] += birthday["cost"]
                months_analysis[month]["good"] = months_analysis[month]["cost"] < 5000
        
        good_months = [data["name"] for data in months_analysis.values() if data["good"]]
        bad_months = [data["name"] for data in months_analysis.values() if not data["good"]]
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π –∏ –ª—É—á—à–∏—Ö –¥–Ω–µ–π –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        salary_dates = self.finance_app.data["salary_dates"]
        current_day = datetime.now().day
        current_month = datetime.now().month
        current_year = 2025
        
        def analyze_goals():
            """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª–∏ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
            if not goals:
                return ft.Column([
                    ft.Text("üéØ –£ –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–µ–π!", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.ORANGE),
                    ft.Text("–ë–µ–∑ —Ü–µ–ª–µ–π –∫–æ–ø–∏—Ç—å –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ - –¥–µ–Ω—å–≥–∏ –ø—Ä–æ—Å—Ç–æ –ª–µ–∂–∞—Ç –±–µ–∑ —Ü–µ–ª–∏", size=12, color=ft.Colors.GREY_600),
                    ft.Divider(),
                    ft.Text("üí° –ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Ü–µ–ª–∏:", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text("‚Ä¢ –ü–æ–Ω—è—Ç—å, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü", size=12),
                    ft.Text("‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", size=12),
                    ft.Text("‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏", size=12),
                    ft.Text("‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏", size=12),
                    ft.Divider(),
                    ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE),
                    ft.Text("1. –î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–¶–µ–ª–∏'", size=12),
                    ft.Text("2. –¢–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", size=12),
                    ft.Text("3. –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–∞—Ç—å—Ç–µ —Ä–∞–∑—É–º–Ω–æ", size=12)
                ], spacing=5)
            
            goal_analysis = []
            for goal in goals:
                goal_name = goal["name"]
                goal_amount = goal["amount"]
                goal_saved = goal.get("saved", 0)
                remaining = goal_amount - goal_saved
                
                if remaining <= 0:
                    goal_analysis.append(ft.Text(f"‚úÖ {goal_name} - –í–´–ü–û–õ–ù–ï–ù–ê!", size=12, color=ft.Colors.GREEN))
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å –≤ –º–µ—Å—è—Ü
                months_needed = remaining / max(monthly_savings, 1)
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞—á–∞–ª–∞
                best_month = self.find_best_month_for_goal(months_analysis, current_month)
                best_day = self.find_best_day_for_goal(salary_dates, current_day)
                
                goal_analysis.extend([
                    ft.Text(f"üéØ {goal_name}: {remaining:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"‚Ä¢ –ù—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å: {remaining/months_needed:,.0f} ‚ÇΩ/–º–µ—Å", size=12, color=ft.Colors.BLUE),
                    ft.Text(f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {months_needed:.1f} –º–µ—Å—è—Ü–µ–≤", size=12),
                    ft.Text(f"‚Ä¢ –õ—É—á—à–∏–π –º–µ—Å—è—Ü: {best_month}", size=12, color=ft.Colors.GREEN),
                    ft.Text(f"‚Ä¢ –õ—É—á—à–∏–π –¥–µ–Ω—å: {best_day}", size=12, color=ft.Colors.GREEN),
                    ft.Divider()
                ])
            
            return ft.Column(goal_analysis, spacing=5)
        
        
        def get_best_days_for_saving():
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–µ –¥–Ω–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
            best_days = []
            
            # –ï—Å–ª–∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞, —Ç–æ –∫–æ–ø–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
            if current_day >= days_in_month - 1:
                return ["–ö–æ–ø–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ - –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞"]
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–π, —Ç–æ –∫–æ–ø–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
            if not goals:
                return ["–î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–¶–µ–ª–∏'"]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            current_month_data = months_analysis.get(current_month, {"good": True, "cost": 0})
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Ö–æ—Ä–æ—à–∏–π –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
            if current_month_data["good"]:
                # –ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å —Å –ª—é–±–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
                for salary_day in salary_dates:
                    if current_day <= salary_day:
                        best_days.append(f"{salary_day} —á–∏—Å–ª–æ (—Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π)")
            else:
                # –ü–ª–æ—Ö–æ–π –º–µ—Å—è—Ü - –ª—É—á—à–µ –∫–æ–ø–∏—Ç—å —Å –ø–µ—Ä–≤–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
                if current_day <= salary_dates[0]:
                    best_days.append(f"{salary_dates[0]} —á–∏—Å–ª–æ (–¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)")
                elif current_day <= salary_dates[1]:
                    best_days.append(f"{salary_dates[1]} —á–∏—Å–ª–æ (–ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ó–ü)")
            
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if current_day > salary_dates[1]:
                next_month = current_month + 1 if current_month < 12 else 1
                next_month_data = months_analysis.get(next_month, {"good": True, "cost": 0})
                if next_month_data["good"]:
                    best_days.append("1 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (—Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü)")
                else:
                    best_days.append("1 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (–ø–ª–æ—Ö–æ–π –º–µ—Å—è—Ü)")
            
            # –î–Ω–∏ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏)
            if free_money > 5000:
                best_days.append("–°–µ–≥–æ–¥–Ω—è (–µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏)")
            
            return best_days if best_days else ["–í –ª—é–±–æ–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã"]
        
        best_days = get_best_days_for_saving()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º
        if monthly_savings > 0:
            time_to_reserve = (safety_reserve - free_money) / monthly_savings if free_money < safety_reserve else 0
            recommendation = f"–ú–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å {monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å"
        else:
            time_to_reserve = 999
            recommendation = "–°–†–û–ß–ù–û —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã!"
        
        return ft.Column([
            ft.Text("üéØ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π:", size=16, weight=ft.FontWeight.BOLD),
            analyze_goals(),
            
            ft.Text("üìä –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.GREEN),
            ft.Text(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.RED),
            ft.Text(f"‚Ä¢ ChatGPT Plus: {chatgpt_cost:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.ORANGE),
            ft.Text(f"‚Ä¢ –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞: {rent_cost:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.ORANGE),
            ft.Text(f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d %B %Y')}", size=14, color=ft.Colors.BLUE),
            ft.Text(f"‚Ä¢ –ú–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å: {monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å", size=14, color=ft.Colors.BLUE, weight=ft.FontWeight.BOLD) if monthly_savings > 0 else ft.Text("‚Ä¢ –ö–æ–ø–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ - –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞", size=14, color=ft.Colors.ORANGE),
            ft.Text(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: {free_money:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
            
            ft.Divider(),
            
            ft.Text("üéØ –õ—É—á—à–∏–µ –¥–Ω–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:", size=16, weight=ft.FontWeight.BOLD),
            *[ft.Text(f"‚Ä¢ {day}", size=12, color=ft.Colors.GREEN) for day in best_days],
            
            ft.Divider(),
            
            ft.Text("üìã –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("1. –î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–¶–µ–ª–∏'", size=12),
            ft.Text("2. –ù–∞—á–∏–Ω–∞–π—Ç–µ –∫–æ–ø–∏—Ç—å –≤ –ª—É—á—à–∏–π –¥–µ–Ω—å", size=12),
            ft.Text("3. –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã", size=12),
            ft.Text("4. –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", size=12),
            ft.Text("5. –ü–æ–∫—É–ø–∞–π—Ç–µ –∫—Ä—É–ø–Ω–æ–µ –≤ —Ö–æ—Ä–æ—à–∏–µ –º–µ—Å—è—Ü—ã", size=12)
        ], spacing=10)
    
    def find_best_month_for_goal(self, months_analysis, current_month):
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ —Ü–µ–ª—å"""
        good_months = [data["name"] for data in months_analysis.values() if data["good"]]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ –º–µ—Å—è—Ü—ã, –≤—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π
        if good_months:
            month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", 
                          "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
            current_month_name = month_names[current_month - 1]
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ö–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü
            for i in range(12):
                check_month = (current_month + i - 1) % 12
                month_name = month_names[check_month]
                if month_name in good_months:
                    return month_name
        
        return "–õ—é–±–æ–π –º–µ—Å—è—Ü"
    
    def find_best_day_for_goal(self, salary_dates, current_day):
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –¥–µ–Ω—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ —Ü–µ–ª—å"""
        # –î–Ω–∏ –ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã - –ª—É—á—à–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        for salary_day in salary_dates:
            if current_day <= salary_day:
                return f"{salary_day} —á–∏—Å–ª–æ (–ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã)"
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if current_day > salary_dates[1]:
            return "1 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞"
        
        return "–í –ª—é–±–æ–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã"
    
    def create_critical_warnings(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        monthly_savings = self.finance_app.data["salary"] - self.calculate_average_monthly_expenses() - (3000 if self.finance_app.data["chatgpt_enabled"] else 0) - rent_cost
        
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        if current_money < safety_reserve:
            warnings.append({
                "level": "üî¥ –ö–†–ò–¢–ò–ß–ù–û",
                "message": f"–î–µ–Ω–µ–≥ –º–µ–Ω—å—à–µ —Ä–µ–∑–µ—Ä–≤–∞! {current_money:,.0f} ‚ÇΩ < {safety_reserve:,.0f} ‚ÇΩ",
                "action": "–°–†–û–ß–ù–û –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç!",
                "color": ft.Colors.RED
            })
        
        if monthly_savings < 0:
            warnings.append({
                "level": "üî¥ –ö–†–ò–¢–ò–ß–ù–û", 
                "message": f"–¢—Ä–∞—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ!",
                "action": "–°–†–û–ß–ù–û —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã!",
                "color": ft.Colors.RED
            })
        
        if current_money < safety_reserve * 1.5:
            warnings.append({
                "level": "üü° –í–ù–ò–ú–ê–ù–ò–ï",
                "message": f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥",
                "action": "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Ç—Ä–∞—Ç–∞–º–∏",
                "color": ft.Colors.ORANGE
            })
        
        if not warnings:
            warnings.append({
                "level": "üü¢ –í–°–ï –û–¢–õ–ò–ß–ù–û",
                "message": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è",
                "action": "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "color": ft.Colors.GREEN
            })
        
        return ft.Column([
            ft.Text(warning["level"], size=16, weight=ft.FontWeight.BOLD, color=warning["color"]) for warning in warnings
        ] + [
            ft.Text(warning["message"], size=14) for warning in warnings
        ] + [
            ft.Text(f"–î–µ–π—Å—Ç–≤–∏–µ: {warning['action']}", size=12, color=warning["color"]) for warning in warnings
        ], spacing=10)
    
    def create_expense_analysis(self):
        current_month_expenses = self.get_current_month_expenses()
        avg_monthly_expenses = self.calculate_average_monthly_expenses()
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
        transactions = self.finance_app.data["transactions"]
        current_month = datetime.now().strftime("%Y-%m")
        
        categories = {}
        for transaction in transactions:
            if transaction["type"] == "expense" and transaction["date"].startswith(current_month):
                category = transaction.get("category", "other")
                amount = transaction["amount"]
                categories[category] = categories.get(category, 0) + amount
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        
        return ft.Column([
            ft.Text("üìä –í–∞—à–∏ —Ç—Ä–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {current_month_expenses:,.0f} ‚ÇΩ", size=14, color=ft.Colors.RED),
            ft.Text(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã: {avg_monthly_expenses:,.0f} ‚ÇΩ/–º–µ—Å", size=14),
            
            ft.Divider(),
            
            ft.Text("üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:", size=16, weight=ft.FontWeight.BOLD),
            *[ft.Text(f"‚Ä¢ {self.get_category_name(cat)}: {amount:,.0f} ‚ÇΩ", size=12, color=ft.Colors.BLUE) for cat, amount in sorted_categories[:5]],
            
            ft.Divider(),
            
            ft.Text("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", size=16, weight=ft.FontWeight.BOLD),
            self.get_expense_recommendations(categories, current_month_expenses, avg_monthly_expenses),
            
            ft.Divider(),
            
            ft.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.TextField(
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    on_change=self.update_new_category,
                    expand=True
                ),
                ft.ElevatedButton(
                    "–î–æ–±–∞–≤–∏—Ç—å",
                    on_click=self.add_custom_category,
                    style=ft.ButtonStyle(bgcolor=ft.Colors.BLUE_400)
                )
            ])
        ], spacing=10)
    
    def get_category_name(self, category):
        names = {
            "food": "üçé –ï–¥–∞",
            "restaurants": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã",
            "games": "üéÆ –ò–≥—Ä—ã", 
            "transport": "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "clothing": "üëï –û–¥–µ–∂–¥–∞",
            "electronics": "üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "entertainment": "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "other": "üì¶ –ü—Ä–æ—á–µ–µ"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if "custom_categories" in self.finance_app.data:
            for cat in self.finance_app.data["custom_categories"]:
                if cat["key"] == category:
                    return f"{cat['icon']} {cat['name']}"
        
        return names.get(category, "üì¶ –ü—Ä–æ—á–µ–µ")
    
    def get_expense_recommendations(self, categories, current_expenses, avg_expenses):
        recommendations = []
        
        if current_expenses > avg_expenses * 1.2:
            recommendations.append("‚ö†Ô∏è –¢—Ä–∞—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ!")
        
        if categories.get("games", 0) > 5000:
            recommendations.append("üéÆ –ú–Ω–æ–≥–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –∏–≥—Ä—ã - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç")
        
        if categories.get("restaurants", 0) > 10000:
            recommendations.append("üçΩÔ∏è –ú–Ω–æ–≥–æ —Ç—Ä–∞—Ç–∏—Ç–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö - –≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞")
        
        if categories.get("electronics", 0) > 20000:
            recommendations.append("üì± –ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ - –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ")
        
        if not recommendations:
            recommendations.append("‚úÖ –¢—Ä–∞—Ç—ã –≤ –Ω–æ—Ä–º–µ")
        
        return ft.Column([
            ft.Text(rec, size=12, color=ft.Colors.BLUE) for rec in recommendations
        ], spacing=5)
    
    def create_goals_analysis(self):
        goals = self.finance_app.data["goals"]
        goal_investments = self.finance_app.data["goal_investments"]
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        monthly_savings = self.finance_app.data["salary"] - self.calculate_average_monthly_expenses() - (3000 if self.finance_app.data["chatgpt_enabled"] else 0) - rent_cost
        
        if not goals:
            return ft.Column([
                ft.Text("üéØ –£ –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–µ–π", size=16, weight=ft.FontWeight.BOLD),
                ft.Text("–î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–¶–µ–ª–∏'", size=14, color=ft.Colors.GREY_600)
            ])
        
        goal_analysis = []
        for goal in goals:
            goal_name = goal["name"]
            goal_amount = goal["amount"]
            invested = goal_investments.get(goal_name, 0)
            remaining = goal_amount - invested
            progress = (invested / goal_amount * 100) if goal_amount > 0 else 0
            
            if monthly_savings > 0:
                months_to_goal = remaining / monthly_savings
            else:
                months_to_goal = 999
            
            goal_analysis.append({
                "name": goal_name,
                "amount": goal_amount,
                "invested": invested,
                "remaining": remaining,
                "progress": progress,
                "months": months_to_goal
            })
        
        return ft.Column([
            ft.Text("üéØ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π:", size=16, weight=ft.FontWeight.BOLD),
            *[ft.Column([
                ft.Text(f"‚Ä¢ {goal['name']}: {goal['invested']:,.0f} ‚ÇΩ –∏–∑ {goal['amount']:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {goal['progress']:.1f}%", size=12, color=ft.Colors.BLUE),
                ft.Text(f"  –û—Å—Ç–∞–ª–æ—Å—å: {goal['remaining']:,.0f} ‚ÇΩ", size=12, color=ft.Colors.ORANGE),
                ft.Text(f"  –í—Ä–µ–º—è –¥–æ —Ü–µ–ª–∏: {goal['months']:.1f} –º–µ—Å—è—Ü–µ–≤", size=12, color=ft.Colors.GREEN if goal['months'] < 12 else ft.Colors.RED),
                ft.Divider()
            ]) for goal in goal_analysis]
        ], spacing=10)
    
    def create_detailed_monthly_analysis(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        current_month = datetime.now().month
        months_analysis = self.get_months_analysis()
        goals = self.finance_app.data["goals"]
        goal_investments = self.finance_app.data["goal_investments"]
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        monthly_savings = self.finance_app.data["salary"] - self.calculate_average_monthly_expenses() - (3000 if self.finance_app.data["chatgpt_enabled"] else 0) - rent_cost
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ü–µ–ª–µ–π
        total_goals = sum(goal["amount"] for goal in goals)
        total_invested = sum(goal_investments.values())
        remaining_goals = total_goals - total_invested
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        header = ft.Container(
            content=ft.Row([
                ft.Text("–ú–µ—Å—è—Ü", size=14, weight=ft.FontWeight.BOLD, expand=1),
                ft.Text("–°—Ç–∞—Ç—É—Å", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                ft.Text("–ü—Ä–∞–∑–¥–Ω–∏–∫–∏", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                ft.Text("–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                ft.Text("–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                ft.Text("–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                ft.Text("–õ—É—á—à–∏–π –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                ft.Text("–î–µ—Ç–∞–ª–∏", size=14, weight=ft.FontWeight.BOLD, expand=2, text_align=ft.TextAlign.CENTER)
            ]),
            bgcolor=ft.Colors.BLUE_50,
            padding=12,
            border=ft.border.all(1, ft.Colors.BLUE_200)
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        table_rows = []
        for month_num, data in months_analysis.items():
            month_name = data["name"]
            holiday_cost = data["cost"]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
            birthdays = self.get_birthdays_for_month(month_num)
            birthday_names = [bday["name"] for bday in birthdays]
            birthday_cost = sum(bday["gift_cost"] for bday in birthdays)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            total_extra_costs = holiday_cost + birthday_cost
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
            available_for_savings = max(0, monthly_savings - total_extra_costs)
            
            # –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—è—Ü–∞
            if total_extra_costs == 0:
                status = "–û—Ç–ª–∏—á–Ω—ã–π"
                status_color = ft.Colors.GREEN
                status_icon = "‚úÖ"
                status_reason = "–ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç"
            elif total_extra_costs < monthly_savings * 0.2:
                status = "–•–æ—Ä–æ—à–∏–π"
                status_color = ft.Colors.LIGHT_GREEN
                status_icon = "üëç"
                status_reason = f"–î–æ–ø. —Ç—Ä–∞—Ç—ã: {total_extra_costs:,.0f} ‚ÇΩ"
            elif total_extra_costs < monthly_savings * 0.5:
                status = "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ"
                status_color = ft.Colors.ORANGE
                status_icon = "‚ö†Ô∏è"
                status_reason = f"–ú–Ω–æ–≥–æ –¥–æ–ø. —Ç—Ä–∞—Ç: {total_extra_costs:,.0f} ‚ÇΩ"
            else:
                status = "–û–ø–∞—Å–Ω–æ"
                status_color = ft.Colors.RED
                status_icon = "üö®"
                status_reason = f"–ö—Ä–∏—Ç–∏—á–Ω–æ –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç: {total_extra_costs:,.0f} ‚ÇΩ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö
            holiday_info = "–ù–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"
            if holiday_cost > 0:
                holiday_names = []
                if month_num == 2:
                    holiday_names.append("–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞")
                if month_num == 3:
                    holiday_names.append("8 –ú–∞—Ä—Ç–∞")
                if month_num == 5:
                    holiday_names.append("–î–µ–Ω—å –ü–æ–±–µ–¥—ã")
                if month_num == 6:
                    holiday_names.append("–î–µ–Ω—å –†–æ—Å—Å–∏–∏")
                if month_num == 11:
                    holiday_names.append("–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞")
                if month_num == 12:
                    holiday_names.append("–ù–æ–≤—ã–π –≥–æ–¥")
                holiday_info = f"{', '.join(holiday_names)}\n({holiday_cost:,.0f} ‚ÇΩ)"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
            birthday_info = "–ù–µ—Ç –î–†"
            if birthday_names:
                birthday_info = f"{', '.join(birthday_names)}\n({birthday_cost:,.0f} ‚ÇΩ)"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Å—è—Ü –ª—É—á—à–∏–º –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
            if total_extra_costs == 0:
                best_for_saving = "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π"
                best_color = ft.Colors.GREEN
            elif total_extra_costs < monthly_savings * 0.2:
                best_for_saving = "üëç –•–æ—Ä–æ—à–∏–π"
                best_color = ft.Colors.LIGHT_GREEN
            elif total_extra_costs < monthly_savings * 0.5:
                best_for_saving = "‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ"
                best_color = ft.Colors.ORANGE
            else:
                best_for_saving = "‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ"
                best_color = ft.Colors.RED
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if goals:
                if available_for_savings > 0:
                    months_to_goal = remaining_goals / available_for_savings if available_for_savings > 0 else 999
                    details = f"–ù—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å: {available_for_savings:,.0f} ‚ÇΩ\n–î–æ —Ü–µ–ª–∏: {months_to_goal:.1f} –º–µ—Å\n–°–≤–æ–±–æ–¥–Ω–æ: {monthly_savings - total_extra_costs:,.0f} ‚ÇΩ"
                else:
                    details = f"–ù–µ –∫–æ–ø–∏—Ç–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç\n–î–µ—Ñ–∏—Ü–∏—Ç: {total_extra_costs - monthly_savings:,.0f} ‚ÇΩ"
            else:
                details = f"–ù–µ—Ç —Ü–µ–ª–∏\n–î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n–°–≤–æ–±–æ–¥–Ω–æ: {monthly_savings - total_extra_costs:,.0f} ‚ÇΩ"
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
            row = ft.Container(
                content=ft.Row([
                    ft.Text(month_name, size=12, weight=ft.FontWeight.BOLD, expand=1),
                    ft.Column([
                        ft.Text(f"{status_icon} {status}", size=12, color=status_color, text_align=ft.TextAlign.CENTER),
                        ft.Text(status_reason, size=10, color=ft.Colors.GREY_600, text_align=ft.TextAlign.CENTER)
                    ], expand=1, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                    ft.Text(holiday_info, size=11, color=ft.Colors.PURPLE, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text(birthday_info, size=11, color=ft.Colors.PINK, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text(f"{total_extra_costs:,.0f} ‚ÇΩ", size=12, color=ft.Colors.RED if total_extra_costs > 0 else ft.Colors.GREY, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text(f"{available_for_savings:,.0f} ‚ÇΩ" if goals and available_for_savings > 0 else "–ù–µ—Ç —Ü–µ–ª–∏", 
                           size=12, color=ft.Colors.GREEN if goals and available_for_savings > 0 else ft.Colors.GREY, 
                           expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text(best_for_saving, size=12, color=best_color, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text(details, size=10, color=ft.Colors.BLUE, expand=2, text_align=ft.TextAlign.CENTER)
                ]),
                bgcolor=ft.Colors.WHITE if month_num % 2 == 0 else ft.Colors.GREY_50,
                padding=10,
                border=ft.border.all(0.5, ft.Colors.GREY_300)
            )
            table_rows.append(row)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        summary = ft.Container(
            content=ft.Column([
                ft.Text("üìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ —Ü–µ–ª–µ–π: {total_goals:,.0f} ‚ÇΩ" if goals else "‚Ä¢ –ù–µ—Ç —Ü–µ–ª–µ–π", size=14),
                ft.Text(f"‚Ä¢ –£–∂–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {total_invested:,.0f} ‚ÇΩ" if goals else "", size=14),
                ft.Text(f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å: {remaining_goals:,.0f} ‚ÇΩ" if goals else "", size=14),
                ft.Text(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü", size=14),
                ft.Text(f"‚Ä¢ –í—Ä–µ–º—è –¥–æ –≤—Å–µ—Ö —Ü–µ–ª–µ–π: {remaining_goals / monthly_savings:.1f} –º–µ—Å—è—Ü–µ–≤" if goals and monthly_savings > 0 else "", size=14)
            ], spacing=5),
            bgcolor=ft.Colors.LIGHT_BLUE_50,
            padding=15,
            border=ft.border.all(1, ft.Colors.BLUE_200)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        explanation = ft.Container(
            content=ft.Column([
                ft.Text("üìä –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:", size=14, weight=ft.FontWeight.BOLD),
                ft.Row([
                    ft.Text("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π", size=12, color=ft.Colors.GREEN),
                    ft.Text("- –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç", size=11, color=ft.Colors.GREY_600)
                ], spacing=5),
                ft.Row([
                    ft.Text("üëç –•–æ—Ä–æ—à–∏–π", size=12, color=ft.Colors.LIGHT_GREEN),
                    ft.Text("- –º–∞–ª–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç (<20%)", size=11, color=ft.Colors.GREY_600)
                ], spacing=5),
                ft.Row([
                    ft.Text("‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ", size=12, color=ft.Colors.ORANGE),
                    ft.Text("- —É–º–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã (20-50%)", size=11, color=ft.Colors.GREY_600)
                ], spacing=5),
                ft.Row([
                    ft.Text("‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ", size=12, color=ft.Colors.RED),
                    ft.Text("- –º–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç (>50%)", size=11, color=ft.Colors.GREY_600)
                ], spacing=5)
            ], spacing=3),
            padding=15,
            bgcolor=ft.Colors.BLUE_50,
            border=ft.border.all(1, ft.Colors.BLUE_200)
        )
        
        return ft.Column([
            header,
            *table_rows,
            ft.Divider(),
            summary,
            ft.Divider(),
            explanation
        ], spacing=0)
    
    def create_action_plan(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        rent_cost = self.finance_app.data.get("rent_cost", 25000)
        monthly_savings = self.finance_app.data["salary"] - self.calculate_average_monthly_expenses() - (3000 if self.finance_app.data["chatgpt_enabled"] else 0) - rent_cost
        
        actions = []
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if current_money < safety_reserve:
            actions.append("üî¥ –°–†–û–ß–ù–û: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –¥–æ 20,000 ‚ÇΩ")
        elif current_money < safety_reserve * 1.5:
            actions.append("üü° –í–ê–ñ–ù–û: –ö–æ–ø–∏—Ç–µ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞")
        else:
            actions.append("üü¢ –û–¢–õ–ò–ß–ù–û: –†–µ–∑–µ—Ä–≤ –≤ –ø–æ—Ä—è–¥–∫–µ")
        
        if monthly_savings < 0:
            actions.append("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã!")
        elif monthly_savings < 5000:
            actions.append("üü° –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π")
        else:
            actions.append("üü¢ –•–û–†–û–®–û: –ú–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å")
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions.append("üìÖ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å")
        actions.append("üí∞ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û: –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
        actions.append("üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–∞—Ç—ã")
        
        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions.append("üéØ –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û: –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ü–µ–ª–∏")
        actions.append("üìà –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏")
        
        return ft.Column([
            ft.Text("üìã –í–∞—à –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:", size=16, weight=ft.FontWeight.BOLD),
            *[ft.Text(action, size=12, color=ft.Colors.BLUE) for action in actions]
        ], spacing=8)
    
    def get_next_salary_date(self):
        today = datetime.now()
        current_day = today.day
        salary_dates = self.finance_app.data["salary_dates"]
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã
        for salary_day in sorted(salary_dates):
            if current_day <= salary_day:
                return today.replace(day=salary_day)
        
        # –ï—Å–ª–∏ –≤—Å–µ –¥–∞—Ç—ã –ø—Ä–æ—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        next_month = today.replace(month=today.month + 1, day=1) if today.month < 12 else today.replace(year=today.year + 1, month=1, day=1)
        return next_month.replace(day=min(salary_dates))
    
    def calculate_daily_budget(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∞"""
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        free_money = current_money - safety_reserve
        
        salary_date = self.finance_app.data["salary_dates"][0]
        days_until_salary = self.calculate_days_until_salary(salary_date)
        
        if days_until_salary <= 0 or free_money <= 0:
            return 0
        
        if free_money < 1000:
            return free_money / days_until_salary
        
        available_for_daily = max(0, free_money - 2000)
        return available_for_daily / days_until_salary
    
    def update_salary(self, e):
        try:
            self.finance_app.data["salary"] = float(e.control.value)
            self.finance_app.save_data()
            # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ–æ–∫—É—Å
        except ValueError:
            pass
    
    def update_current_money(self, e):
        try:
            self.finance_app.data["current_money"] = float(e.control.value)
            self.finance_app.save_data()
            # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ–æ–∫—É—Å
        except ValueError:
            pass
    
    def update_salary_date_1(self, e):
        try:
            date = int(e.control.value)
            if 1 <= date <= 31:
                self.finance_app.data["salary_dates"][0] = date
                self.finance_app.save_data()
        except ValueError:
            pass
    
    def update_salary_date_2(self, e):
        try:
            date = int(e.control.value)
            if 1 <= date <= 31:
                self.finance_app.data["salary_dates"][1] = date
                self.finance_app.save_data()
        except ValueError:
            pass
    
    def update_money_values(self, e):
        self.finance_app.save_data()
        self.page.update()
    
    def update_rent(self, e):
        try:
            self.finance_app.data["rent"] = float(e.control.value)
            self.finance_app.save_data()
        except ValueError:
            pass
    
    def update_rent_cost(self, e):
        try:
            self.finance_app.data["rent_cost"] = float(e.control.value)
            self.finance_app.save_data()
            # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ–æ–∫—É—Å
        except ValueError:
            pass
    
    def update_rent_paid_until(self, e):
        self.finance_app.data["rent_paid_until"] = e.control.value
        self.finance_app.save_data()
        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ–æ–∫—É—Å
    
    def update_safety_reserve(self, e):
        try:
            self.finance_app.data["safety_reserve"] = float(e.control.value)
            self.finance_app.save_data()
            self.refresh_all_pages()
        except ValueError:
            pass
    
    def toggle_chatgpt(self, e):
        self.finance_app.data["chatgpt_enabled"] = e.control.value
        self.finance_app.save_data()
        self.refresh_all_pages()
    
    def create_birthdays_management(self):
        birthdays = self.finance_app.data["birthdays"]
        salary = self.finance_app.data["salary"]
        
        # –ü–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –î–†
        self.birthday_name = ft.TextField(label="–ò–º—è", width=150)
        self.birthday_month = ft.Dropdown(
            label="–ú–µ—Å—è—Ü",
            width=100,
            options=[
                ft.dropdown.Option("–Ø–Ω–≤–∞—Ä—å", "1"), ft.dropdown.Option("–§–µ–≤—Ä–∞–ª—å", "2"),
                ft.dropdown.Option("–ú–∞—Ä—Ç", "3"), ft.dropdown.Option("–ê–ø—Ä–µ–ª—å", "4"),
                ft.dropdown.Option("–ú–∞–π", "5"), ft.dropdown.Option("–ò—é–Ω—å", "6"),
                ft.dropdown.Option("–ò—é–ª—å", "7"), ft.dropdown.Option("–ê–≤–≥—É—Å—Ç", "8"),
                ft.dropdown.Option("–°–µ–Ω—Ç—è–±—Ä—å", "9"), ft.dropdown.Option("–û–∫—Ç—è–±—Ä—å", "10"),
                ft.dropdown.Option("–ù–æ—è–±—Ä—å", "11"), ft.dropdown.Option("–î–µ–∫–∞–±—Ä—å", "12")
            ]
        )
        self.birthday_relationship = ft.Dropdown(
            label="–ö—Ç–æ —ç—Ç–æ",
            width=120,
            options=[
                ft.dropdown.Option("–î–µ–≤—É—à–∫–∞", "–î–µ–≤—É—à–∫–∞"),
                ft.dropdown.Option("–ú–∞–º–∞", "–ú–∞–º–∞"),
                ft.dropdown.Option("–ü–∞–ø–∞", "–ü–∞–ø–∞"),
                ft.dropdown.Option("–ë–∞–±—É—à–∫–∞", "–ë–∞–±—É—à–∫–∞"),
                ft.dropdown.Option("–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞", "–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞"),
                ft.dropdown.Option("–î—Ä—É–≥", "–î—Ä—É–≥"),
                ft.dropdown.Option("–ö–æ–ª–ª–µ–≥–∞", "–ö–æ–ª–ª–µ–≥–∞"),
                ft.dropdown.Option("–î—Ä—É–≥–æ–µ", "–î—Ä—É–≥–æ–µ")
            ]
        )
        
        # –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —Å —É—á–µ—Ç–æ–º –º–µ—Å—è—Ü–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
        def calculate_gift_cost(relationship, month):
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –¥–æ—Ö–æ–¥–∞
            base_percentages = {
                "–î–µ–≤—É—à–∫–∞": 0.12,  # 12% - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π —á–µ–ª–æ–≤–µ–∫
                "–ú–∞–º–∞": 0.08,     # 8% - —Ä–æ–¥–∏—Ç–µ–ª–∏ –≤–∞–∂–Ω—ã
                "–ü–∞–ø–∞": 0.08,     # 8% - —Ä–æ–¥–∏—Ç–µ–ª–∏ –≤–∞–∂–Ω—ã
                "–ë–∞–±—É—à–∫–∞": 0.07,  # 7% - –±–∞–±—É—à–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞
                "–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞": 0.06,  # 6% - —Å–µ–º—å—è
                "–î—Ä—É–≥": 0.04,     # 4% - –¥—Ä—É–∑—å—è
                "–ö–æ–ª–ª–µ–≥–∞": 0.02,  # 2% - –∫–æ–ª–ª–µ–≥–∏
                "–î—Ä—É–≥–æ–µ": 0.03    # 3% - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º (—Å–µ–∑–æ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –≤–∞–∂–Ω–æ—Å—Ç—å)
            month_multipliers = {
                1: 1.2,   # –Ø–Ω–≤–∞—Ä—å - –ø–æ—Å–ª–µ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞, –¥–æ—Ä–æ–≥–æ
                2: 1.1,   # –§–µ–≤—Ä–∞–ª—å - –î–µ–Ω—å –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö, –¥–æ—Ä–æ–≥–æ
                3: 1.0,   # –ú–∞—Ä—Ç - 8 –º–∞—Ä—Ç–∞, –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                4: 0.9,   # –ê–ø—Ä–µ–ª—å - –≤–µ—Å–Ω–∞, –¥–µ—à–µ–≤–ª–µ
                5: 0.9,   # –ú–∞–π - –≤–µ—Å–Ω–∞, –¥–µ—à–µ–≤–ª–µ
                6: 0.8,   # –ò—é–Ω—å - –ª–µ—Ç–æ, –¥–µ—à–µ–≤–ª–µ
                7: 0.8,   # –ò—é–ª—å - –ª–µ—Ç–æ, –¥–µ—à–µ–≤–ª–µ
                8: 0.8,   # –ê–≤–≥—É—Å—Ç - –ª–µ—Ç–æ, –¥–µ—à–µ–≤–ª–µ
                9: 0.9,   # –°–µ–Ω—Ç—è–±—Ä—å - –æ—Å–µ–Ω—å, –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                10: 1.0,  # –û–∫—Ç—è–±—Ä—å - –æ—Å–µ–Ω—å, –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                11: 1.1,  # –ù–æ—è–±—Ä—å - –ø–µ—Ä–µ–¥ –ù–æ–≤—ã–º –≥–æ–¥–æ–º, –¥–æ—Ä–æ–∂–µ
                12: 1.3   # –î–µ–∫–∞–±—Ä—å - –ù–æ–≤—ã–π –≥–æ–¥, —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π
            }
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_money = self.finance_app.data["current_money"]
            monthly_expenses = self.calculate_average_monthly_expenses()
            safety_reserve = self.finance_app.data["safety_reserve"]
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (—á–µ–º –ª—É—á—à–µ –¥–µ–ª–∞, —Ç–µ–º –¥–æ—Ä–æ–∂–µ –ø–æ–¥–∞—Ä–æ–∫)
            if current_money > safety_reserve * 2:
                financial_multiplier = 1.2  # –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            elif current_money > safety_reserve * 1.5:
                financial_multiplier = 1.1  # –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            elif current_money > safety_reserve:
                financial_multiplier = 1.0  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                financial_multiplier = 0.8  # –ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            base_percent = base_percentages.get(relationship, 0.03)
            month_mult = month_multipliers.get(month, 1.0)
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–µ—à–µ–≤–æ)
            min_costs = {
                "–î–µ–≤—É—à–∫–∞": 2000,
                "–ú–∞–º–∞": 1500,
                "–ü–∞–ø–∞": 1500,
                "–ë–∞–±—É—à–∫–∞": 1200,
                "–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞": 1000,
                "–î—Ä—É–≥": 500,
                "–ö–æ–ª–ª–µ–≥–∞": 300,
                "–î—Ä—É–≥–æ–µ": 500
            }
            
            calculated_cost = int(salary * base_percent * month_mult * financial_multiplier)
            min_cost = min_costs.get(relationship, 500)
            
            return max(calculated_cost, min_cost)
        
        self.birthday_cost_display = ft.Text("", size=14, color=ft.Colors.BLUE)
        
        def update_cost_display(e):
            relationship = self.birthday_relationship.value
            month = self.birthday_month.value
            if relationship and month:
                month_int = self.convert_month_to_int(month)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                cost = calculate_gift_cost(relationship, month_int)
                month_name = ['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                             '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'][month_int]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–∞
                if cost >= 5000:
                    quality = "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–∞—Ä–æ–∫"
                elif cost >= 3000:
                    quality = "‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
                elif cost >= 1500:
                    quality = "üéÅ –•–æ—Ä–æ—à–∏–π –ø–æ–¥–∞—Ä–æ–∫"
                else:
                    quality = "üéÄ –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥–∞—Ä–æ–∫"
                
                self.birthday_cost_display.value = f"üí∞ {month_name}: {cost:,.0f} ‚ÇΩ ({quality})"
                self.page.update()
        
        self.birthday_relationship.on_change = update_cost_display
        self.birthday_month.on_change = update_cost_display
        
        return ft.Column([
            ft.Text("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", size=14, weight=ft.FontWeight.BOLD),
            ft.Row([
                self.birthday_name,
                self.birthday_month,
                self.birthday_relationship,
                ft.ElevatedButton("–î–æ–±–∞–≤–∏—Ç—å", on_click=self.add_birthday)
            ], spacing=10),
            
            self.birthday_cost_display,
            
            ft.Divider(),
            
            ft.Text("–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:", size=14, weight=ft.FontWeight.BOLD),
                *[ft.Row([
                    ft.Text(f"üéÇ {birthday['name']} - {['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'][self.convert_month_to_int(birthday['month'])]} - {birthday['cost']:,.0f} ‚ÇΩ", size=12),
                    ft.IconButton(ft.Icons.DELETE, on_click=lambda e, idx=i: self.delete_birthday(idx))
                ]) for i, birthday in enumerate(birthdays)],
            
            ft.Divider(),
            
                ft.Text("üí° –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤:", size=14, weight=ft.FontWeight.BOLD),
                ft.Text("‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Å—è—Ü (–∑–∏–º–∞ –¥–æ—Ä–æ–∂–µ, –ª–µ—Ç–æ –¥–µ—à–µ–≤–ª–µ)", size=12),
                ft.Text("‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", size=12),
                ft.Text("‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤", size=12),
                ft.Text("‚Ä¢ –î–µ–≤—É—à–∫–∞: –æ—Ç 2,000 ‚ÇΩ (12% –æ—Ç –¥–æ—Ö–æ–¥–∞)", size=12),
                ft.Text("‚Ä¢ –†–æ–¥–∏—Ç–µ–ª–∏: –æ—Ç 1,500 ‚ÇΩ (8% –æ—Ç –¥–æ—Ö–æ–¥–∞)", size=12),
                ft.Text("‚Ä¢ –ë–∞–±—É—à–∫–∞: –æ—Ç 1,200 ‚ÇΩ (7% –æ—Ç –¥–æ—Ö–æ–¥–∞)", size=12),
                ft.Text("‚Ä¢ –°–µ–º—å—è: –æ—Ç 1,000 ‚ÇΩ (6% –æ—Ç –¥–æ—Ö–æ–¥–∞)", size=12),
                ft.Text("‚Ä¢ –î—Ä—É–∑—å—è: –æ—Ç 500 ‚ÇΩ (4% –æ—Ç –¥–æ—Ö–æ–¥–∞)", size=12),
                ft.Text("‚Ä¢ –ö–æ–ª–ª–µ–≥–∏: –æ—Ç 300 ‚ÇΩ (2% –æ—Ç –¥–æ—Ö–æ–¥–∞)", size=12),
            
                ft.Text("üí° –°–æ–≤–µ—Ç: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑—É–º–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞", size=10, color=ft.Colors.GREY_600),
                
                ft.Divider(),
                
                ft.Text("üìä –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç:", size=14, weight=ft.FontWeight.BOLD),
                ft.Text("‚Ä¢ –ë–∞–∑–æ–≤—ã–π % –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è)", size=11),
                ft.Text("‚Ä¢ √ó –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–µ—Å—è—Ü–∞ (–∑–∏–º–∞ +30%, –ª–µ—Ç–æ -20%)", size=11),
                ft.Text("‚Ä¢ √ó –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ—Ç 0.8 –¥–æ 1.2)", size=11),
                ft.Text("‚Ä¢ = –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞)", size=11),
                
                ft.Text("üéØ –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã 50,000 ‚ÇΩ:", size=12, weight=ft.FontWeight.BOLD),
                ft.Text("‚Ä¢ –î–µ–≤—É—à–∫–∞ –≤ –¥–µ–∫–∞–±—Ä–µ: 7,800 ‚ÇΩ (–ø—Ä–µ–º–∏—É–º)", size=11),
                ft.Text("‚Ä¢ –î–µ–≤—É—à–∫–∞ –≤ –∏—é–ª–µ: 4,800 ‚ÇΩ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)", size=11),
                ft.Text("‚Ä¢ –ë–∞–±—É—à–∫–∞ –≤ –¥–µ–∫–∞–±—Ä–µ: 4,550 ‚ÇΩ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)", size=11),
                ft.Text("‚Ä¢ –ë–∞–±—É—à–∫–∞ –≤ –∏—é–ª–µ: 2,800 ‚ÇΩ (—Ö–æ—Ä–æ—à–∏–π)", size=11),
                ft.Text("‚Ä¢ –î—Ä—É–≥ –≤ –¥–µ–∫–∞–±—Ä–µ: 2,600 ‚ÇΩ (—Ö–æ—Ä–æ—à–∏–π)", size=11),
                ft.Text("‚Ä¢ –î—Ä—É–≥ –≤ –∏—é–ª–µ: 1,600 ‚ÇΩ (—Ö–æ—Ä–æ—à–∏–π)", size=11)
        ], spacing=10)
    
    def add_birthday(self, e):
        name = self.birthday_name.value
        month = self.birthday_month.value
        relationship = self.birthday_relationship.value
        
        if name and month and relationship:
            # –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —Å —É—á–µ—Ç–æ–º –º–µ—Å—è—Ü–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
            salary = self.finance_app.data["salary"]
            month = self.convert_month_to_int(month)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –¥–æ—Ö–æ–¥–∞
            base_percentages = {
                "–î–µ–≤—É—à–∫–∞": 0.12,  # 12% - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π —á–µ–ª–æ–≤–µ–∫
                "–ú–∞–º–∞": 0.08,     # 8% - —Ä–æ–¥–∏—Ç–µ–ª–∏ –≤–∞–∂–Ω—ã
                "–ü–∞–ø–∞": 0.08,     # 8% - —Ä–æ–¥–∏—Ç–µ–ª–∏ –≤–∞–∂–Ω—ã
                "–ë–∞–±—É—à–∫–∞": 0.07,  # 7% - –±–∞–±—É—à–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞
                "–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞": 0.06,  # 6% - —Å–µ–º—å—è
                "–î—Ä—É–≥": 0.04,     # 4% - –¥—Ä—É–∑—å—è
                "–ö–æ–ª–ª–µ–≥–∞": 0.02,  # 2% - –∫–æ–ª–ª–µ–≥–∏
                "–î—Ä—É–≥–æ–µ": 0.03    # 3% - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º
            month_multipliers = {
                1: 1.2,   # –Ø–Ω–≤–∞—Ä—å - –ø–æ—Å–ª–µ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞, –¥–æ—Ä–æ–≥–æ
                2: 1.1,   # –§–µ–≤—Ä–∞–ª—å - –î–µ–Ω—å –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö, –¥–æ—Ä–æ–≥–æ
                3: 1.0,   # –ú–∞—Ä—Ç - 8 –º–∞—Ä—Ç–∞, –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                4: 0.9,   # –ê–ø—Ä–µ–ª—å - –≤–µ—Å–Ω–∞, –¥–µ—à–µ–≤–ª–µ
                5: 0.9,   # –ú–∞–π - –≤–µ—Å–Ω–∞, –¥–µ—à–µ–≤–ª–µ
                6: 0.8,   # –ò—é–Ω—å - –ª–µ—Ç–æ, –¥–µ—à–µ–≤–ª–µ
                7: 0.8,   # –ò—é–ª—å - –ª–µ—Ç–æ, –¥–µ—à–µ–≤–ª–µ
                8: 0.8,   # –ê–≤–≥—É—Å—Ç - –ª–µ—Ç–æ, –¥–µ—à–µ–≤–ª–µ
                9: 0.9,   # –°–µ–Ω—Ç—è–±—Ä—å - –æ—Å–µ–Ω—å, –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                10: 1.0,  # –û–∫—Ç—è–±—Ä—å - –æ—Å–µ–Ω—å, –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                11: 1.1,  # –ù–æ—è–±—Ä—å - –ø–µ—Ä–µ–¥ –ù–æ–≤—ã–º –≥–æ–¥–æ–º, –¥–æ—Ä–æ–∂–µ
                12: 1.3   # –î–µ–∫–∞–±—Ä—å - –ù–æ–≤—ã–π –≥–æ–¥, —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π
            }
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_money = self.finance_app.data["current_money"]
            safety_reserve = self.finance_app.data["safety_reserve"]
            
            if current_money > safety_reserve * 2:
                financial_multiplier = 1.2  # –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            elif current_money > safety_reserve * 1.5:
                financial_multiplier = 1.1  # –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            elif current_money > safety_reserve:
                financial_multiplier = 1.0  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                financial_multiplier = 0.8  # –ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞
            min_costs = {
                "–î–µ–≤—É—à–∫–∞": 2000,
                "–ú–∞–º–∞": 1500,
                "–ü–∞–ø–∞": 1500,
                "–ë–∞–±—É—à–∫–∞": 1200,
                "–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞": 1000,
                "–î—Ä—É–≥": 500,
                "–ö–æ–ª–ª–µ–≥–∞": 300,
                "–î—Ä—É–≥–æ–µ": 500
            }
            
            base_percent = base_percentages.get(relationship, 0.03)
            month_mult = month_multipliers.get(month, 1.0)
            calculated_cost = int(salary * base_percent * month_mult * financial_multiplier)
            min_cost = min_costs.get(relationship, 500)
            
            cost = max(calculated_cost, min_cost)
            
            birthday = {
                "name": name,
                "month": month,
                "relationship": relationship,
                "cost": cost
            }
            self.finance_app.data["birthdays"].append(birthday)
            self.finance_app.save_data()
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            self.birthday_name.value = ""
            self.birthday_month.value = None
            self.birthday_relationship.value = None
            self.birthday_cost_display.value = ""
            
            self.refresh_all_pages()
    
    def delete_birthday(self, idx):
        if 0 <= idx < len(self.finance_app.data["birthdays"]):
            del self.finance_app.data["birthdays"][idx]
            self.finance_app.save_data()
            self.refresh_all_pages()
    
    def create_reserve_status(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        
        if current_money >= safety_reserve:
            status_text = f"‚úÖ –†–µ–∑–µ—Ä–≤ –æ–±–µ—Å–ø–µ—á–µ–Ω: {current_money:,.0f} ‚ÇΩ –∏–∑ {safety_reserve:,.0f} ‚ÇΩ"
            status_color = ft.Colors.GREEN
        else:
            deficit = safety_reserve - current_money
            status_text = f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫: {deficit:,.0f} ‚ÇΩ (–Ω—É–∂–Ω–æ {safety_reserve:,.0f} ‚ÇΩ)"
            status_color = ft.Colors.RED
        
        return ft.Text(status_text, size=14, color=status_color, weight=ft.FontWeight.BOLD)
    
    def pay_rent(self, e):
        rent_amount = self.finance_app.data["rent"]
        current_money = self.finance_app.data["current_money"]
        
        if rent_amount <= 0:
            return
        
        if rent_amount > current_money:
            self.show_rent_error_dialog("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã")
            return
        
        # –û–ø–ª–∞—á–∏–≤–∞–µ–º –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É
        self.finance_app.data["current_money"] -= rent_amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        today = datetime.date.today()
        if today.month == 12:
            next_month = today.replace(year=today.year + 1, month=1, day=1)
        else:
            next_month = today.replace(month=today.month + 1, day=1)
        
        self.finance_app.data["rent_paid_until"] = next_month.strftime("%Y-%m-%d")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = {
            "type": "expense",
            "amount": rent_amount,
            "description": "–û–ø–ª–∞—Ç–∞ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã",
            "date": datetime.now().strftime("%Y-%m-%d %H:%M")
        }
        
        self.finance_app.data["transactions"].append(transaction)
        self.finance_app.save_data()
        self.page.update()
    
    def reset_rent(self, e):
        print("–ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã –Ω–∞–∂–∞—Ç–∞")
        self.finance_app.data["rent"] = 0
        self.finance_app.data["rent_paid_until"] = None
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–æ–π
        self.finance_app.data["transactions"] = [
            transaction for transaction in self.finance_app.data["transactions"]
            if "–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç" not in transaction["description"].lower()
        ]
        
        self.finance_app.save_data()
        self.page.update()
        print("–ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def show_rent_error_dialog(self, message):
        dialog = ft.AlertDialog(
            title=ft.Text("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã"),
            content=ft.Text(message),
            actions=[ft.TextButton("OK", on_click=self.close_dialog)]
        )
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def create_rent_status(self):
        rent = self.finance_app.data["rent"]
        rent_paid_until = self.finance_app.data["rent_paid_until"]
        
        if not rent_paid_until or rent <= 0:
            return ft.Text("–ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", size=12, color=ft.Colors.GREY_600)
        
        try:
            paid_until_date = datetime.strptime(rent_paid_until, "%Y-%m-%d").date()
            today = datetime.date.today()
            
            if paid_until_date > today:
                days_remaining = (paid_until_date - today).days
                return ft.Column([
                    ft.Text(f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {rent_paid_until}", size=12, color=ft.Colors.GREEN),
                    ft.Text(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_remaining}", size=12, color=ft.Colors.GREEN)
                ])
            else:
                days_overdue = (today - paid_until_date).days
                return ft.Column([
                    ft.Text(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ —Å: {rent_paid_until}", size=12, color=ft.Colors.ORANGE),
                    ft.Text(f"–î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {days_overdue}", size=12, color=ft.Colors.RED)
                ])
        except:
            return ft.Text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", size=12, color=ft.Colors.RED)
    
    def check_rent_due(self):
        rent_paid_until = self.finance_app.data["rent_paid_until"]
        if not rent_paid_until:
            return False
        
        try:
            paid_until_date = datetime.strptime(rent_paid_until, "%Y-%m-%d").date()
            today = datetime.date.today()
            return today >= paid_until_date
        except:
            return False
    
    def create_transactions_list(self):
        transactions = self.finance_app.data["transactions"]
        
        if not transactions:
            return ft.Text("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        transaction_widgets = []
        for transaction in reversed(transactions[-10:]):
            if transaction["type"] == "income":
                color = ft.Colors.GREEN
                icon = ft.Icons.ADD
            elif transaction["type"] == "goal_investment":
                color = ft.Colors.BLUE
                icon = ft.Icons.SAVINGS
            else:
                color = ft.Colors.RED
                icon = ft.Icons.REMOVE
            
            transaction_widgets.append(
                ft.ListTile(
                    leading=ft.Icon(icon, color=color),
                    title=ft.Text(transaction["description"]),
                    subtitle=ft.Text(transaction["date"]),
                    trailing=ft.Text(f"{transaction['amount']:,.0f} ‚ÇΩ", color=color, weight=ft.FontWeight.BOLD)
                )
            )
        
        return ft.Column(transaction_widgets)
    
    def create_goals_list(self):
        goals = self.finance_app.data["goals"]
        
        if not goals:
            return ft.Text("–ù–µ—Ç —Ü–µ–ª–µ–π")
        
        goal_widgets = []
        for goal in goals:
            progress = self.calculate_goal_progress(goal)
            goal_name = goal["name"]
            invested_amount = self.finance_app.data["goal_investments"].get(goal_name, 0)
            
            try:
                goal_date = datetime.strptime(goal["date"], "%Y-%m-%d").date()
                today = datetime.date.today()
                days_left = (goal_date - today).days
                
                salary = self.finance_app.data["salary"]
                monthly_income = salary
                
                remaining_amount = goal["amount"] - invested_amount
                monthly_savings_needed = remaining_amount / max(days_left / 30, 1)
                
                progress_text = f"–í–ª–æ–∂–µ–Ω–æ: {invested_amount:,.0f} ‚ÇΩ –∏–∑ {goal['amount']:,.0f} ‚ÇΩ ({progress*100:.1f}%)"
                if days_left > 0:
                    progress_text += f" | –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π"
                    if monthly_savings_needed > 0:
                        progress_text += f" | –ù—É–∂–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å: {monthly_savings_needed:,.0f} ‚ÇΩ/–º–µ—Å"
                
            except:
                progress_text = f"–í–ª–æ–∂–µ–Ω–æ: {invested_amount:,.0f} ‚ÇΩ –∏–∑ {goal['amount']:,.0f} ‚ÇΩ ({progress*100:.1f}%)"
            
            goal_widgets.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Row([
                                ft.Column([
                                    ft.Text(goal["name"], size=16, weight=ft.FontWeight.BOLD),
                                    ft.Text(f"–¶–µ–ª—å: {goal['amount']:,.0f} ‚ÇΩ"),
                                    ft.Text(f"–î–æ {goal['date']}"),
                                ], expand=True),
                                ft.Row([
                                    ft.ElevatedButton(
                                        "–î–æ–±–∞–≤–∏—Ç—å –≤ —Ü–µ–ª—å",
                                        on_click=lambda e, goal_name=goal["name"]: self.show_add_to_goal_dialog(goal_name),
                                        style=ft.ButtonStyle(bgcolor=ft.Colors.BLUE_400)
                                    ),
                                    ft.ElevatedButton(
                                        "üóëÔ∏è",
                                        on_click=lambda e, goal_name=goal["name"]: self.delete_goal(goal_name),
                                        tooltip="–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å",
                                        style=ft.ButtonStyle(bgcolor=ft.Colors.RED_400, color=ft.Colors.WHITE)
                                    )
                                ], spacing=5)
                            ]),
                            ft.ProgressBar(value=progress, width=300),
                            ft.Text(progress_text, size=12)
                        ], spacing=5),
                        padding=15
                    )
                )
            )
        
        return ft.Column(goal_widgets)
    
    def delete_goal(self, goal_name):
        """–£–¥–∞–ª—è–µ—Ç —Ü–µ–ª—å –ø–æ –∏–º–µ–Ω–∏"""
        print(f"DEBUG: –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å '{goal_name}'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        self.page.snack_bar = ft.SnackBar(
            content=ft.Text(f"–¶–µ–ª—å '{goal_name}' —É–¥–∞–ª–µ–Ω–∞"),
            bgcolor=ft.Colors.RED_400
        )
        self.page.snack_bar.open = True
        
        goals = self.finance_app.data["goals"]
        self.finance_app.data["goals"] = [goal for goal in goals if goal["name"] != goal_name]
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —ç—Ç—É —Ü–µ–ª—å
        if goal_name in self.finance_app.data["goal_investments"]:
            del self.finance_app.data["goal_investments"][goal_name]
        
        self.finance_app.save_data()
        self.refresh_all_pages()
        self.page.update()
        print(f"DEBUG: –¶–µ–ª—å '{goal_name}' —É–¥–∞–ª–µ–Ω–∞")
    
    def show_delete_goal_dialog(self, goal_name):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏"""
        print(f"DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–∏ '{goal_name}'")
        def confirm_delete(e):
            print(f"DEBUG: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ '{goal_name}'")
            self.delete_goal(goal_name)
            self.page.dialog.open = False
            self.page.update()
        
        def cancel_delete(e):
            print(f"DEBUG: –û—Ç–º–µ–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ '{goal_name}'")
            self.page.dialog.open = False
            self.page.update()
        
        dialog = ft.AlertDialog(
            title=ft.Text("–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å?"),
            content=ft.Text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å '{goal_name}'? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=cancel_delete),
                ft.TextButton("–£–¥–∞–ª–∏—Ç—å", on_click=confirm_delete, style=ft.ButtonStyle(color=ft.Colors.RED))
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def calculate_goal_progress(self, goal):
        try:
            goal_name = goal["name"]
            invested_amount = self.finance_app.data["goal_investments"].get(goal_name, 0)
            
            goal_date = datetime.strptime(goal["date"], "%Y-%m-%d").date()
            today = datetime.date.today()
            
            if goal_date <= today:
                return 1.0 if invested_amount >= goal["amount"] else invested_amount / goal["amount"]
            
            days_total = (goal_date - today).days
            
            salary = self.finance_app.data["salary"]
            monthly_income = salary
            
            remaining_amount = goal["amount"] - invested_amount
            monthly_savings_needed = remaining_amount / max(days_total / 30, 1)
            
            if monthly_savings_needed <= monthly_income * 0.3:
                total_available = invested_amount + (monthly_income * 0.3 * (days_total / 30))
            else:
                total_available = invested_amount + (monthly_income * (days_total / 30))
            
            progress = min(total_available / goal["amount"], 1.0)
            return max(0.0, progress)
        except:
            return 0.0
    
    def create_smart_forecast(self):
        salary = self.finance_app.data["salary"]
        current_money = self.finance_app.data["current_money"]
        goals = self.finance_app.data["goals"]
        goal_investments = self.finance_app.data["goal_investments"]
        rent = self.finance_app.data["rent"]
        
        monthly_income = salary
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É
        rent_due = self.check_rent_due()
        rent_to_pay = rent if rent_due else 0
        
        # –†–∞—Å—á–µ—Ç —Ä–µ–∑–µ—Ä–≤–∞ (—Å —É—á–µ—Ç–æ–º –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã)
        emergency_fund = (monthly_income - rent) * 6
        current_emergency = current_money - sum(goal_investments.values()) - rent_to_pay
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π
        total_goal_amount = sum(goal["amount"] for goal in goals)
        total_invested = sum(goal_investments.values())
        remaining_goals = total_goal_amount - total_invested
        
        # –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.calculate_smart_recommendations(
            monthly_income, current_money, goals, goal_investments, emergency_fund
        )
        
        forecast_widgets = [
            ft.Text("üß† –£–º–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑", size=18, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∞ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", size=16, weight=ft.FontWeight.BOLD),
                        ft.Text(f"‚Ä¢ –î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: {monthly_income:,.0f} ‚ÇΩ"),
                        ft.Text(f"‚Ä¢ –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞: {rent:,.0f} ‚ÇΩ/–º–µ—Å"),
                        ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ"),
                        ft.Text(f"‚Ä¢ –í —Ä–µ–∑–µ—Ä–≤–µ: {current_emergency:,.0f} ‚ÇΩ"),
                        ft.Text(f"‚Ä¢ –í —Ü–µ–ª—è—Ö: {total_invested:,.0f} ‚ÇΩ"),
                        ft.Text(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {current_money - total_invested - rent_to_pay:,.0f} ‚ÇΩ"),
                        ft.Text(f"‚Ä¢ –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞ –∫ –æ–ø–ª–∞—Ç–µ: {'–î–∞' if rent_due else '–ù–µ—Ç'}", color=ft.Colors.RED if rent_due else ft.Colors.GREEN)
                    ], spacing=5),
                    padding=15
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üéØ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π", size=16, weight=ft.FontWeight.BOLD),
                        ft.Text(f"‚Ä¢ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: {len(goals)}"),
                        ft.Text(f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_goal_amount:,.0f} ‚ÇΩ"),
                        ft.Text(f"‚Ä¢ –£–∂–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {total_invested:,.0f} ‚ÇΩ"),
                        ft.Text(f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å: {remaining_goals:,.0f} ‚ÇΩ")
                    ], spacing=5),
                    padding=15
                )
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for rec in recommendations:
            forecast_widgets.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text(rec["title"], size=16, weight=ft.FontWeight.BOLD),
                            ft.Text(rec["description"], size=14),
                            ft.Text(rec["action"], size=12, color=ft.Colors.BLUE_600)
                        ], spacing=5),
                        padding=15
                    )
                )
            )
        
        return ft.Column(forecast_widgets, spacing=10)
    
    def calculate_smart_recommendations(self, monthly_income, current_money, goals, goal_investments, emergency_fund):
        recommendations = []
        current_emergency = current_money - sum(goal_investments.values())
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–µ–∑–µ—Ä–≤—É
        if current_emergency < emergency_fund * 0.5:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—É–º–º—É –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞
            monthly_savings_for_reserve = min(monthly_income * 0.2, (emergency_fund - current_emergency) / 12)
            months_to_reserve = (emergency_fund - current_emergency) / monthly_savings_for_reserve
            
            recommendations.append({
                "title": "üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–µ–∑–µ—Ä–≤",
                "description": f"–í–∞—à —Ä–µ–∑–µ—Ä–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {current_emergency:,.0f} ‚ÇΩ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {emergency_fund:,.0f} ‚ÇΩ",
                "action": f"–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ {monthly_savings_for_reserve:,.0f} ‚ÇΩ –≤ –º–µ—Å—è—Ü ({months_to_reserve:.0f} –º–µ—Å—è—Ü–µ–≤ –¥–æ —Ü–µ–ª–∏)"
            })
        elif current_emergency < emergency_fund:
            monthly_savings_for_reserve = min(monthly_income * 0.15, (emergency_fund - current_emergency) / 6)
            months_to_reserve = (emergency_fund - current_emergency) / monthly_savings_for_reserve
            
            recommendations.append({
                "title": "‚ö†Ô∏è –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–µ–∑–µ—Ä–≤",
                "description": f"–†–µ–∑–µ—Ä–≤ {current_emergency:,.0f} ‚ÇΩ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö {emergency_fund:,.0f} ‚ÇΩ",
                "action": f"–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ {monthly_savings_for_reserve:,.0f} ‚ÇΩ –≤ –º–µ—Å—è—Ü ({months_to_reserve:.0f} –º–µ—Å—è—Ü–µ–≤ –¥–æ —Ü–µ–ª–∏)"
            })
        else:
            recommendations.append({
                "title": "‚úÖ –†–µ–∑–µ—Ä–≤ –≤ –ø–æ—Ä—è–¥–∫–µ",
                "description": f"–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤: {current_emergency:,.0f} ‚ÇΩ",
                "action": "–ú–æ–∂–µ—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ü–µ–ª—è—Ö –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö"
            })
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π
        if goals:
            total_goal_amount = sum(goal["amount"] for goal in goals)
            total_invested = sum(goal_investments.values())
            remaining_goals = total_goal_amount - total_invested
            
            if remaining_goals > 0:
                # –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Ü–µ–ª–µ–π
                goal_priorities = self.calculate_goal_priorities(goals, goal_investments)
                
                recommendations.append({
                    "title": "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —Ü–µ–ª—è–º",
                    "description": f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å {remaining_goals:,.0f} ‚ÇΩ –Ω–∞ {len(goals)} —Ü–µ–ª–µ–π",
                    "action": f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {goal_priorities[0]['name']} - {goal_priorities[0]['monthly_needed']:,.0f} ‚ÇΩ/–º–µ—Å"
                })
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –¥–æ—Ö–æ–¥–∞
                total_monthly_needed = sum(g["monthly_needed"] for g in goal_priorities)
                max_affordable = monthly_income * 0.25  # –ú–∞–∫—Å–∏–º—É–º 25% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ —Ü–µ–ª–∏
                
                if total_monthly_needed > max_affordable:
                    recommendations.append({
                        "title": "üí° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–π",
                        "description": f"–ù—É–∂–Ω–æ {total_monthly_needed:,.0f} ‚ÇΩ/–º–µ—Å, –Ω–æ —ç—Ç–æ {total_monthly_needed/monthly_income*100:.0f}% –¥–æ—Ö–æ–¥–∞",
                        "action": f"–†–µ–∞–ª—å–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ {max_affordable:,.0f} ‚ÇΩ/–º–µ—Å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —Ü–µ–ª–µ–π"
                    })
                else:
                    recommendations.append({
                        "title": "‚úÖ –¶–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã",
                        "description": f"–ù—É–∂–Ω–æ {total_monthly_needed:,.0f} ‚ÇΩ/–º–µ—Å ({total_monthly_needed/monthly_income*100:.0f}% –¥–æ—Ö–æ–¥–∞)",
                        "action": "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω—É!"
                    })
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
        rent = self.finance_app.data["rent"]
        disposable_income = monthly_income - rent
        
        recommendations.append({
            "title": "üìä –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "description": f"–ü—Ä–∏ –¥–æ—Ö–æ–¥–µ {monthly_income:,.0f} ‚ÇΩ –∏ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–µ {rent:,.0f} ‚ÇΩ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:",
            "action": f"‚Ä¢ –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞: {rent:,.0f} ‚ÇΩ ‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {disposable_income * 0.80:,.0f} ‚ÇΩ ‚Ä¢ –†–µ–∑–µ—Ä–≤/—Ü–µ–ª–∏: {disposable_income * 0.15:,.0f} ‚ÇΩ ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {disposable_income * 0.05:,.0f} ‚ÇΩ"
        })
        
        return recommendations
    
    def calculate_goal_priorities(self, goals, goal_investments):
        priorities = []
        today = datetime.date.today()
        
        for goal in goals:
            try:
                goal_date = datetime.strptime(goal["date"], "%Y-%m-%d").date()
                days_left = (goal_date - today).days
                invested = goal_investments.get(goal["name"], 0)
                remaining = goal["amount"] - invested
                
                if remaining > 0 and days_left > 0:
                    monthly_needed = remaining / (days_left / 30)
                    priority_score = remaining / max(days_left, 1)
                    
                    priorities.append({
                        "name": goal["name"],
                        "amount": goal["amount"],
                        "invested": invested,
                        "remaining": remaining,
                        "days_left": days_left,
                        "monthly_needed": monthly_needed,
                        "priority_score": priority_score
                    })
            except:
                continue
        
        return sorted(priorities, key=lambda x: x["priority_score"], reverse=True)
    
    def create_expense_statistics(self):
        transactions = self.finance_app.data["transactions"]
        current_month = datetime.now().strftime("%Y-%m")
        
        monthly_expenses = sum(
            t["amount"] for t in transactions 
            if t["type"] == "expense" and t["date"].startswith(current_month)
        )
        
        monthly_income = sum(
            t["amount"] for t in transactions 
            if t["type"] == "income" and t["date"].startswith(current_month)
        )
        
        goal_investments = sum(
            t["amount"] for t in transactions 
            if t["type"] == "goal_investment" and t["date"].startswith(current_month)
        )
        
        salary = self.finance_app.data["salary"]
        
        return ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Text("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {monthly_income:,.0f} ‚ÇΩ", color=ft.Colors.GREEN),
                    ft.Text(f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} ‚ÇΩ", color=ft.Colors.RED),
                    ft.Text(f"‚Ä¢ –í —Ü–µ–ª–∏: {goal_investments:,.0f} ‚ÇΩ", color=ft.Colors.BLUE),
                    ft.Text(f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {monthly_income - monthly_expenses - goal_investments:,.0f} ‚ÇΩ"),
                    ft.Divider(),
                    ft.Text("üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"‚Ä¢ –î–æ–ª—è –Ω–∞ —Ü–µ–ª–∏: {goal_investments/max(salary,1)*100:.1f}%"),
                    ft.Text(f"‚Ä¢ –î–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {monthly_expenses/max(salary,1)*100:.1f}%"),
                    ft.Text(f"‚Ä¢ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è: {(monthly_income - monthly_expenses - goal_investments)/max(salary,1)*100:.1f}%")
                ], spacing=5),
                padding=15
            )
        )
    
    def show_add_income_dialog(self, e):
        self.show_transaction_dialog("income", "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
    
    def show_add_expense_dialog(self, e):
        self.show_transaction_dialog("expense", "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    
    def show_transaction_dialog(self, transaction_type, title):
        amount_field = ft.TextField(label="–°—É–º–º–∞ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER)
        description_field = ft.TextField(label="–û–ø–∏—Å–∞–Ω–∏–µ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        category_field = None
        if transaction_type == "expense":
            # –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_options = [
                ft.dropdown.Option("üçé –ï–¥–∞", "food"),
                ft.dropdown.Option("üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "restaurants"),
                ft.dropdown.Option("üéÆ –ò–≥—Ä—ã", "games"),
                ft.dropdown.Option("üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "transport"),
                ft.dropdown.Option("üëï –û–¥–µ–∂–¥–∞", "clothing"),
                ft.dropdown.Option("üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "electronics"),
                ft.dropdown.Option("üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "entertainment"),
                ft.dropdown.Option("üì¶ –ü—Ä–æ—á–µ–µ", "other")
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if "custom_categories" in self.finance_app.data:
                for cat in self.finance_app.data["custom_categories"]:
                    category_options.append(ft.dropdown.Option(f"{cat['icon']} {cat['name']}", cat['key']))
            
            category_field = ft.Dropdown(
                label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                options=category_options
            )
        
        def add_transaction(e):
            try:
                amount = float(amount_field.value)
                description = description_field.value
                category = category_field.value if category_field else None
                
                if amount > 0 and description:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
                    if transaction_type == "expense":
                        safety_reserve = self.finance_app.data["safety_reserve"]
                        current_money = self.finance_app.data["current_money"]
                        
                        # –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∞
                        available_for_spending = current_money - safety_reserve
                        
                        if amount > available_for_spending:
                            if available_for_spending <= 0:
                                amount_field.error_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {safety_reserve:,.0f} ‚ÇΩ —Ä–µ–∑–µ—Ä–≤–∞"
                            else:
                                amount_field.error_text = f"‚ö†Ô∏è –ú–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ {available_for_spending:,.0f} ‚ÇΩ (—Ä–µ–∑–µ—Ä–≤: {safety_reserve:,.0f} ‚ÇΩ)"
                            self.page.update()
                            return
                    
                    transaction = {
                        "type": transaction_type,
                        "amount": amount,
                        "description": description,
                        "category": category,
                        "date": datetime.now().strftime("%Y-%m-%d %H:%M")
                    }
                    
                    self.finance_app.data["transactions"].append(transaction)
                    
                    if transaction_type == "income":
                        self.finance_app.data["current_money"] += amount
                    else:
                        self.finance_app.data["current_money"] -= amount
                    
                    self.finance_app.save_data()
                    self.refresh_all_pages()
                    self.page.dialog.open = False
                    self.page.update()
            except ValueError:
                pass
        
        content_fields = [amount_field, description_field]
        if category_field:
            content_fields.append(category_field)
        
        dialog = ft.AlertDialog(
            title=ft.Text(title),
            content=ft.Column(content_fields, tight=True),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=self.close_dialog),
                ft.TextButton("–î–æ–±–∞–≤–∏—Ç—å", on_click=add_transaction)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def add_goal(self, e):
        try:
            name = self.goal_name_field.value
            amount = float(self.goal_amount_field.value)
            date_str = self.goal_date_field.value
            
            if name and amount > 0 and date_str:
                try:
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    if date_obj.date() <= datetime.now().date():
                        self.goal_date_field.error_text = "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
                        self.page.update()
                        return
                    
                    goal = {
                        "name": name,
                        "amount": amount,
                        "date": date_str
                    }
                    
                    self.finance_app.data["goals"].append(goal)
                    self.finance_app.save_data()
                    
                    self.goal_name_field.value = ""
                    self.goal_amount_field.value = ""
                    self.goal_date_field.value = ""
                    self.goal_date_field.error_text = ""
                    
                    self.refresh_all_pages()
                    
                except ValueError:
                    self.goal_date_field.error_text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD)"
                    self.page.update()
        except ValueError:
            pass
    
    def show_add_to_goal_dialog(self, goal_name):
        amount_field = ft.TextField(label="–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER)
        
        def add_to_goal(e):
            try:
                amount = float(amount_field.value)
                current_money = self.finance_app.data["current_money"]
                
                if amount > 0 and amount <= current_money:
                    if goal_name not in self.finance_app.data["goal_investments"]:
                        self.finance_app.data["goal_investments"][goal_name] = 0
                    
                    self.finance_app.data["goal_investments"][goal_name] += amount
                    self.finance_app.data["current_money"] -= amount
                    
                    transaction = {
                        "type": "goal_investment",
                        "amount": amount,
                        "description": f"–ü–µ—Ä–µ–≤–æ–¥ –≤ —Ü–µ–ª—å: {goal_name}",
                        "date": datetime.now().strftime("%Y-%m-%d %H:%M")
                    }
                    
                    self.finance_app.data["transactions"].append(transaction)
                    self.finance_app.save_data()
                    
                    self.page.update()
                    self.page.dialog.open = False
                    self.page.update()
                elif amount > current_money:
                    amount_field.error_text = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {current_money:,.0f} ‚ÇΩ"
                    self.page.update()
            except ValueError:
                amount_field.error_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É"
                self.page.update()
        
        dialog = ft.AlertDialog(
            title=ft.Text(f"–î–æ–±–∞–≤–∏—Ç—å –≤ —Ü–µ–ª—å: {goal_name}"),
            content=ft.Column([
                ft.Text(f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {self.finance_app.data['current_money']:,.0f} ‚ÇΩ"),
                amount_field
            ], tight=True),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=self.close_dialog),
                ft.TextButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", on_click=add_to_goal)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def update_purchase_name(self, e):
        self.purchase_name = e.control.value
    
    def update_purchase_price(self, e):
        try:
            self.purchase_price = float(e.control.value) if e.control.value else 0
        except ValueError:
            self.purchase_price = 0
    
    def check_purchase_affordability(self, e):
        if not self.purchase_name or self.purchase_price <= 0:
            self.purchase_analysis = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É", size=14, color=ft.Colors.RED)
            self.page.update()
            return
        
        analysis = self.calculate_purchase_analysis(self.purchase_price)
        self.purchase_analysis = analysis
        self.page.update()
    
    def calculate_purchase_analysis(self, price):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        goal_investments = self.finance_app.data["goal_investments"]
        rent = self.finance_app.data["rent"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É
        rent_due = self.check_rent_due()
        rent_to_pay = rent if rent_due else 0
        
        # –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏ (–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ —Ü–µ–ª–∏, —Å —É—á–µ—Ç–æ–º –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã –∏ —Ä–µ–∑–µ—Ä–≤–∞)
        free_money = current_money - sum(goal_investments.values()) - rent_to_pay
        available_for_spending = free_money - safety_reserve
        
        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥
        monthly_income = salary
        
        # –î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∞
        days_until_salary = self.calculate_days_until_salary(self.finance_app.data["salary_dates"][0])
        daily_budget = available_for_spending / max(days_until_salary, 1)
        
        if price <= available_for_spending:
            # –ú–æ–∂–µ–º –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∞
            remaining_after_purchase = available_for_spending - price
            days_remaining = remaining_after_purchase / daily_budget if daily_budget > 0 else 0
            
            return ft.Column([
                ft.Text("‚úÖ –ú–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN),
                ft.Text(f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è —Ç—Ä–∞—Ç: {remaining_after_purchase:,.0f} ‚ÇΩ"),
                ft.Text(f"–†–µ–∑–µ—Ä–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {safety_reserve:,.0f} ‚ÇΩ"),
                ft.Text(f"–≠—Ç–æ–≥–æ —Ö–≤–∞—Ç–∏—Ç –Ω–∞: {days_remaining:.0f} –¥–Ω–µ–π"),
                ft.Text(f"–¢–æ–≤–∞—Ä: {self.purchase_name}", size=12, color=ft.Colors.GREY_600)
            ], spacing=5)
        
        elif price <= free_money:
            # –ú–æ–∂–µ–º –∫—É–ø–∏—Ç—å, –Ω–æ –∑–∞—Ç—Ä–æ–Ω–µ–º —Ä–µ–∑–µ—Ä–≤
            reserve_impact = price - available_for_spending
            
            return ft.Column([
                ft.Text("‚ö†Ô∏è –ú–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å, –Ω–æ –∑–∞—Ç—Ä–æ–Ω–µ—Ç–µ —Ä–µ–∑–µ—Ä–≤", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.ORANGE),
                ft.Text(f"–ó–∞—Ç—Ä–æ–Ω–µ—Ç–µ —Ä–µ–∑–µ—Ä–≤ –Ω–∞: {reserve_impact:,.0f} ‚ÇΩ"),
                ft.Text(f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–∞: {safety_reserve - reserve_impact:,.0f} ‚ÇΩ"),
                ft.Text(f"–¢–æ–≤–∞—Ä: {self.purchase_name}", size=12, color=ft.Colors.GREY_600),
                ft.Text("‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è - –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", size=12, color=ft.Colors.RED)
            ], spacing=5)
        
        else:
            # –ù—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å
            needed_amount = price - current_money
            months_to_save = needed_amount / monthly_income
            monthly_savings_needed = needed_amount / max(months_to_save, 1)
            
            return ft.Column([
                ft.Text("‚ùå –ù—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.RED),
                ft.Text(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {needed_amount:,.0f} ‚ÇΩ"),
                ft.Text(f"–í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {months_to_save:.1f} –º–µ—Å—è—Ü–µ–≤"),
                ft.Text(f"–ù—É–∂–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å: {monthly_savings_needed:,.0f} ‚ÇΩ/–º–µ—Å"),
                ft.Text(f"–¢–æ–≤–∞—Ä: {self.purchase_name}", size=12, color=ft.Colors.GREY_600)
            ], spacing=5)
    
    def create_purchase_analysis(self):
        return self.purchase_analysis
    
    def create_smart_money_analysis(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        goal_investments = sum(self.finance_app.data["goal_investments"].values())
        rent = self.finance_app.data["rent"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É
        rent_due = self.check_rent_due()
        rent_to_pay = rent if rent_due else 0
        
        # –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏ (—Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∞ –∏ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—ã)
        free_money = current_money - goal_investments - rent_to_pay
        available_for_spending = free_money - safety_reserve
        
        # –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if current_money < safety_reserve:
            safety_status = "üö® –ö–†–ò–¢–ò–ß–ù–û"
            safety_color = ft.Colors.RED
            safety_message = f"–£ –≤–∞—Å {current_money:,.0f} ‚ÇΩ, –Ω–æ –Ω—É–∂–Ω–æ {safety_reserve:,.0f} ‚ÇΩ"
        elif current_money < safety_reserve * 1.5:
            safety_status = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï"
            safety_color = ft.Colors.ORANGE
            safety_message = f"–†–µ–∑–µ—Ä–≤: {current_money:,.0f} ‚ÇΩ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {safety_reserve:,.0f} ‚ÇΩ)"
        else:
            safety_status = "‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û"
            safety_color = ft.Colors.GREEN
            safety_message = f"–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤: {current_money:,.0f} ‚ÇΩ"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –º–µ—Å—è—Ü–∞
        monthly_income = salary
        monthly_expenses = self.calculate_average_monthly_expenses()
        monthly_savings = monthly_income - monthly_expenses - rent
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞
        months_forecast = []
        current_balance = current_money
        for month in range(1, 4):
            current_balance += monthly_savings
            months_forecast.append({
                "month": f"–ß–µ—Ä–µ–∑ {month} –º–µ—Å",
                "balance": current_balance,
                "safe": current_balance >= safety_reserve
            })
        
        return ft.Column([
            ft.Row([
                ft.Column([
                    ft.Text("–¢–µ–∫—É—â–∏–µ –¥–µ–Ω—å–≥–∏:", size=14),
                    ft.Text(f"{current_money:,.0f} ‚ÇΩ", size=20, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN)
                ], expand=True),
                ft.Column([
                    ft.Text("–û–∫–ª–∞–¥:", size=14),
                    ft.Text(f"{salary:,.0f} ‚ÇΩ", size=20, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–í —Ü–µ–ª—è—Ö:", size=14),
                    ft.Text(f"{goal_investments:,.0f} ‚ÇΩ", size=20, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Row([
                ft.Column([
                    ft.Text("üõ°Ô∏è –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(safety_status, size=18, weight=ft.FontWeight.BOLD, color=safety_color),
                    ft.Text(safety_message, size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{max(0, available_for_spending):,.0f} ‚ÇΩ", 
                           size=18, weight=ft.FontWeight.BOLD, 
                           color=ft.Colors.GREEN if available_for_spending > 0 else ft.Colors.RED),
                    ft.Text(f"–†–µ–∑–µ—Ä–≤: {safety_reserve:,.0f} ‚ÇΩ", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞", size=16, weight=ft.FontWeight.BOLD),
            ft.Column([
                ft.Row([
                    ft.Text(forecast["month"], size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{forecast['balance']:,.0f} ‚ÇΩ", 
                           size=14, 
                           color=ft.Colors.GREEN if forecast["safe"] else ft.Colors.RED),
                    ft.Text("‚úÖ" if forecast["safe"] else "‚ö†Ô∏è", size=16)
                ]) for forecast in months_forecast
            ], spacing=5),
            
            ft.Divider(),
            
            ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", size=16, weight=ft.FontWeight.BOLD),
            self.create_smart_recommendations()
        ], spacing=10)
    
    def calculate_average_monthly_expenses(self):
        transactions = self.finance_app.data["transactions"]
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã 10,000 ‚ÇΩ/–º–µ—Å—è—Ü
        base_expenses = 10000
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã 10,000 ‚ÇΩ
        # –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
        return base_expenses
        
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:
        # if not transactions:
        #     return base_expenses
        # 
        # months_with_data = {}
        # for transaction in transactions:
        #     if transaction["type"] == "expense":
        #         month_str = transaction["date"][:7]  # YYYY-MM
        #         if month_str not in months_with_data:
        #             months_with_data[month_str] = 0
        #         months_with_data[month_str] += transaction["amount"]
        # 
        # if not months_with_data:
        #     return base_expenses
        # 
        # sorted_months = sorted(months_with_data.keys(), reverse=True)
        # months_to_use = sorted_months[:3] if len(sorted_months) >= 3 else sorted_months
        # 
        # total_expenses = sum(months_with_data[month] for month in months_to_use)
        # average_expenses = total_expenses / len(months_to_use)
        # 
        # return average_expenses
    
    def get_current_month_expenses(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        transactions = self.finance_app.data["transactions"]
        current_month = datetime.now().strftime("%Y-%m")
        
        current_expenses = sum(
            t["amount"] for t in transactions 
            if t["type"] == "expense" and t["date"].startswith(current_month)
        )
        return current_expenses
    
    def get_current_month_income(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        transactions = self.finance_app.data["transactions"]
        current_month = datetime.now().strftime("%Y-%m")
        
        current_income = sum(
            t["amount"] for t in transactions 
            if t["type"] == "income" and t["date"].startswith(current_month)
        )
        return current_income
    
    def create_smart_recommendations(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        rent = self.finance_app.data["rent"]
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
        if current_money < safety_reserve:
            needed = safety_reserve - current_money
            months_to_save = needed / max(salary - monthly_expenses - rent, 1)
            recommendations.append(
                ft.Text(f"üö® –°–†–û–ß–ù–û: –ù—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å {needed:,.0f} ‚ÇΩ –∑–∞ {months_to_save:.1f} –º–µ—Å", 
                       color=ft.Colors.RED, size=12)
            )
        elif current_money < safety_reserve * 1.5:
            recommendations.append(
                ft.Text("‚ö†Ô∏è –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–µ–∑–µ—Ä–≤ –¥–æ 30,000 ‚ÇΩ –¥–ª—è –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 
                       color=ft.Colors.ORANGE, size=12)
            )
        else:
            recommendations.append(
                ft.Text("‚úÖ –†–µ–∑–µ—Ä–≤ –≤ –ø–æ—Ä—è–¥–∫–µ! –ú–æ–∂–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–∏", 
                       color=ft.Colors.GREEN, size=12)
            )
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç
        if monthly_expenses > salary * 0.7:
            recommendations.append(
                ft.Text(f"üí° –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} ‚ÇΩ/–º–µ—Å ({monthly_expenses/salary*100:.0f}% –¥–æ—Ö–æ–¥–∞)", 
                       color=ft.Colors.ORANGE, size=12)
            )
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π
        goals = self.finance_app.data["goals"]
        if goals:
            total_goal_amount = sum(goal["amount"] for goal in goals)
            total_invested = sum(self.finance_app.data["goal_investments"].values())
            remaining = total_goal_amount - total_invested
            
            if remaining > 0:
                monthly_savings = salary - monthly_expenses - rent
                months_for_goals = remaining / max(monthly_savings * 0.3, 1)  # 30% –æ—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –Ω–∞ —Ü–µ–ª–∏
                recommendations.append(
                    ft.Text(f"üéØ –ù–∞ —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å {remaining:,.0f} ‚ÇΩ (~{months_for_goals:.0f} –º–µ—Å)", 
                           color=ft.Colors.BLUE, size=12)
                )
        
        return ft.Column(recommendations, spacing=5)
    
    def create_critical_alerts(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        goal_investments = sum(self.finance_app.data["goal_investments"].values())
        rent = self.finance_app.data["rent"]
        rent_due = self.check_rent_due()
        rent_to_pay = rent if rent_due else 0
        
        alerts = []
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ–Ω–µ–≥
        if current_money < safety_reserve:
            deficit = safety_reserve - current_money
            alerts.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.RED),
                            ft.Text(f"–£ –≤–∞—Å {current_money:,.0f} ‚ÇΩ, –Ω–æ –Ω—É–∂–Ω–æ {safety_reserve:,.0f} ‚ÇΩ", size=16),
                            ft.Text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫: {deficit:,.0f} ‚ÇΩ", size=14, color=ft.Colors.RED),
                            ft.Text("–°–†–û–ß–ù–û –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç!", size=14, color=ft.Colors.RED, weight=ft.FontWeight.BOLD)
                        ], spacing=5),
                        padding=15,
                        bgcolor=ft.Colors.RED_50
                    )
                )
            )
        elif current_money < safety_reserve * 1.2:
            alerts.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("‚ö†Ô∏è –ù–ò–ó–ö–ò–ô –†–ï–ó–ï–†–í", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.ORANGE),
                            ft.Text(f"–£ –≤–∞—Å {current_money:,.0f} ‚ÇΩ, —Ä–µ–∑–µ—Ä–≤ {safety_reserve:,.0f} ‚ÇΩ", size=16),
                            ft.Text("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç", size=14, color=ft.Colors.ORANGE)
                        ], spacing=5),
                        padding=15,
                        bgcolor=ft.Colors.ORANGE_50
                    )
                )
            )
        else:
            alerts.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("‚úÖ –†–ï–ó–ï–†–í –í –ü–û–†–Ø–î–ö–ï", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN),
                            ft.Text(f"–£ –≤–∞—Å {current_money:,.0f} ‚ÇΩ, —Ä–µ–∑–µ—Ä–≤ {safety_reserve:,.0f} ‚ÇΩ", size=16),
                            ft.Text("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∞", size=14, color=ft.Colors.GREEN)
                        ], spacing=5),
                        padding=15,
                        bgcolor=ft.Colors.GREEN_50
                    )
                )
            )
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–µ
        if rent_due and rent > 0:
            alerts.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("‚ö†Ô∏è –ö–í–ê–†–¢–ü–õ–ê–¢–ê –ö –û–ü–õ–ê–¢–ï", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.ORANGE),
                            ft.Text(f"–°—É–º–º–∞: {rent:,.0f} ‚ÇΩ", size=14),
                            ft.Text("–û–ø–ª–∞—Ç–∏—Ç–µ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É", size=14, color=ft.Colors.ORANGE)
                        ], spacing=5),
                        padding=15,
                        bgcolor=ft.Colors.ORANGE_50
                    )
                )
            )
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º —Ä–µ–∑–µ—Ä–≤–µ
        if current_money < safety_reserve * 1.5:
            alerts.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("‚ö†Ô∏è –ù–ò–ó–ö–ò–ô –†–ï–ó–ï–†–í", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.ORANGE),
                            ft.Text(f"–†–µ–∑–µ—Ä–≤: {current_money:,.0f} ‚ÇΩ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {safety_reserve:,.0f} ‚ÇΩ)", size=14),
                            ft.Text("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤", size=14, color=ft.Colors.ORANGE)
                        ], spacing=5),
                        padding=15,
                        bgcolor=ft.Colors.ORANGE_50
                    )
                )
            )
        
        # –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
        else:
            alerts.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text("‚úÖ –í–°–ï –í –ü–û–†–Ø–î–ö–ï", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN),
                            ft.Text(f"–†–µ–∑–µ—Ä–≤: {current_money:,.0f} ‚ÇΩ", size=14),
                            ft.Text("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∞", size=14, color=ft.Colors.GREEN)
                        ], spacing=5),
                        padding=15,
                        bgcolor=ft.Colors.GREEN_50
                    )
                )
            )
        
        return ft.Column(alerts, spacing=10) if alerts else ft.Container()
    
    def create_ai_assistant_card(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        rent = self.finance_app.data["rent"]
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        financial_health = self.calculate_financial_health()
        
        # –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
        ai_recommendations = self.get_ai_recommendations()
        
        return ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Icon(ft.Icons.SMART_TOY, size=40, color=ft.Colors.BLUE),
                        ft.Column([
                            ft.Text("–í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫", size=20, weight=ft.FontWeight.BOLD),
                            ft.Text(f"–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {financial_health['score']}/100", 
                                   size=16, color=financial_health['color'])
                        ], expand=True)
                    ], spacing=10),
                    
                    ft.Divider(),
                    
                    ft.Text("üéØ –ì–ª–∞–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Column(ai_recommendations[:3], spacing=5),
                    
                    ft.Divider(),
                    
                    ft.Text("üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Row([
                        ft.Column([
                            ft.Text("–î–æ—Ö–æ–¥/–º–µ—Å", size=12, color=ft.Colors.GREY_600),
                            ft.Text(f"{salary:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN)
                        ], expand=True),
                        ft.Column([
                            ft.Text("–†–∞—Å—Ö–æ–¥—ã/–º–µ—Å", size=12, color=ft.Colors.GREY_600),
                            ft.Text(f"{monthly_expenses:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.RED)
                        ], expand=True),
                        ft.Column([
                            ft.Text("–°–±–µ—Ä–µ–∂–µ–Ω–∏—è", size=12, color=ft.Colors.GREY_600),
                            ft.Text(f"{salary - monthly_expenses - rent:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE)
                        ], expand=True)
                    ])
                ], spacing=10),
                padding=20
            )
        )
    
    def calculate_financial_health(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        goals = self.finance_app.data["goals"]
        goal_investments = sum(self.finance_app.data["goal_investments"].values())
        
        score = 0
        
        # –†–µ–∑–µ—Ä–≤ (40 –±–∞–ª–ª–æ–≤)
        if current_money >= safety_reserve * 2:
            score += 40
        elif current_money >= safety_reserve:
            score += 30
        elif current_money >= safety_reserve * 0.5:
            score += 15
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥—ã (30 –±–∞–ª–ª–æ–≤)
        if monthly_expenses > 0:
            expense_ratio = monthly_expenses / salary
            if expense_ratio <= 0.5:
                score += 30
            elif expense_ratio <= 0.7:
                score += 20
            elif expense_ratio <= 0.9:
                score += 10
        
        # –¶–µ–ª–∏ (20 –±–∞–ª–ª–æ–≤)
        if goals:
            total_goal_amount = sum(goal["amount"] for goal in goals)
            if total_goal_amount > 0:
                goal_progress = goal_investments / total_goal_amount
                score += int(20 * goal_progress)
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (10 –±–∞–ª–ª–æ–≤)
        if salary > 0 and monthly_expenses > 0:
            savings_rate = (salary - monthly_expenses) / salary
            if savings_rate >= 0.3:
                score += 10
            elif savings_rate >= 0.2:
                score += 7
            elif savings_rate >= 0.1:
                score += 5
        
        if score >= 80:
            return {"score": score, "color": ft.Colors.GREEN, "status": "–û—Ç–ª–∏—á–Ω–æ"}
        elif score >= 60:
            return {"score": score, "color": ft.Colors.ORANGE, "status": "–•–æ—Ä–æ—à–æ"}
        else:
            return {"score": score, "color": ft.Colors.RED, "status": "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"}
    
    def get_ai_recommendations(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        rent = self.finance_app.data["rent"]
        goals = self.finance_app.data["goals"]
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
        if current_money < safety_reserve:
            deficit = safety_reserve - current_money
            recommendations.append(
                ft.Text(f"üö® –°–†–û–ß–ù–û: –ù–∞–∫–æ–ø–∏—Ç–µ {deficit:,.0f} ‚ÇΩ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞", 
                       color=ft.Colors.RED, size=14, weight=ft.FontWeight.BOLD)
            )
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if monthly_expenses > salary * 0.8:
            recommendations.append(
                ft.Text(f"üí° –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {monthly_expenses - salary * 0.7:,.0f} ‚ÇΩ/–º–µ—Å", 
                       color=ft.Colors.ORANGE, size=14)
            )
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π
        if goals:
            total_goal_amount = sum(goal["amount"] for goal in goals)
            total_invested = sum(self.finance_app.data["goal_investments"].values())
            if total_invested < total_goal_amount * 0.1:
                recommendations.append(
                    ft.Text(f"üéØ –ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–∏ (–æ—Å—Ç–∞–ª–æ—Å—å {total_goal_amount - total_invested:,.0f} ‚ÇΩ)", 
                           color=ft.Colors.BLUE, size=14)
                )
        
        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        current_month = datetime.now().month
        if current_month == 12:
            recommendations.append(
                ft.Text("üéÑ –ù–æ–≤—ã–π –≥–æ–¥: –æ—Ç–ª–æ–∂–∏—Ç–µ 15,000-30,000 ‚ÇΩ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏", 
                       color=ft.Colors.PURPLE, size=14)
            )
        
        return recommendations
    
    def create_detailed_analytics(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        transactions = self.finance_app.data["transactions"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤
        expense_categories = self.analyze_expense_categories()
        
        # –¢—Ä–µ–Ω–¥—ã
        trends = self.calculate_trends()
        
        return ft.Column([
            ft.Row([
                ft.Column([
                    ft.Text("üìà –¢—Ä–µ–Ω–¥—ã", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–†–∞—Å—Ö–æ–¥—ã: {trends['expense_trend']}", 
                           color=ft.Colors.RED if trends['expense_trend'] == "‚ÜóÔ∏è –†–∞—Å—Ç—É—Ç" else ft.Colors.GREEN),
                    ft.Text(f"–î–æ—Ö–æ–¥—ã: {trends['income_trend']}", 
                           color=ft.Colors.GREEN if trends['income_trend'] == "‚ÜóÔ∏è –†–∞—Å—Ç—É—Ç" else ft.Colors.RED),
                    ft.Text(f"–°–±–µ—Ä–µ–∂–µ–Ω–∏—è: {trends['savings_trend']}", 
                           color=ft.Colors.BLUE if trends['savings_trend'] == "‚ÜóÔ∏è –†–∞—Å—Ç—É—Ç" else ft.Colors.ORANGE)
                ], expand=True),
                ft.Column([
                    ft.Text("üí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", size=16, weight=ft.FontWeight.BOLD),
                    ft.Column([
                        ft.Text(f"{cat}: {amount:,.0f} ‚ÇΩ", size=12) 
                        for cat, amount in expense_categories.items()
                    ], spacing=2)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üìä –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", size=16, weight=ft.FontWeight.BOLD),
            self.create_monthly_chart()
        ], spacing=10)
    
    def analyze_expense_categories(self):
        transactions = self.finance_app.data["transactions"]
        current_month = datetime.now().strftime("%Y-%m")
        
        categories = {}
        category_names = {
            "food": "üçé –ï–¥–∞",
            "restaurants": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", 
            "games": "üéÆ –ò–≥—Ä—ã",
            "transport": "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "clothing": "üëï –û–¥–µ–∂–¥–∞",
            "electronics": "üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "entertainment": "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "other": "üì¶ –ü—Ä–æ—á–µ–µ"
        }
        
        for transaction in transactions:
            if transaction["type"] == "expense" and transaction["date"].startswith(current_month):
                amount = transaction["amount"]
                category = transaction.get("category", "other")
                category_name = category_names.get(category, "üì¶ –ü—Ä–æ—á–µ–µ")
                categories[category_name] = categories.get(category_name, 0) + amount
        
        return dict(sorted(categories.items(), key=lambda x: x[1], reverse=True))
    
    def calculate_trends(self):
        transactions = self.finance_app.data["transactions"]
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞
        current_month = datetime.now().strftime("%Y-%m")
        last_month = (datetime.now() - timedelta(days=30)).strftime("%Y-%m")
        
        current_expenses = sum(t["amount"] for t in transactions 
                             if t["type"] == "expense" and t["date"].startswith(current_month))
        last_expenses = sum(t["amount"] for t in transactions 
                          if t["type"] == "expense" and t["date"].startswith(last_month))
        
        current_income = sum(t["amount"] for t in transactions 
                           if t["type"] == "income" and t["date"].startswith(current_month))
        last_income = sum(t["amount"] for t in transactions 
                        if t["type"] == "income" and t["date"].startswith(last_month))
        
        return {
            "expense_trend": "‚ÜóÔ∏è –†–∞—Å—Ç—É—Ç" if current_expenses > last_expenses else "‚ÜòÔ∏è –°–Ω–∏–∂–∞—é—Ç—Å—è",
            "income_trend": "‚ÜóÔ∏è –†–∞—Å—Ç—É—Ç" if current_income > last_income else "‚ÜòÔ∏è –°–Ω–∏–∂–∞—é—Ç—Å—è",
            "savings_trend": "‚ÜóÔ∏è –†–∞—Å—Ç—É—Ç" if (current_income - current_expenses) > (last_income - last_expenses) else "‚ÜòÔ∏è –°–Ω–∏–∂–∞—é—Ç—Å—è"
        }
    
    def create_monthly_chart(self):
        transactions = self.finance_app.data["transactions"]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        months_data = []
        for i in range(6):
            month_date = datetime.now() - timedelta(days=30*i)
            month_str = month_date.strftime("%Y-%m")
            month_name = month_date.strftime("%b")
            
            month_income = sum(t["amount"] for t in transactions 
                             if t["type"] == "income" and t["date"].startswith(month_str))
            month_expenses = sum(t["amount"] for t in transactions 
                               if t["type"] == "expense" and t["date"].startswith(month_str))
            
            months_data.append({
                "month": month_name,
                "income": month_income,
                "expenses": month_expenses,
                "savings": month_income - month_expenses
            })
        
        months_data.reverse()  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        
        return ft.Column([
            ft.Row([
                ft.Text(month["month"], size=12, weight=ft.FontWeight.BOLD),
                ft.Text(f"–î–æ—Ö–æ–¥: {month['income']:,.0f} ‚ÇΩ", size=10, color=ft.Colors.GREEN),
                ft.Text(f"–†–∞—Å—Ö–æ–¥: {month['expenses']:,.0f} ‚ÇΩ", size=10, color=ft.Colors.RED),
                ft.Text(f"–°–±–µ—Ä–µ–∂–µ–Ω–∏—è: {month['savings']:,.0f} ‚ÇΩ", size=10, color=ft.Colors.BLUE)
            ]) for month in months_data
        ], spacing=5)
    
    def create_holiday_planning(self):
        current_month = datetime.now().month
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        
        holiday_planning = []
        
        # –ù–æ–≤—ã–π –≥–æ–¥
        if current_month == 12:
            new_year_budget = min(salary * 0.2, 30000)  # 20% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–ª–∏ 30,000 ‚ÇΩ
            holiday_planning.append(
                ft.Column([
                    ft.Text("üéÑ –ù–æ–≤—ã–π –≥–æ–¥ 2024", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç: {new_year_budget:,.0f} ‚ÇΩ", size=14),
                    ft.Text("‚Ä¢ –ü–æ–¥–∞—Ä–∫–∏: 15,000-20,000 ‚ÇΩ", size=12),
                    ft.Text("‚Ä¢ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Å—Ç–æ–ª: 8,000-12,000 ‚ÇΩ", size=12),
                    ft.Text("‚Ä¢ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: 5,000-8,000 ‚ÇΩ", size=12),
                    ft.Text(f"–î–æ—Å—Ç—É–ø–Ω–æ: {current_money:,.0f} ‚ÇΩ", 
                           color=ft.Colors.GREEN if current_money >= new_year_budget else ft.Colors.RED, size=12)
                ], spacing=5)
            )
        elif current_month == 11:
            holiday_planning.append(
                ft.Column([
                    ft.Text("üéÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ù–æ–≤–æ–º—É –≥–æ–¥—É", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text("–ù–∞—á–Ω–∏—Ç–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å 5,000-8,000 ‚ÇΩ/–º–µ—Å", size=14),
                    ft.Text("‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤", size=12),
                    ft.Text("‚Ä¢ –ò—â–∏—Ç–µ —Å–∫–∏–¥–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ", size=12),
                    ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é", size=12)
                ], spacing=5)
            )
        
        # –î—Ä—É–≥–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holidays = [
            {"month": 2, "name": "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "budget": 5000, "icon": "üíï"},
            {"month": 3, "name": "8 –ú–∞—Ä—Ç–∞", "budget": 8000, "icon": "üå∏"},
            {"month": 5, "name": "–î–µ–Ω—å –ü–æ–±–µ–¥—ã", "budget": 3000, "icon": "üéñÔ∏è"},
            {"month": 6, "name": "–î–µ–Ω—å –†–æ—Å—Å–∏–∏", "budget": 2000, "icon": "üá∑üá∫"},
            {"month": 9, "name": "–î–µ–Ω—å –∑–Ω–∞–Ω–∏–π", "budget": 10000, "icon": "üìö"},
            {"month": 11, "name": "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞", "budget": 2000, "icon": "ü§ù"}
        ]
        
        for holiday in holidays:
            if holiday["month"] == current_month:
                holiday_planning.append(
                    ft.Column([
                        ft.Text(f"{holiday['icon']} {holiday['name']}", size=16, weight=ft.FontWeight.BOLD),
                        ft.Text(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç: {holiday['budget']:,.0f} ‚ÇΩ", size=14),
                        ft.Text(f"–î–æ—Å—Ç—É–ø–Ω–æ: {current_money:,.0f} ‚ÇΩ", 
                               color=ft.Colors.GREEN if current_money >= holiday['budget'] else ft.Colors.RED, size=12)
                    ], spacing=5)
                )
        
        if not holiday_planning:
            holiday_planning.append(
                ft.Text("üìÖ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤", size=14, color=ft.Colors.GREY_600)
            )
        
        return ft.Column(holiday_planning, spacing=10)
    
    def create_yearly_forecast(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        rent = self.finance_app.data["rent"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        goals = self.finance_app.data["goals"]
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤
        monthly_savings = salary - monthly_expenses - rent
        forecast_months = []
        
        current_balance = current_money
        for month in range(1, 13):
            month_date = datetime.now() + timedelta(days=30*month)
            month_name = month_date.strftime("%B %Y")
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            holiday_adjustment = 0
            if month_date.month == 12:  # –ù–æ–≤—ã–π –≥–æ–¥
                holiday_adjustment = -min(salary * 0.2, 30000)
            elif month_date.month in [2, 3, 5, 6, 9, 11]:  # –î—Ä—É–≥–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
                holiday_adjustment = -5000
            
            current_balance += monthly_savings + holiday_adjustment
            
            forecast_months.append({
                "month": month_name,
                "balance": current_balance,
                "safe": current_balance >= safety_reserve,
                "holiday": holiday_adjustment != 0
            })
        
        return ft.Column([
            ft.Text("–ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –≥–æ–¥:", size=16, weight=ft.FontWeight.BOLD),
            ft.Column([
                ft.Row([
                    ft.Text(forecast["month"], size=12, weight=ft.FontWeight.BOLD, expand=2),
                    ft.Text(f"{forecast['balance']:,.0f} ‚ÇΩ", size=12, 
                           color=ft.Colors.GREEN if forecast["safe"] else ft.Colors.RED, expand=1),
                    ft.Text("üéÑ" if forecast["holiday"] else "‚úÖ" if forecast["safe"] else "‚ö†Ô∏è", size=12, expand=0)
                ]) for forecast in forecast_months
            ], spacing=3),
            
            ft.Divider(),
            
            ft.Text("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≥–æ–¥–∞:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è: {monthly_savings * 12:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ~{min(salary * 0.2, 30000) + 5000 * 5:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {forecast_months[-1]['balance']:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {'‚úÖ –û–±–µ—Å–ø–µ—á–µ–Ω–∞' if forecast_months[-1]['safe'] else '‚ö†Ô∏è –ü–æ–¥ —É–≥—Ä–æ–∑–æ–π'}", 
                   size=12, color=ft.Colors.GREEN if forecast_months[-1]['safe'] else ft.Colors.RED)
        ], spacing=10)
    
    def create_smart_tips(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        safety_reserve = self.finance_app.data["safety_reserve"]
        
        tips = []
        
        # –°–æ–≤–µ—Ç—ã –ø–æ —Ä–µ–∑–µ—Ä–≤—É
        if current_money < safety_reserve:
            tips.append(
                ft.Text("üí° –°–û–í–ï–¢: –°–æ–∑–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞", 
                       size=12, color=ft.Colors.BLUE)
            )
        
        # –°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
        if monthly_expenses > salary * 0.7:
            tips.append(
                ft.Text("üí° –°–û–í–ï–¢: –í–µ–¥–∏—Ç–µ —É—á–µ—Ç –≤—Å–µ—Ö —Ç—Ä–∞—Ç - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", 
                       size=12, color=ft.Colors.ORANGE)
            )
        
        # –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
        if current_money > safety_reserve * 2:
            tips.append(
                ft.Text("üí° –°–û–í–ï–¢: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–∞—Å", 
                       size=12, color=ft.Colors.GREEN)
            )
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        current_month = datetime.now().month
        if current_month == 12:
            tips.append(
                ft.Text("üéÑ –°–û–í–ï–¢: –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ - –≤ –¥–µ–∫–∞–±—Ä–µ —Ü–µ–Ω—ã –≤—ã—à–µ", 
                       size=12, color=ft.Colors.PURPLE)
            )
        elif current_month in [1, 2]:
            tips.append(
                ft.Text("‚ùÑÔ∏è –°–û–í–ï–¢: –ó–∏–º–∞ - –≤—Ä–µ–º—è —ç–∫–æ–Ω–æ–º–∏–∏. –û—Ç–ª–æ–∂–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –ª–µ—Ç–Ω–∏–π –æ—Ç–ø—É—Å–∫", 
                       size=12, color=ft.Colors.BLUE)
            )
        
        # –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
        tips.extend([
            ft.Text("üí° –°–û–í–ï–¢: –ü—Ä–∞–≤–∏–ª–æ 50/30/20: 50% –Ω–∞ –Ω—É–∂–¥—ã, 30% –Ω–∞ –∂–µ–ª–∞–Ω–∏—è, 20% –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è", 
                   size=12, color=ft.Colors.GREY_700),
            ft.Text("üí° –°–û–í–ï–¢: –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", 
                   size=12, color=ft.Colors.GREY_700),
            ft.Text("üí° –°–û–í–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫ –∏ —Å–∫–∏–¥–∫–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å 5-10%", 
                   size=12, color=ft.Colors.GREY_700)
        ])
        
        return ft.Column(tips, spacing=5)
    
    def create_wants_calculator(self):
        self.want_item = ft.TextField(label="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", width=200)
        self.want_price = ft.TextField(label="–¶–µ–Ω–∞ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.want_category = ft.Dropdown(
            label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            width=150,
            options=[
                ft.dropdown.Option("–ò–≥—Ä—ã", "games"),
                ft.dropdown.Option("–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "restaurants"),
                ft.dropdown.Option("–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", "electronics"),
                ft.dropdown.Option("–¢–µ–ª–µ—Ñ–æ–Ω", "electronics"),
                ft.dropdown.Option("–û–¥–µ–∂–¥–∞", "clothing"),
                ft.dropdown.Option("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "entertainment"),
                ft.dropdown.Option("–ü—Ä–æ—á–µ–µ", "other")
            ]
        )
        self.want_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", size=14, color=ft.Colors.GREY_600)
        
        return ft.Column([
            ft.Row([
                self.want_item,
                self.want_price,
                self.want_category,
                ft.ElevatedButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", on_click=self.analyze_want)
            ], spacing=10),
            ft.Container(content=self.want_result, padding=10)
        ], spacing=10)
    
    def analyze_want(self, e):
        try:
            item = self.want_item.value
            price = float(self.want_price.value) if self.want_price.value else 0
            category = self.want_category.value
            
            if not item or price <= 0 or not category:
                self.want_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", size=14, color=ft.Colors.RED)
                self.page.update()
                return
            
            current_money = self.finance_app.data["current_money"]
            safety_reserve = self.finance_app.data["safety_reserve"]
            salary = self.finance_app.data["salary"]
            monthly_expenses = self.calculate_average_monthly_expenses()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_analysis = self.get_category_analysis(category, price, salary)
            
            # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            available_money = current_money - safety_reserve
            months_to_save = (price - available_money) / max(salary - monthly_expenses, 1) if price > available_money else 0
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if price <= available_money:
                recommendation = "‚úÖ –ú–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å"
                color = ft.Colors.GREEN
                priority = "–í—ã—Å–æ–∫–∏–π"
            elif months_to_save <= 3:
                recommendation = f"‚è∞ –ù—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å {months_to_save:.1f} –º–µ—Å—è—Ü–µ–≤"
                color = ft.Colors.ORANGE
                priority = "–°—Ä–µ–¥–Ω–∏–π"
            else:
                recommendation = f"‚ùå –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ - {months_to_save:.1f} –º–µ—Å—è—Ü–µ–≤"
                color = ft.Colors.RED
                priority = "–ù–∏–∑–∫–∏–π"
            
            self.want_result = ft.Column([
                ft.Text(f"üéØ {item}", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_analysis['name']}", size=14),
                ft.Text(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}", size=14, color=color),
                ft.Text(f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {available_money:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"‚è∞ –í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {months_to_save:.1f} –º–µ—Å", size=14),
                ft.Text(recommendation, size=14, color=color, weight=ft.FontWeight.BOLD),
                
                ft.Divider(),
                
                ft.Text("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(category_analysis['advice'], size=12),
                ft.Text(f"‚Ä¢ –ë—é–¥–∂–µ—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_analysis['budget']:,.0f} ‚ÇΩ/–º–µ—Å", size=12),
                ft.Text(f"‚Ä¢ –î–æ–ª—è –æ—Ç –¥–æ—Ö–æ–¥–∞: {category_analysis['percentage']:.1f}%", size=12)
            ], spacing=5)
            
            self.page.update()
        except ValueError:
            self.want_result = ft.Text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", size=14, color=ft.Colors.RED)
            self.page.update()
    
    def get_category_analysis(self, category, price, salary):
        category_data = {
            "games": {
                "name": "–ò–≥—Ä—ã",
                "budget": salary * 0.05,  # 5% –æ—Ç –¥–æ—Ö–æ–¥–∞
                "percentage": 5,
                "advice": "‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ (Steam Sale)\n‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç: 3,000 ‚ÇΩ/–º–µ—Å\n‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Game Pass"
            },
            "restaurants": {
                "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã",
                "budget": salary * 0.1,  # 10% –æ—Ç –¥–æ—Ö–æ–¥–∞
                "percentage": 10,
                "advice": "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏\n‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞ —Å –¥–µ–≤—É—à–∫–æ–π\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∏–¥–∫–∏"
            },
            "clothing": {
                "name": "–û–¥–µ–∂–¥–∞",
                "budget": salary * 0.03,  # 3% –æ—Ç –¥–æ—Ö–æ–¥–∞
                "percentage": 3,
                "advice": "‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –≤ —Å–µ–∑–æ–Ω —Å–∫–∏–¥–æ–∫\n‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ—â–∏\n‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å—Ç–∞—Ä—É—é –æ–¥–µ–∂–¥—É"
            },
            "electronics": {
                "name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
                "budget": salary * 0.15,   # 15% –æ—Ç –¥–æ—Ö–æ–¥–∞
                "percentage": 15,
                "advice": "‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –≤ –ø–µ—Ä–∏–æ–¥ —Å–∫–∏–¥–æ–∫ (–ß–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞)\n‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±/—É –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫ –∫–∞—Ä—Ç—ã"
            },
            "entertainment": {
                "name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                "budget": salary * 0.05,  # 5% –æ—Ç –¥–æ—Ö–æ–¥–∞
                "percentage": 5,
                "advice": "‚Ä¢ –ö–∏–Ω–æ, –∫–∞—Ñ–µ —Å –¥–µ–≤—É—à–∫–æ–π\n‚Ä¢ –ò—â–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ"
            },
            "other": {
                "name": "–ü—Ä–æ—á–µ–µ",
                "budget": salary * 0.02,  # 2% –æ—Ç –¥–æ—Ö–æ–¥–∞
                "percentage": 2,
                "advice": "‚Ä¢ –ü–æ–¥—É–º–∞–π—Ç–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n‚Ä¢ –ò—â–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã\n‚Ä¢ –û—Ç–ª–æ–∂–∏—Ç–µ –Ω–∞ –ø–æ—Ç–æ–º"
            }
        }
        
        return category_data.get(category, category_data["other"])
    
    def create_my_budget_analysis(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        current_month_expenses = self.get_current_month_expenses()
        current_month_income = self.get_current_month_income()
        
        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –≤ –º–µ—Å—è—Ü–µ
        current_day = datetime.now().day
        import calendar
        current_year = datetime.now().year
        current_month = datetime.now().month
        days_in_month = calendar.monthrange(current_year, current_month)[1]
        remaining_days = days_in_month - current_day + 1
        
        # ChatGPT –ø–æ–¥–ø–∏—Å–∫–∞
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ (—Å—Ä–µ–¥–Ω–∏–µ)
        avg_monthly_expenses = self.calculate_average_monthly_expenses()
        expected_remaining_expenses = (avg_monthly_expenses / days_in_month) * remaining_days
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Å —É—á–µ—Ç–æ–º —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ
        # –ï—Å–ª–∏ –º–µ—Å—è—Ü –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –Ω–µ –≤—ã—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∞—Ç—ã –¥–≤–∞–∂–¥—ã
        if remaining_days <= 2:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
            available_money = current_money - safety_reserve
        else:
            available_money = current_money - safety_reserve - current_month_expenses
        
        daily_budget = available_money / remaining_days if remaining_days > 0 else 0
        weekly_budget = available_money / (remaining_days / 7) if remaining_days > 0 else 0
        monthly_budget = available_money
        
        # ChatGPT –ø–æ–¥–ø–∏—Å–∫–∞
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        
        return ft.Column([
            ft.Text("üí≥ –ú–æ–∏ –¥–µ–Ω—å–≥–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d %B %Y')}", size=12, color=ft.Colors.GREY_600),
            ft.Text(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ: {remaining_days}", size=12, color=ft.Colors.GREY_600),
            ft.Divider(),
            ft.Row([
                ft.Column([
                    ft.Text("üí∞ –í –¥–µ–Ω—å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{daily_budget:,.0f} ‚ÇΩ", size=18, color=ft.Colors.GREEN),
                    ft.Text("—Å–≤–æ–±–æ–¥–Ω–æ", size=12, color=ft.Colors.GREY_600)
                ], expand=True),
                ft.Column([
                    ft.Text("üìÖ –í –Ω–µ–¥–µ–ª—é", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{weekly_budget:,.0f} ‚ÇΩ", size=18, color=ft.Colors.BLUE),
                    ft.Text("—Å–≤–æ–±–æ–¥–Ω–æ", size=12, color=ft.Colors.GREY_600)
                ], expand=True),
                ft.Column([
                    ft.Text("üìÜ –í –º–µ—Å—è—Ü", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{monthly_budget:,.0f} ‚ÇΩ", size=18, color=ft.Colors.ORANGE),
                    ft.Text("—Å–≤–æ–±–æ–¥–Ω–æ", size=12, color=ft.Colors.GREY_600)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üìä –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {current_month_income:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
            ft.Text(f"‚Ä¢ –¢—Ä–∞—Ç—ã: {current_month_expenses:,.0f} ‚ÇΩ", size=14, color=ft.Colors.RED),
            ft.Text(f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —Ç—Ä–∞—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞: {expected_remaining_expenses:,.0f} ‚ÇΩ", size=14, color=ft.Colors.ORANGE),
            ft.Text(f"‚Ä¢ –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞: 25,000 ‚ÇΩ", size=14, color=ft.Colors.ORANGE),
            ft.Text(f"‚Ä¢ ChatGPT: {chatgpt_cost:,.0f} ‚ÇΩ", size=14, color=ft.Colors.PURPLE),
            ft.Text(f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: {available_money:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN if available_money >= 0 else ft.Colors.RED),
            
            ft.Divider(),
            
            ft.Text("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ù–∞ –µ–¥—É –≤ –¥–µ–Ω—å: {max(0, daily_budget * 0.4):,.0f} ‚ÇΩ", size=12, color=ft.Colors.GREEN if daily_budget >= 0 else ft.Colors.RED),
            ft.Text(f"‚Ä¢ –ù–∞ –∏–≥—Ä—ã –≤ –¥–µ–Ω—å: {max(0, daily_budget * 0.2):,.0f} ‚ÇΩ", size=12, color=ft.Colors.BLUE if daily_budget >= 0 else ft.Colors.RED),
            ft.Text(f"‚Ä¢ –ù–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –¥–µ–Ω—å: {max(0, daily_budget * 0.2):,.0f} ‚ÇΩ", size=12, color=ft.Colors.ORANGE if daily_budget >= 0 else ft.Colors.RED),
            ft.Text(f"‚Ä¢ –ù–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å: {max(0, daily_budget * 0.2):,.0f} ‚ÇΩ", size=12, color=ft.Colors.BLUE if daily_budget >= 0 else ft.Colors.RED)
        ], spacing=10)
    
    def create_my_games_analysis(self):
        # –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤—ã—Ö —Ç—Ä–∞—Ç
        game_transactions = [t for t in self.finance_app.data["transactions"] 
                           if t.get("category") == "games"]
        monthly_game_spending = sum(t["amount"] for t in game_transactions 
                                  if t["type"] == "expense" and t["date"].startswith(datetime.now().strftime("%Y-%m")))
        
        salary = self.finance_app.data["salary"]
        recommended_game_budget = salary * 0.05  # 5% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ –∏–≥—Ä—ã
        
        return ft.Column([
            ft.Text("üéÆ –ú–æ–∏ –∏–≥—Ä–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{monthly_game_spending:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED),
                    ft.Text("–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üéØ –õ–∏–º–∏—Ç", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{recommended_game_budget:,.0f} ‚ÇΩ", size=16, color=ft.Colors.GREEN),
                    ft.Text("—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üéÆ –ú–æ–∏ –∏–≥—Ä—ã:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞—é –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ (Steam Sale)", size=12),
            ft.Text("‚Ä¢ –õ–∏–º–∏—Ç –Ω–∞ –¥–æ–Ω–∞—Ç—ã: 1,000-2,000 ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text("‚Ä¢ –ò–Ω–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—é –∏–≥—Ä—É –∑–∞ 3,000 ‚ÇΩ", size=12),
            ft.Text("‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é Game Pass", size=12),
            
            ft.Divider(),
            
            ft.Text("üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ñ–¥–∏ —Å–∫–∏–¥–æ–∫ - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 70%", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫—ç—à–±—ç–∫ –æ—Ç –±–∞–Ω–∫–∞", size=12),
            ft.Text("‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞–π —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã", size=12),
            ft.Text("‚Ä¢ –ù–µ —Ç—Ä–∞—Ç—å –±–æ–ª—å—à–µ 5% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã", size=12)
        ], spacing=10)
    
    def create_my_food_analysis(self):
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –Ω–∞ –µ–¥—É
        food_transactions = [t for t in self.finance_app.data["transactions"] 
                           if t.get("category") in ["food", "restaurants"]]
        monthly_food_spending = sum(t["amount"] for t in food_transactions 
                                  if t["type"] == "expense" and t["date"].startswith(datetime.now().strftime("%Y-%m")))
        
        salary = self.finance_app.data["salary"]
        recommended_food_budget = salary * 0.15  # 15% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ –µ–¥—É
        
        return ft.Column([
            ft.Text("üçΩÔ∏è –ú–æ–∏ —Ç—Ä–∞—Ç—ã –Ω–∞ –µ–¥—É:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{monthly_food_spending:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED),
                    ft.Text("–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üéØ –õ–∏–º–∏—Ç", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{recommended_food_budget:,.0f} ‚ÇΩ", size=16, color=ft.Colors.GREEN),
                    ft.Text("—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üçΩÔ∏è –ú–æ—è –µ–¥–∞ —Å –¥–µ–≤—É—à–∫–æ–π:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ì–æ—Ç–æ–≤–∏–º –¥–æ–º–∞ - —ç–∫–æ–Ω–æ–º–∏–º –¥–µ–Ω—å–≥–∏", size=12),
            ft.Text("‚Ä¢ –•–æ–¥–∏–º –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", size=12),
            ft.Text("‚Ä¢ –í—ã–±–∏—Ä–∞–µ–º –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏", size=12),
            ft.Text("‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏–Ω–æ–≥–¥–∞", size=12),
            
            ft.Divider(),
            
            ft.Text("üí° –°–æ–≤–µ—Ç—ã –ø–æ –µ–¥–µ:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", size=12),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∞–∫—Ü–∏—è–º", size=12),
            ft.Text("‚Ä¢ –ì–æ—Ç–æ–≤—å –¥–æ–º–∞ —á–∞—â–µ - –¥–µ—à–µ–≤–ª–µ", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Å–∫–∏–¥–∫–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö", size=12)
        ], spacing=10)
    
    def create_my_purchases_analysis(self):
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
        electronics_transactions = [t for t in self.finance_app.data["transactions"] 
                                  if t.get("category") == "electronics"]
        monthly_electronics_spending = sum(t["amount"] for t in electronics_transactions 
                                         if t["type"] == "expense" and t["date"].startswith(datetime.now().strftime("%Y-%m")))
        
        salary = self.finance_app.data["salary"]
        recommended_electronics_budget = salary * 0.15  # 15% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É
        
        return ft.Column([
            ft.Text("üíª –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{monthly_electronics_spending:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED),
                    ft.Text("–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üéØ –õ–∏–º–∏—Ç", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{recommended_electronics_budget:,.0f} ‚ÇΩ", size=16, color=ft.Colors.GREEN),
                    ft.Text("—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üíª –ú–æ–∏ –ø–ª–∞–Ω—ã –ø–æ–∫—É–ø–æ–∫:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ù–æ–≤–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", size=12),
            ft.Text("‚Ä¢ –ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω - –∫–æ–≥–¥–∞ —Å—Ç–∞—Ä—ã–π —Å–ª–æ–º–∞–µ—Ç—Å—è", size=12),
            ft.Text("‚Ä¢ –ò–≥—Ä–æ–≤–∞—è –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è - –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏", size=12),
            ft.Text("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–ö - —Ä–∞–∑ –≤ 2-3 –≥–æ–¥–∞", size=12),
            
            ft.Divider(),
            
            ft.Text("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∫—É–ø–∫–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π –≤ –ø–µ—Ä–∏–æ–¥ —Å–∫–∏–¥–æ–∫ (–ß–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞)", size=12),
            ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏ –±/—É –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫—ç—à–±—ç–∫ –∫–∞—Ä—Ç—ã", size=12),
            ft.Text("‚Ä¢ –ö–æ–ø–∏ –¥–µ–Ω—å–≥–∏ –∑–∞—Ä–∞–Ω–µ–µ", size=12)
        ], spacing=10)
    
    def create_my_monthly_analysis(self):
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
        transactions = self.finance_app.data["transactions"]
        current_year = datetime.now().year
        
        monthly_data = {}
        for month in range(1, 13):
            month_str = f"{current_year}-{month:02d}"
            month_transactions = [t for t in transactions if t["date"].startswith(month_str)]
            
            income = sum(t["amount"] for t in month_transactions if t["type"] == "income")
            expenses = sum(t["amount"] for t in month_transactions if t["type"] == "expense")
            
            monthly_data[month] = {
                "income": income,
                "expenses": expenses,
                "balance": income - expenses
            }
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—è—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ç—Ä–∞—Ç–∞–º–∏
        max_expenses_month = max(monthly_data.keys(), key=lambda m: monthly_data[m]["expenses"])
        min_expenses_month = min(monthly_data.keys(), key=lambda m: monthly_data[m]["expenses"])
        
        return ft.Column([
            ft.Text("üìà –ú–æ–∏ —Ç—Ä–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ç–∏–ª –≤ {max_expenses_month} –º–µ—Å—è—Ü–µ: {monthly_data[max_expenses_month]['expenses']:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ú–µ–Ω—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ç–∏–ª –≤ {min_expenses_month} –º–µ—Å—è—Ü–µ: {monthly_data[min_expenses_month]['expenses']:,.0f} ‚ÇΩ", size=12),
            
            ft.Divider(),
            
            ft.Text("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞:", size=16, weight=ft.FontWeight.BOLD),
            *[ft.Text(f"‚Ä¢ {month} –º–µ—Å—è—Ü: –î–æ—Ö–æ–¥—ã {monthly_data[month]['income']:,.0f} ‚ÇΩ, –†–∞—Å—Ö–æ–¥—ã {monthly_data[month]['expenses']:,.0f} ‚ÇΩ", size=12) 
              for month in range(10, 13) if month in monthly_data],
            
            ft.Divider(),
            
            ft.Text("üí° –í—ã–≤–æ–¥—ã:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Ç—Ä–∞—Ç–∞–º–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü", size=12),
            ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π –±–æ–ª—å—à–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ", size=12),
            ft.Text("‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞–π –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É", size=12),
            ft.Text("‚Ä¢ –ù–µ —Ç—Ä–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å", size=12)
        ], spacing=10)
    
    def create_student_tips(self):
        return ft.Column([
            ft.Text("üë®‚Äçüéì –°–æ–≤–µ—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –£—á–∏—Å—å –∏ —Ä–∞–±–æ—Ç–∞–π - —ç—Ç–æ —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ", size=12),
            ft.Text("‚Ä¢ –ù–µ —Ç—Ä–∞—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏ —Å—Ä–∞–∑—É", size=12),
            ft.Text("‚Ä¢ –ö–æ–ø–∏ –Ω–∞ –≤–∞–∂–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —Å–∫–∏–¥–∫–∏", size=12),
            ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü", size=12),
            ft.Text("‚Ä¢ –ù–µ –±–µ—Ä–∏ –∫—Ä–µ–¥–∏—Ç—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏", size=12),
            ft.Text("‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ —Å–µ–±—è (–∫—É—Ä—Å—ã, –Ω–∞–≤—ã–∫–∏)", size=12),
            ft.Text("‚Ä¢ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω—å—é", size=12)
        ], spacing=5)
    
    def create_gift_analysis(self):
        birthdays = self.finance_app.data["birthdays"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_gifts = {}
        total_gift_cost = 0
        
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            
            cost = birthday["cost"]
            if month not in monthly_gifts:
                monthly_gifts[month] = []
            monthly_gifts[month].append(birthday)
            total_gift_cost += cost
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        relationship_costs = {}
        for birthday in birthdays:
            rel = birthday.get("relationship", "other")
            if rel not in relationship_costs:
                relationship_costs[rel] = {"count": 0, "total": 0}
            relationship_costs[rel]["count"] += 1
            relationship_costs[rel]["total"] += birthday["cost"]
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        monthly_savings = salary - monthly_expenses - chatgpt_cost
        gift_budget_ratio = total_gift_cost / salary if salary > 0 else 0
        
        return ft.Column([
            ft.Text("üéÅ –ú–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{total_gift_cost:,.0f} ‚ÇΩ", size=18, color=ft.Colors.RED),
                    ft.Text("–≤ –≥–æ–¥", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üìä –î–æ–ª—è –æ—Ç –¥–æ—Ö–æ–¥–∞", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{gift_budget_ratio*100:.1f}%", size=18, color=ft.Colors.BLUE),
                    ft.Text("–æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–†", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{len(birthdays)}", size=18, color=ft.Colors.GREEN),
                    ft.Text("—á–µ–ª–æ–≤–µ–∫", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üìÖ –ü–æ–¥–∞—Ä–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            *[ft.Text(f"‚Ä¢ {['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'][month]}: {sum(b['cost'] for b in gifts):,.0f} ‚ÇΩ", size=12) 
              for month, gifts in sorted(monthly_gifts.items())],
            
            ft.Divider(),
            
            ft.Text("üë• –ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º:", size=16, weight=ft.FontWeight.BOLD),
            *[ft.Text(f"‚Ä¢ {self.get_relationship_name(rel)}: {data['total']:,.0f} ‚ÇΩ ({data['count']} —á–µ–ª.)", size=12) 
              for rel, data in relationship_costs.items()],
            
            ft.Divider(),
            
            ft.Text("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ë—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏: {int(salary * 0.15):,.0f} ‚ÇΩ/–≥–æ–¥ (15% –æ—Ç –¥–æ—Ö–æ–¥–∞)", size=12),
            ft.Text(f"‚Ä¢ –¢–µ–∫—É—â–∏–µ —Ç—Ä–∞—Ç—ã: {total_gift_cost:,.0f} ‚ÇΩ/–≥–æ–¥", size=12, 
                   color=ft.Colors.GREEN if total_gift_cost <= salary * 0.15 else ft.Colors.RED),
            ft.Text(f"‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å: {int(salary * 0.15) - total_gift_cost:,.0f} ‚ÇΩ –µ—â–µ", size=12),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π –ø–æ–¥–∞—Ä–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏", size=12),
            ft.Text("‚Ä¢ –î–µ–ª–∞–π –ø–æ–¥–∞—Ä–∫–∏ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏ - –¥–µ—à–µ–≤–ª–µ", size=12),
            ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π –±—é–¥–∂–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –î–†", size=12)
        ], spacing=10)
    
    def get_relationship_name(self, relationship):
        names = {
            "–î–µ–≤—É—à–∫–∞": "–î–µ–≤—É—à–∫–∞",
            "–ú–∞–º–∞": "–ú–∞–º–∞", 
            "–ü–∞–ø–∞": "–ü–∞–ø–∞",
            "–ë–∞–±—É—à–∫–∞": "–ë–∞–±—É—à–∫–∞",
            "–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞": "–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞",
            "–î—Ä—É–≥": "–î—Ä—É–∑—å—è",
            "–ö–æ–ª–ª–µ–≥–∞": "–ö–æ–ª–ª–µ–≥–∏",
            "–î—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ"
        }
        return names.get(relationship, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    def convert_month_to_int(self, month_value):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–µ—Å—è—Ü –≤ —á–∏—Å–ª–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º)"""
        month_str = str(month_value)
        if month_str.isdigit():
            return int(month_str)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            month_names = ['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                          '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
            try:
                return month_names.index(month_str)
            except ValueError:
                return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–Ω–≤–∞—Ä—å
    
    def create_smart_savings_helper(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        safety_reserve = self.finance_app.data["safety_reserve"]
        
        # –†–∞—Å—á–µ—Ç—ã
        monthly_savings = salary - monthly_expenses - chatgpt_cost
        available_for_savings = current_money - safety_reserve
        
        # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        current_month = datetime.now().month
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        holiday_months = {
            1: {"name": "–Ø–Ω–≤–∞—Ä—å", "holiday": "", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            2: {"name": "–§–µ–≤—Ä–∞–ª—å", "holiday": "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "cost": 5000, "risk": "–°—Ä–µ–¥–Ω–∏–π", "advice": "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏"},
            3: {"name": "–ú–∞—Ä—Ç", "holiday": "8 –ú–∞—Ä—Ç–∞", "cost": 3000, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å"},
            4: {"name": "–ê–ø—Ä–µ–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            5: {"name": "–ú–∞–π", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            6: {"name": "–ò—é–Ω—å", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            7: {"name": "–ò—é–ª—å", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–õ—É—á—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            8: {"name": "–ê–≤–≥—É—Å—Ç", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–õ—É—á—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            9: {"name": "–°–µ–Ω—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            10: {"name": "–û–∫—Ç—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–•–æ—Ä–æ—à–∏–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            11: {"name": "–ù–æ—è–±—Ä—å", "holiday": "–ù–µ—Ç", "cost": 0, "risk": "–ù–∏–∑–∫–∏–π", "advice": "–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"},
            12: {"name": "–î–µ–∫–∞–±—Ä—å", "holiday": "–ù–æ–≤—ã–π –≥–æ–¥", "cost": 20000, "risk": "–í—ã—Å–æ–∫–∏–π", "advice": "–ù–µ –Ω–∞—á–∏–Ω–∞–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            
            if month in holiday_months:
                holiday_months[month]["holiday"] = f"–î–† {birthday['name']}"
                holiday_months[month]["cost"] += birthday["cost"]
                holiday_months[month]["risk"] = "–°—Ä–µ–¥–Ω–∏–π" if holiday_months[month]["cost"] > 5000 else "–ù–∏–∑–∫–∏–π"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        best_months = [month for month, data in holiday_months.items() if data["risk"] == "–ù–∏–∑–∫–∏–π" and data["cost"] == 0]
        good_months = [month for month, data in holiday_months.items() if data["risk"] == "–ù–∏–∑–∫–∏–π" and data["cost"] > 0]
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        if monthly_savings > 0:
            strategy = "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è" if monthly_savings > 10000 else "–£–º–µ—Ä–µ–Ω–Ω–∞—è" if monthly_savings > 5000 else "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è"
        else:
            strategy = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è - –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã"
        
        return ft.Column([
            ft.Text("üéØ –ú–æ–π –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∞ –ú–æ–≥—É –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{monthly_savings:,.0f} ‚ÇΩ/–º–µ—Å", size=18, color=ft.Colors.GREEN if monthly_savings > 0 else ft.Colors.RED),
                    ft.Text("–≤ –º–µ—Å—è—Ü", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(strategy, size=16, color=ft.Colors.BLUE),
                    ft.Text("–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üíé –î–æ—Å—Ç—É–ø–Ω–æ", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{available_for_savings:,.0f} ‚ÇΩ", size=18, color=ft.Colors.ORANGE),
                    ft.Text("—Å–µ–π—á–∞—Å", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üìÖ –õ—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("üü¢ –û—Ç–ª–∏—á–Ω—ã–µ –º–µ—Å—è—Ü—ã (–±–µ–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤):", size=14, color=ft.Colors.GREEN),
            ft.Text(f"‚Ä¢ {', '.join([holiday_months[m]['name'] for m in best_months])}", size=12),
            
            ft.Text("üü° –•–æ—Ä–æ—à–∏–µ –º–µ—Å—è—Ü—ã (–º–∞–ª—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏):", size=14, color=ft.Colors.ORANGE),
            ft.Text(f"‚Ä¢ {', '.join([holiday_months[m]['name'] for m in good_months])}", size=12),
            
            ft.Text("üî¥ –ò–∑–±–µ–≥–∞–π (–±–æ–ª—å—à–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏):", size=14, color=ft.Colors.RED),
            ft.Text("‚Ä¢ –î–µ–∫–∞–±—Ä—å (–ù–æ–≤—ã–π –≥–æ–¥)", size=12),
            
            ft.Divider(),
            
            ft.Text("üí° –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ù–∞—á–Ω–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ {holiday_months[current_month]['name']} - {holiday_months[current_month]['advice']}", size=12),
            ft.Text(f"‚Ä¢ –õ—É—á—à–∏–π –º–µ—Å—è—Ü –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {holiday_months[best_months[0]]['name'] if best_months else '–õ—é–±–æ–π'}", size=12),
            ft.Text(f"‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞–π {monthly_savings * 0.7:,.0f} ‚ÇΩ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü (70% –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ)", size=12),
            ft.Text(f"‚Ä¢ –û—Å—Ç–∞–≤—å {monthly_savings * 0.3:,.0f} ‚ÇΩ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", size=12),
            
            ft.Divider(),
            
            ft.Text("üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("1. –ù–∞—á–Ω–∏ —Å 1,000-2,000 ‚ÇΩ –≤ –º–µ—Å—è—Ü", size=12),
            ft.Text("2. –£–≤–µ–ª–∏—á–∏–≤–∞–π —Å—É–º–º—É –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞", size=12),
            ft.Text("3. –ò—Å–ø–æ–ª—å–∑—É–π –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥—ã –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç", size=12),
            ft.Text("4. –ù–µ —Ç—Ä–æ–≥–∞–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–µ–∑ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏", size=12),
            ft.Text("5. –ü–æ–∫—É–ø–∞–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –≤ –ø–µ—Ä–∏–æ–¥ —Å–∫–∏–¥–æ–∫ (–ß–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞)", size=12)
        ], spacing=10)
    
    def create_forecast_page(self):
        return ft.Column([
            ft.Text("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤–µ—Å—å –≥–æ–¥", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–µ—Å—è—Ü–∞–º", size=18, weight=ft.FontWeight.BOLD),
                        self.create_monthly_forecast()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üéÑ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_holidays_forecast()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üéØ –ú–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –≥–æ–¥", size=18, weight=ft.FontWeight.BOLD),
                        self.create_goals_forecast()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_calculator_page(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        self.calculator_display = ft.TextField(
            value="0",
            text_align=ft.TextAlign.RIGHT,
            read_only=True,
            width=300,
            height=60,
            text_size=24
        )
        self.calculator_expression = ""
        self.calculator_result = None
        
        return ft.Column([
            ft.Text("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üî¢ –û–±—ã—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", size=18, weight=ft.FontWeight.BOLD),
                        self.create_basic_calculator()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_financial_calculator()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_notes_page(self):
        return ft.Column([
            ft.Text("üìù –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", size=18, weight=ft.FontWeight.BOLD),
                        self.create_note_input()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_notes_list()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí° –®–∞–±–ª–æ–Ω—ã –∑–∞–º–µ—Ç–æ–∫", size=18, weight=ft.FontWeight.BOLD),
                        self.create_note_templates()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def get_salary_status(self):
        current_day = datetime.now().day
        current_month = datetime.now().month
        current_year = 2025
        current_year = datetime.now().year
        salary_dates = self.finance_app.data["salary_dates"]
        salary = self.finance_app.data["salary"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        import calendar
        days_in_month = calendar.monthrange(current_year, current_month)[1]
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        if current_day >= days_in_month - 2:
            return ft.Text(f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞—Ä–ø–ª–∞—Ç—ã: ‚úÖ –ú–µ—Å—è—Ü –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è - –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–æ ({salary:,.0f} ‚ÇΩ)", 
                          size=12, color=ft.Colors.GREEN)
        elif current_day >= salary_dates[1]:  # –ü–æ—Å–ª–µ 22 —á–∏—Å–ª–∞
            return ft.Text(f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞—Ä–ø–ª–∞—Ç—ã: ‚úÖ –û–±–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã ({salary:,.0f} ‚ÇΩ)", 
                          size=12, color=ft.Colors.GREEN)
        elif current_day >= salary_dates[0]:  # –ú–µ–∂–¥—É 8 –∏ 22 —á–∏—Å–ª–æ–º
            return ft.Text(f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞—Ä–ø–ª–∞—Ç—ã: ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ 1/2 –∑–∞—Ä–ø–ª–∞—Ç—ã ({salary/2:,.0f} ‚ÇΩ –∏–∑ {salary:,.0f} ‚ÇΩ)", 
                          size=12, color=ft.Colors.ORANGE)
        else:  # –î–æ 8 —á–∏—Å–ª–∞
            return ft.Text(f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞—Ä–ø–ª–∞—Ç—ã: ‚ùå –ó–∞—Ä–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞", 
                          size=12, color=ft.Colors.RED)
    
    def create_monthly_forecast(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        rent_paid_until = self.finance_app.data.get("rent_paid_until", "")
        rent_cost = self.finance_app.data.get("rent_cost", 25000)  # –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ 25,000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month = datetime.now().month
        current_year = 2025  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 2025 –≥–æ–¥
        
        def should_pay_rent(month, year):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ"""
            if not rent_paid_until:
                return True  # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–ª–∞—Ç–∏–º –≤—Å–µ–≥–¥–∞
            
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É "–¥–æ –∫–æ—Ç–æ—Ä–æ–π —É–ø–ª–∞—á–µ–Ω–∞ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞"
                paid_until = datetime.strptime(rent_paid_until, "%Y-%m-%d")
                # –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞ –ø–ª–∞—Ç–∏—Ç—Å—è 10 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
                target_date = datetime(year, month, 10)
                
                # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –º–µ—Å—è—Ü —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã —É–ø–ª–∞—Ç—ã, –ù–ï –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å
                # –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞ —É–ø–ª–∞—á–µ–Ω–∞ –¥–æ 2025-10-10,
                # —Ç–æ –≤ –æ–∫—Ç—è–±—Ä–µ 2025 (2025-10-10) –ø–ª–∞—Ç–∏—Ç—å –ù–ï –Ω—É–∂–Ω–æ
                should_pay = target_date >= paid_until
                return should_pay
            except:
                return True  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –ø–ª–∞—Ç–∏–º –≤—Å–µ–≥–¥–∞
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
        holidays = {
            1: {"name": "", "cost": 0, "description": ""},
            2: {"name": "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "cost": 5000, "description": "–ü–æ–¥–∞—Ä–æ–∫ –¥–µ–≤—É—à–∫–µ, —É–∂–∏–Ω"},
            3: {"name": "8 –ú–∞—Ä—Ç–∞", "cost": 3000, "description": "–ü–æ–¥–∞—Ä–æ–∫ –º–∞–º–µ –∏ –¥–µ–≤—É—à–∫–µ"},
            12: {"name": "–ù–æ–≤—ã–π –≥–æ–¥", "cost": 20000, "description": "–ü–æ–¥–∞—Ä–∫–∏, –µ–¥–∞, –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ"}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            month = self.convert_month_to_int(birthday["month"])
            
            if month not in holidays:
                holidays[month] = {"name": f"–î–† {birthday['name']}", "cost": birthday["cost"], "description": f"–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {birthday['name']}"}
            else:
                holidays[month]["cost"] += birthday["cost"]
                holidays[month]["name"] += f" + –î–† {birthday['name']}"
        
        monthly_forecast = []
        balance = current_money
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –∏–¥–µ–º 12 –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥
        for i in range(12):
            month = ((current_month - 1 + i) % 12) + 1
            forecast_year = current_year + ((current_month - 1 + i) // 12)
            month_name = ["", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                         "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"][month]
            month_name_with_year = f"{month_name} {forecast_year}"
            
            # –î–æ—Ö–æ–¥—ã - 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü (8 –∏ 22 —á–∏—Å–ª–∞)
            salary_dates = self.finance_app.data["salary_dates"]
            half_salary = salary / 2
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
            if i == 0:  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                current_day = datetime.now().day
                current_month = datetime.now().month
                current_year = datetime.now().year
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –º–µ—Å—è—Ü –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
                forecast_month = ((current_month - 1 + i) % 12) + 1
                forecast_year = current_year + ((current_month - 1 + i) // 12)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                if forecast_month == current_month and forecast_year == current_year:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                    import calendar
                    days_in_month = calendar.monthrange(current_year, current_month)[1]
                    
                    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É
                    if current_day >= days_in_month - 2:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è –º–µ—Å—è—Ü–∞
                        income = 0  # –ó–∞—Ä–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
                        # –†–∞—Å—Ö–æ–¥—ã —Ç–æ–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –º–µ—Å—è—Ü –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
                        holiday_cost = holidays.get(month, {}).get("cost", 0)
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                        forecast_year = current_year + ((current_month - 1 + i) // 12)
                        rent_for_month = rent_cost if should_pay_rent(month, forecast_year) else 0
                        expenses = chatgpt_cost + holiday_cost + rent_for_month
                    elif current_day >= salary_dates[1]:  # –£–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –æ–±–µ –∑–∞—Ä–ø–ª–∞—Ç—ã (–ø–æ—Å–ª–µ 22 —á–∏—Å–ª–∞)
                        income = 0
                    elif current_day >= salary_dates[0]:  # –ü–æ–ª—É—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (8-21 —á–∏—Å–ª–æ)
                        income = half_salary
                    else:  # –ù–µ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ (–¥–æ 8 —á–∏—Å–ª–∞)
                        income = salary
                else:
                    income = salary
            else:  # –ë—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã
                income = salary
            
            # –†–∞—Å—Ö–æ–¥—ã
            expenses = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            holiday_cost = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if i == 0:  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                current_day = datetime.now().day
                current_month = datetime.now().month
                current_year = datetime.now().year
                forecast_month = ((current_month - 1 + i) % 12) + 1
                forecast_year = current_year + ((current_month - 1 + i) // 12)
                
                if forecast_month == current_month and forecast_year == current_year:
                    import calendar
                    days_in_month = calendar.monthrange(current_year, current_month)[1]
                    
                    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
                    if current_day >= days_in_month - 2:
                        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã - —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
                        holiday_cost = holidays.get(month, {}).get("cost", 0)
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                        forecast_year = current_year + ((current_month - 1 + i) // 12)
                        rent_for_month = rent_cost if should_pay_rent(month, forecast_year) else 0
                        expenses = chatgpt_cost + holiday_cost + rent_for_month
                        total_expenses = expenses
                    else:
                        # –û–±—ã—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
                        remaining_days = days_in_month - current_day + 1
                        daily_expenses = monthly_expenses / days_in_month
                        expected_remaining_expenses = daily_expenses * remaining_days
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                        current_month_expenses = self.get_current_month_expenses()
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                        forecast_year = current_year + ((current_month - 1 + i) // 12)
                        rent_for_month = rent_cost if should_pay_rent(month, forecast_year) else 0
                        expenses = current_month_expenses + expected_remaining_expenses + chatgpt_cost + rent_for_month
                        holiday_cost = holidays.get(month, {}).get("cost", 0)
                        total_expenses = expenses + holiday_cost
                else:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                    forecast_year = current_year + ((current_month - 1 + i) // 12)
                    rent_for_month = rent_cost if should_pay_rent(month, forecast_year) else 0
                    expenses = monthly_expenses + chatgpt_cost + rent_for_month
                    holiday_cost = holidays.get(month, {}).get("cost", 0)
                    total_expenses = expenses + holiday_cost
            else:  # –ë—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞—Ç–∏—Ç—å –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                forecast_year = current_year + ((current_month - 1 + i) // 12)
                rent_for_month = rent_cost if should_pay_rent(month, forecast_year) else 0
                holiday_cost = holidays.get(month, {}).get("cost", 0)
                expenses = monthly_expenses + chatgpt_cost + rent_for_month
                total_expenses = expenses + holiday_cost
            
            # –ë–∞–ª–∞–Ω—Å
            balance += income - total_expenses
            
            monthly_forecast.append({
                "month": month_name_with_year,
                "income": income,
                "expenses": total_expenses,
                "holiday_cost": holiday_cost,
                "balance": balance,
                "holiday": holidays.get(month, {}).get("name", "")
            })
        
        return ft.Column([
            ft.Text("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–µ—Å—è—Ü–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∞ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏):", size=14, weight=ft.FontWeight.BOLD),
                        ft.Text(f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_money:,.0f} ‚ÇΩ", size=12),
                        ft.Text(f"‚Ä¢ –û–∫–ª–∞–¥: {salary:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü (2 —Ä–∞–∑–∞: {salary/2:,.0f} ‚ÇΩ)", size=12),
                        ft.Text(f"‚Ä¢ –î–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã: {self.finance_app.data['salary_dates'][0]} –∏ {self.finance_app.data['salary_dates'][1]} —á–∏—Å–ª–æ", size=12),
                        ft.Text(f"‚Ä¢ –¢—Ä–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {self.get_current_month_expenses():,.0f} ‚ÇΩ", size=12, color=ft.Colors.RED),
                        ft.Text(f"‚Ä¢ –î–æ—Ö–æ–¥—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {self.get_current_month_income():,.0f} ‚ÇΩ", size=12, color=ft.Colors.GREEN),
                        ft.Text(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü", size=12),
                        ft.Text(f"‚Ä¢ –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞: {rent_cost:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü", size=12, color=ft.Colors.ORANGE),
                        ft.Text(f"‚Ä¢ –£–ø–ª–∞—á–µ–Ω–∞ –¥–æ: {rent_paid_until if rent_paid_until else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}", size=12, color=ft.Colors.BLUE),
                        ft.Text(f"‚Ä¢ ChatGPT Plus: {chatgpt_cost:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü", size=12),
                        ft.Text(f"‚Ä¢ –†–µ–∑–µ—Ä–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_reserve:,.0f} ‚ÇΩ", size=12),
                        ft.Text(f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d %B %Y')}", size=12, weight=ft.FontWeight.BOLD),
                        self.get_salary_status(),
                        ft.Text(f"‚Ä¢ –ù–∞—á–∏–Ω–∞–µ–º —Å: {['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'][current_month]}", size=12, weight=ft.FontWeight.BOLD)
                    ], spacing=5),
                    padding=15
                )
            ),
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            ft.Container(
                content=ft.Row([
                    ft.Text("–ú–µ—Å—è—Ü", size=14, weight=ft.FontWeight.BOLD, expand=2),
                    ft.Text("–î–æ—Ö–æ–¥—ã", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text("–†–∞—Å—Ö–æ–¥—ã", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text("–ü—Ä–∞–∑–¥–Ω–∏–∫–∏", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text("–ë–∞–ª–∞–Ω—Å", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text("–°—Ç–∞—Ç—É—Å", size=14, weight=ft.FontWeight.BOLD, expand=1, text_align=ft.TextAlign.CENTER),
                    ft.Text("–î–µ—Ç–∞–ª–∏", size=14, weight=ft.FontWeight.BOLD, expand=2, text_align=ft.TextAlign.CENTER)
                ]),
                bgcolor=ft.Colors.BLUE_50,
                padding=12,
                border=ft.border.all(1, ft.Colors.BLUE_200)
            ),
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            ft.Column([
                ft.Container(
                    content=ft.Row([
                        # –ú–µ—Å—è—Ü –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
                        ft.Column([
                            ft.Text(f"{forecast['month']}", size=13, weight=ft.FontWeight.BOLD),
                            ft.Text(f"{forecast['holiday']}", size=10, color=ft.Colors.PURPLE) if forecast['holiday'] else ft.Text("–ù–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤", size=10, color=ft.Colors.GREY_600)
                        ], expand=2),
                        
                        # –î–æ—Ö–æ–¥—ã
                        ft.Column([
                            ft.Text(f"{forecast['income']:,.0f} ‚ÇΩ", size=12, color=ft.Colors.GREEN, text_align=ft.TextAlign.CENTER),
                            ft.Text("2 –∑–∞—Ä–ø–ª–∞—Ç—ã", size=9, color=ft.Colors.GREY_600, text_align=ft.TextAlign.CENTER) if forecast['income'] > 0 else ft.Text("–ù–µ—Ç", size=9, color=ft.Colors.GREY_600, text_align=ft.TextAlign.CENTER)
                        ], expand=1, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        
                        # –†–∞—Å—Ö–æ–¥—ã
                        ft.Column([
                            ft.Text(f"{forecast['expenses']:,.0f} ‚ÇΩ", size=12, color=ft.Colors.RED, text_align=ft.TextAlign.CENTER),
                            ft.Text("–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã", size=9, color=ft.Colors.GREY_600, text_align=ft.TextAlign.CENTER)
                        ], expand=1, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        
                        # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
                        ft.Column([
                            ft.Text(f"{forecast['holiday_cost']:,.0f} ‚ÇΩ" if forecast['holiday_cost'] > 0 else "‚Äî", 
                                   size=12, color=ft.Colors.PURPLE, text_align=ft.TextAlign.CENTER),
                            ft.Text("–ü–æ–¥–∞—Ä–∫–∏", size=9, color=ft.Colors.GREY_600, text_align=ft.TextAlign.CENTER) if forecast['holiday_cost'] > 0 else ft.Text("", size=9, text_align=ft.TextAlign.CENTER)
                        ], expand=1, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        
                        # –ë–∞–ª–∞–Ω—Å
                        ft.Column([
                            ft.Text(f"{forecast['balance']:,.0f} ‚ÇΩ", size=12, 
                                   color=ft.Colors.GREEN if forecast['balance'] > safety_reserve else ft.Colors.RED, 
                                   text_align=ft.TextAlign.CENTER),
                            ft.Text(f"–†–µ–∑–µ—Ä–≤: {safety_reserve:,.0f}", size=9, color=ft.Colors.GREY_600, text_align=ft.TextAlign.CENTER)
                        ], expand=1, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        
                        # –°—Ç–∞—Ç—É—Å
                        ft.Column([
                            ft.Text("‚úÖ –û—Ç–ª–∏—á–Ω–æ" if forecast['balance'] > safety_reserve * 1.5 else 
                                   "üëç –•–æ—Ä–æ—à–æ" if forecast['balance'] > safety_reserve else 
                                   "‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ" if forecast['balance'] > 0 else "‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ", 
                                   size=11, 
                                   color=ft.Colors.GREEN if forecast['balance'] > safety_reserve else 
                                         ft.Colors.ORANGE if forecast['balance'] > 0 else ft.Colors.RED,
                                   text_align=ft.TextAlign.CENTER),
                            ft.Text(f"–°–≤–æ–±–æ–¥–Ω–æ: {forecast['balance'] - safety_reserve:,.0f}" if forecast['balance'] > safety_reserve else 
                                   f"–î–µ—Ñ–∏—Ü–∏—Ç: {safety_reserve - forecast['balance']:,.0f}", 
                                   size=9, color=ft.Colors.GREY_600, text_align=ft.TextAlign.CENTER)
                        ], expand=1, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        
                        # –î–µ—Ç–∞–ª–∏
                        ft.Column([
                            ft.Text(f"–î–æ—Ö–æ–¥: {forecast['income']:,.0f}", size=10, color=ft.Colors.GREEN, text_align=ft.TextAlign.CENTER),
                            ft.Text(f"–†–∞—Å—Ö–æ–¥: {forecast['expenses']:,.0f}", size=10, color=ft.Colors.RED, text_align=ft.TextAlign.CENTER),
                            ft.Text(f"–ü—Ä–∞–∑–¥–Ω–∏–∫: {forecast['holiday_cost']:,.0f}", size=10, color=ft.Colors.PURPLE, text_align=ft.TextAlign.CENTER) if forecast['holiday_cost'] > 0 else ft.Text("", size=10, text_align=ft.TextAlign.CENTER),
                            ft.Text(f"–ò—Ç–æ–≥–æ: {forecast['income'] - forecast['expenses']:,.0f}", size=10, 
                                   color=ft.Colors.GREEN if forecast['income'] - forecast['expenses'] > 0 else ft.Colors.RED, text_align=ft.TextAlign.CENTER)
                        ], expand=2, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
                    ]),
                    bgcolor=ft.Colors.WHITE if i % 2 == 0 else ft.Colors.GREY_50,
                    padding=12,
                    border=ft.border.all(0.5, ft.Colors.GREY_300)
                ) for i, forecast in enumerate(monthly_forecast)
            ], spacing=1),
            
            ft.Divider(),
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ft.Container(
                content=ft.Column([
                    ft.Text("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:", size=16, weight=ft.FontWeight.BOLD),
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –º–µ—Å—è—Ü—ã
                    ft.Row([
                        ft.Column([
                            ft.Text("üèÜ –õ—É—á—à–∏–π –º–µ—Å—è—Ü:", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN),
                            ft.Text(f"{max(monthly_forecast, key=lambda x: x['balance'])['month']}", size=12, color=ft.Colors.GREEN),
                            ft.Text(f"–ë–∞–ª–∞–Ω—Å: {max(monthly_forecast, key=lambda x: x['balance'])['balance']:,.0f} ‚ÇΩ", size=11, color=ft.Colors.GREEN)
                        ], expand=1),
                        
                        ft.Column([
                            ft.Text("‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–π –º–µ—Å—è—Ü:", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.RED),
                            ft.Text(f"{min(monthly_forecast, key=lambda x: x['balance'])['month']}", size=12, color=ft.Colors.RED),
                            ft.Text(f"–ë–∞–ª–∞–Ω—Å: {min(monthly_forecast, key=lambda x: x['balance'])['balance']:,.0f} ‚ÇΩ", size=11, color=ft.Colors.RED)
                        ], expand=1)
                    ], spacing=20),
                    
                    ft.Divider(),
                    
                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    ft.Text("üí∞ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥:", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {sum(f['income'] for f in monthly_forecast):,.0f} ‚ÇΩ", size=12, color=ft.Colors.GREEN),
                    ft.Text(f"‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {sum(f['expenses'] for f in monthly_forecast):,.0f} ‚ÇΩ", size=12, color=ft.Colors.RED),
                    ft.Text(f"‚Ä¢ –ù–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {sum(f['holiday_cost'] for f in monthly_forecast):,.0f} ‚ÇΩ", size=12, color=ft.Colors.PURPLE),
                    ft.Text(f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {monthly_forecast[-1]['balance']:,.0f} ‚ÇΩ", size=12, 
                           color=ft.Colors.GREEN if monthly_forecast[-1]['balance'] > safety_reserve else ft.Colors.RED),
                    ft.Text(f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–µ–Ω–µ–≥: {monthly_forecast[-1]['balance'] - safety_reserve:,.0f} ‚ÇΩ", size=12, 
                           color=ft.Colors.BLUE if monthly_forecast[-1]['balance'] > safety_reserve else ft.Colors.ORANGE),
                    
                    ft.Divider(),
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    ft.Text("üí° –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text("‚Ä¢ –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –º–µ—Å—è—Ü: –¥–µ–∫–∞–±—Ä—å (–ù–æ–≤—ã–π –≥–æ–¥)", size=12),
                    ft.Text("‚Ä¢ –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –º–µ—Å—è—Ü—ã: –ª–µ—Ç–Ω–∏–µ", size=12),
                    ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π –ø–æ–¥–∞—Ä–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ", size=12),
                    ft.Text("‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞–π –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏", size=12),
                    ft.Text("‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Ä–µ–∑–µ—Ä–≤–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", size=12),
                    ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏", size=12)
                ], spacing=8),
                padding=15,
                bgcolor=ft.Colors.LIGHT_BLUE_50,
                border_radius=8,
                border=ft.border.all(1, ft.Colors.BLUE_200)
            )
        ], spacing=5)
    
    def create_holidays_forecast(self):
        holidays = {
            "–ù–æ–≤—ã–π –≥–æ–¥": {"cost": 20000, "description": "–ü–æ–¥–∞—Ä–∫–∏ —Å–µ–º—å–µ –∏ –¥—Ä—É–∑—å—è–º, –µ–¥–∞, –∞–ª–∫–æ–≥–æ–ª—å, —É–∫—Ä–∞—à–µ–Ω–∏—è"},
            "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞": {"cost": 5000, "description": "–ü–æ–¥–∞—Ä–æ–∫ –¥–µ–≤—É—à–∫–µ, —É–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, —Ü–≤–µ—Ç—ã"},
            "8 –ú–∞—Ä—Ç–∞": {"cost": 3000, "description": "–ü–æ–¥–∞—Ä–∫–∏ –º–∞–º–µ –∏ –¥–µ–≤—É—à–∫–µ, —Ü–≤–µ—Ç—ã"}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdays = self.finance_app.data["birthdays"]
        for birthday in birthdays:
            holidays[f"–î–† {birthday['name']}"] = {
                "cost": birthday["cost"], 
                "description": f"–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {birthday['name']}"
            }
        
        total_holiday_cost = sum(holiday["cost"] for holiday in holidays.values())
        
        return ft.Column([
            ft.Text("üéÑ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {total_holiday_cost:,.0f} ‚ÇΩ", size=14, color=ft.Colors.RED),
            
            ft.Divider(),
            
            *[ft.Column([
                ft.Text(f"üéâ {holiday_name}", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {holiday_data['cost']:,.0f} ‚ÇΩ", size=12, color=ft.Colors.RED),
                ft.Text(f"–ù–∞ —á—Ç–æ: {holiday_data['description']}", size=10, color=ft.Colors.GREY_600)
            ], spacing=5) for holiday_name, holiday_data in holidays.items()],
            
            ft.Divider(),
            
            ft.Text("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π –ø–æ–¥–∞—Ä–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏", size=12),
            ft.Text("‚Ä¢ –î–µ–ª–∞–π –ø–æ–¥–∞—Ä–∫–∏ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏", size=12),
            ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π –±—é–¥–∂–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫", size=12),
            ft.Text("‚Ä¢ –ù–µ —Ç—Ä–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –º–æ–∂–µ—à—å", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏", size=12)
        ], spacing=10)
    
    def create_goals_forecast(self):
        goals = self.finance_app.data["goals"]
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        chatgpt_cost = 3000 if self.finance_app.data["chatgpt_enabled"] else 0
        
        monthly_savings = salary - monthly_expenses - chatgpt_cost
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
        sept_balance = current_money - chatgpt_cost
        oct_balance = sept_balance + salary - monthly_expenses - chatgpt_cost
        nov_balance = oct_balance + salary - monthly_expenses - chatgpt_cost - 25000
        
        return ft.Column([
            ft.Text("üìä –ö–∞–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã –∏ –±–∞–ª–∞–Ω—Å:", size=16, weight=ft.FontWeight.BOLD),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∞ –î–û–•–û–î–´", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.GREEN),
                        ft.Text(f"‚Ä¢ –û–∫–ª–∞–¥: {salary:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü", size=12),
                        ft.Text("‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü:", size=12),
                        ft.Text(f"  - {self.finance_app.data['salary_dates'][0]} —á–∏—Å–ª–æ: {salary/2:,.0f} ‚ÇΩ", size=11, color=ft.Colors.GREEN),
                        ft.Text(f"  - {self.finance_app.data['salary_dates'][1]} —á–∏—Å–ª–æ: {salary/2:,.0f} ‚ÇΩ", size=11, color=ft.Colors.GREEN),
                        ft.Text("‚Ä¢ –í —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", size=11, color=ft.Colors.BLUE),
                        ft.Text("‚Ä¢ –í –±—É–¥—É—â–∏—Ö –º–µ—Å—è—Ü–∞—Ö - –ø–æ–ª–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", size=11, color=ft.Colors.BLUE),
                    ], spacing=3),
                    padding=15
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∏ –†–ê–°–•–û–î–´", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.RED),
                        ft.Text(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü", size=12),
                        ft.Text("  (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 10,000 ‚ÇΩ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)", size=10, color=ft.Colors.GREY_600),
                        ft.Text(f"‚Ä¢ ChatGPT Plus: {chatgpt_cost:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü", size=12, color=ft.Colors.ORANGE),
                        ft.Text("‚Ä¢ –ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞: 25,000 ‚ÇΩ/–º–µ—Å—è—Ü (–ø–ª–∞—Ç–∏—Ç—Å—è 10 —á–∏—Å–ª–∞)", size=12, color=ft.Colors.ORANGE),
                        ft.Text("‚Ä¢ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –î–†: –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", size=12, color=ft.Colors.PURPLE),
                        ft.Text("", size=8),
                        ft.Text("üìÖ –õ–æ–≥–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:", size=11, weight=ft.FontWeight.BOLD),
                        ft.Text("‚Ä¢ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: —Ä–µ–∞–ª—å–Ω—ã–µ + –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", size=10, color=ft.Colors.BLUE),
                        ft.Text("‚Ä¢ –ë—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã: —Å—Ä–µ–¥–Ω–∏–µ + —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", size=10, color=ft.Colors.BLUE),
                    ], spacing=3),
                    padding=15
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí≥ –ë–ê–õ–ê–ù–°", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE),
                        ft.Text("‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: —Ç–µ–∫—É—â–∏–µ –¥–µ–Ω—å–≥–∏", size=12),
                        ft.Text("‚Ä¢ –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü: –ë–∞–ª–∞–Ω—Å + –î–æ—Ö–æ–¥—ã - –†–∞—Å—Ö–æ–¥—ã", size=12),
                        ft.Text("‚Ä¢ –§–æ—Ä–º—É–ª–∞: –ù–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å = –°—Ç–∞—Ä—ã–π_–±–∞–ª–∞–Ω—Å + –ó–∞—Ä–ø–ª–∞—Ç–∞ - –í—Å–µ_—Ä–∞—Å—Ö–æ–¥—ã", size=11, color=ft.Colors.GREY_600),
                        ft.Text("", size=8),
                        ft.Text("üéØ –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞:", size=11, weight=ft.FontWeight.BOLD),
                        ft.Text(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {current_money:,.0f} ‚ÇΩ", size=10, color=ft.Colors.GREEN),
                        ft.Text("", size=5),
                        ft.Text("üìÖ –°–µ–Ω—Ç—è–±—Ä—å 2025 (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü):", size=10, weight=ft.FontWeight.BOLD),
                        ft.Text(f"  –î–æ—Ö–æ–¥—ã: 0 ‚ÇΩ (–∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞)", size=9, color=ft.Colors.GREEN),
                        ft.Text(f"  –†–∞—Å—Ö–æ–¥—ã: {chatgpt_cost:,.0f} ‚ÇΩ (ChatGPT)", size=9, color=ft.Colors.RED),
                        ft.Text(f"  –ë–∞–ª–∞–Ω—Å: {current_money:,.0f} - {chatgpt_cost:,.0f} = {sept_balance:,.0f} ‚ÇΩ", size=9),
                        ft.Text("", size=5),
                        ft.Text("üìÖ –û–∫—Ç—è–±—Ä—å 2025:", size=10, weight=ft.FontWeight.BOLD),
                        ft.Text(f"  –î–æ—Ö–æ–¥—ã: {salary:,.0f} ‚ÇΩ (–∑–∞—Ä–ø–ª–∞—Ç–∞)", size=9, color=ft.Colors.GREEN),
                        ft.Text(f"  –†–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} + {chatgpt_cost:,.0f} = {monthly_expenses + chatgpt_cost:,.0f} ‚ÇΩ", size=9, color=ft.Colors.RED),
                        ft.Text(f"  –ë–∞–ª–∞–Ω—Å: {sept_balance:,.0f} + {salary:,.0f} - {monthly_expenses + chatgpt_cost:,.0f} = {oct_balance:,.0f} ‚ÇΩ", size=9),
                        ft.Text("", size=5),
                        ft.Text("üìÖ –ù–æ—è–±—Ä—å 2025:", size=10, weight=ft.FontWeight.BOLD),
                        ft.Text(f"  –î–æ—Ö–æ–¥—ã: {salary:,.0f} ‚ÇΩ (–∑–∞—Ä–ø–ª–∞—Ç–∞)", size=9, color=ft.Colors.GREEN),
                        ft.Text(f"  –†–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} + {chatgpt_cost:,.0f} + 25,000 = {monthly_expenses + chatgpt_cost + 25000:,.0f} ‚ÇΩ", size=9, color=ft.Colors.RED),
                        ft.Text(f"  –ë–∞–ª–∞–Ω—Å: {oct_balance:,.0f} + {salary:,.0f} - {monthly_expenses + chatgpt_cost + 25000:,.0f} = {nov_balance:,.0f} ‚ÇΩ", size=9),
                    ], spacing=3),
                    padding=15
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.PURPLE),
                        ft.Text("‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚Üí —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è", size=11, color=ft.Colors.BLUE),
                        ft.Text("‚Ä¢ –ú–µ–Ω—è–µ—Ç–µ –æ–∫–ª–∞–¥ ‚Üí –≤—Å–µ –¥–æ—Ö–æ–¥—ã –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è", size=11, color=ft.Colors.BLUE),
                        ft.Text("‚Ä¢ –ú–µ–Ω—è–µ—Ç–µ –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç—É ‚Üí –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è", size=11, color=ft.Colors.BLUE),
                        ft.Text("‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç–µ –î–† ‚Üí –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è", size=11, color=ft.Colors.BLUE),
                        ft.Text("‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ", size=11, color=ft.Colors.GREEN),
                        ft.Text("", size=5),
                        ft.Text("üìä –õ–æ–≥–∏–∫–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤:", size=11, weight=ft.FontWeight.BOLD),
                        ft.Text("‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: 10,000 ‚ÇΩ/–º–µ—Å—è—Ü", size=10, color=ft.Colors.ORANGE),
                        ft.Text("‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", size=10, color=ft.Colors.GREEN),
                        ft.Text("‚Ä¢ –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", size=10, color=ft.Colors.BLUE),
                    ], spacing=3),
                    padding=15
                )
            )
        ], spacing=10)
    
    def create_daily_budget_analysis(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        rent = self.finance_app.data["rent"]
        goal_investments = sum(self.finance_app.data["goal_investments"].values())
        
        # –†–∞—Å—á–µ—Ç—ã –±—é–¥–∂–µ—Ç–∞
        available_money = current_money - safety_reserve - goal_investments
        monthly_income = salary
        monthly_savings = monthly_income - monthly_expenses - rent
        
        # –ë—é–¥–∂–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        daily_budget = available_money / 30
        weekly_budget = available_money / 4.3
        monthly_budget = available_money
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±—é–¥–∂–µ—Ç—ã (–ø—Ä–∞–≤–∏–ª–æ 50/30/20)
        needs_budget = monthly_income * 0.5  # 50% –Ω–∞ –Ω—É–∂–¥—ã
        wants_budget = monthly_income * 0.3  # 30% –Ω–∞ –∂–µ–ª–∞–Ω–∏—è
        savings_budget = monthly_income * 0.2  # 20% –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        current_needs = monthly_expenses + rent
        current_wants = monthly_income - current_needs - (monthly_income - monthly_expenses - rent)
        current_savings = monthly_income - monthly_expenses - rent
        
        return ft.Column([
            ft.Text("üìä –í–∞—à —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∞ –í –¥–µ–Ω—å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{daily_budget:,.0f} ‚ÇΩ", size=18, color=ft.Colors.GREEN),
                    ft.Text("–¥–æ—Å—Ç—É–ø–Ω–æ", size=12, color=ft.Colors.GREY_600)
                ], expand=True),
                ft.Column([
                    ft.Text("üìÖ –í –Ω–µ–¥–µ–ª—é", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{weekly_budget:,.0f} ‚ÇΩ", size=18, color=ft.Colors.BLUE),
                    ft.Text("–¥–æ—Å—Ç—É–ø–Ω–æ", size=12, color=ft.Colors.GREY_600)
                ], expand=True),
                ft.Column([
                    ft.Text("üìÜ –í –º–µ—Å—è—Ü", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{monthly_budget:,.0f} ‚ÇΩ", size=18, color=ft.Colors.ORANGE),
                    ft.Text("–¥–æ—Å—Ç—É–ø–Ω–æ", size=12, color=ft.Colors.GREY_600)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–ø—Ä–∞–≤–∏–ª–æ 50/30/20):", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üè† –ù—É–∂–¥—ã (50%)", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{needs_budget:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED),
                    ft.Text(f"–¢–µ–∫—É—â–∏–µ: {current_needs:,.0f} ‚ÇΩ", size=12, 
                           color=ft.Colors.GREEN if current_needs <= needs_budget else ft.Colors.RED)
                ], expand=True),
                ft.Column([
                    ft.Text("üéÆ –ñ–µ–ª–∞–Ω–∏—è (30%)", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{wants_budget:,.0f} ‚ÇΩ", size=16, color=ft.Colors.PURPLE),
                    ft.Text(f"–¢–µ–∫—É—â–∏–µ: {current_wants:,.0f} ‚ÇΩ", size=12, 
                           color=ft.Colors.GREEN if current_wants <= wants_budget else ft.Colors.RED)
                ], expand=True),
                ft.Column([
                    ft.Text("üíé –°–±–µ—Ä–µ–∂–µ–Ω–∏—è (20%)", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{savings_budget:,.0f} ‚ÇΩ", size=16, color=ft.Colors.BLUE),
                    ft.Text(f"–¢–µ–∫—É—â–∏–µ: {current_savings:,.0f} ‚ÇΩ", size=12, 
                           color=ft.Colors.GREEN if current_savings >= savings_budget else ft.Colors.RED)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–∞—Ç–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ù–∞ –µ–¥—É –≤ –¥–µ–Ω—å: {daily_budget * 0.3:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ù–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –¥–µ–Ω—å: {daily_budget * 0.2:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ù–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –¥–µ–Ω—å: {daily_budget * 0.1:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ù–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {daily_budget * 0.1:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {daily_budget * 0.3:,.0f} ‚ÇΩ", size=12, color=ft.Colors.BLUE)
        ], spacing=10)
    
    def create_wants_analysis(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        
        # –ë—é–¥–∂–µ—Ç –Ω–∞ –∂–µ–ª–∞–Ω–∏—è
        wants_budget = salary * 0.3  # 30% –æ—Ç –¥–æ—Ö–æ–¥–∞
        available_for_wants = current_money - safety_reserve
        
        # –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤—ã—Ö —Ç—Ä–∞—Ç
        game_transactions = [t for t in self.finance_app.data["transactions"] 
                           if t.get("category") == "games"]
        monthly_game_spending = sum(t["amount"] for t in game_transactions 
                                  if t["type"] == "expense" and t["date"].startswith(datetime.now().strftime("%Y-%m")))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–≥—Ä–∞–º
        recommended_game_budget = wants_budget * 0.2  # 20% –æ—Ç –±—é–¥–∂–µ—Ç–∞ –∂–µ–ª–∞–Ω–∏–π –Ω–∞ –∏–≥—Ä—ã
        
        return ft.Column([
            ft.Text("üéÆ –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤—ã—Ö —Ç—Ä–∞—Ç:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –∏–≥—Ä—ã", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_game_spending:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED),
                    ft.Text(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_game_budget:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN)
                ], expand=True),
                ft.Column([
                    ft.Text("üìä –°—Ç–∞—Ç—É—Å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text("‚úÖ –í –Ω–æ—Ä–º–µ" if monthly_game_spending <= recommended_game_budget else "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ", 
                           size=16, color=ft.Colors.GREEN if monthly_game_spending <= recommended_game_budget else ft.Colors.RED),
                    ft.Text(f"–û—Å—Ç–∞—Ç–æ–∫: {recommended_game_budget - monthly_game_spending:,.0f} ‚ÇΩ", size=14)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–≥—Ä–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ (Steam Sale, PlayStation Store)", size=12),
            ft.Text("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ –¥–æ–Ω–∞—Ç—ã: 2,000-3,000 ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Game Pass –≤–º–µ—Å—Ç–æ –ø–æ–∫—É–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–≥—Ä", size=12),
            ft.Text("‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤—ã—Ö", size=12),
            
            ft.Divider(),
            
            ft.Text("üí° –£–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –∏–≥—Ä–∞—Ö:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ñ–¥–∏—Ç–µ —Å–∫–∏–¥–æ–∫ - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 70%", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫ –æ—Ç –±–∞–Ω–∫–æ–≤ (–¥–æ 10%)", size=12),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –∏–≥—Ä—ã –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö —Å –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏", size=12),
            ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–º–µ—Å—Ç–æ –ø–æ–∫—É–ø–æ–∫", size=12),
            
            ft.Divider(),
            
            ft.Text("üéÆ –ë—é–¥–∂–µ—Ç –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ò–≥—Ä—ã: {recommended_game_budget:,.0f} ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text(f"‚Ä¢ –ö–∏–Ω–æ/—Å–µ—Ä–∏–∞–ª—ã: {wants_budget * 0.15:,.0f} ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text(f"‚Ä¢ –ö–∞—Ñ–µ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã: {wants_budget * 0.25:,.0f} ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text(f"‚Ä¢ –•–æ–±–±–∏: {wants_budget * 0.2:,.0f} ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text(f"‚Ä¢ –ü—Ä–æ—á–µ–µ: {wants_budget * 0.2:,.0f} ‚ÇΩ/–º–µ—Å", size=12)
        ], spacing=10)
    
    def create_food_budget_analysis(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –Ω–∞ –µ–¥—É
        food_transactions = [t for t in self.finance_app.data["transactions"] 
                           if t.get("category") in ["food", "restaurants"]]
        monthly_food_spending = sum(t["amount"] for t in food_transactions 
                                  if t["type"] == "expense" and t["date"].startswith(datetime.now().strftime("%Y-%m")))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –µ–¥–µ
        recommended_food_budget = salary * 0.15  # 15% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ –µ–¥—É
        daily_food_budget = recommended_food_budget / 30
        
        # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –µ–¥—ã
        restaurant_budget = recommended_food_budget * 0.3  # 30% –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
        groceries_budget = recommended_food_budget * 0.7   # 70% –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
        
        return ft.Column([
            ft.Text("üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –Ω–∞ –µ–¥—É:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –µ–¥—É", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_food_spending:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED),
                    ft.Text(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_food_budget:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN)
                ], expand=True),
                ft.Column([
                    ft.Text("üìä –°—Ç–∞—Ç—É—Å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text("‚úÖ –í –Ω–æ—Ä–º–µ" if monthly_food_spending <= recommended_food_budget else "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ", 
                           size=16, color=ft.Colors.GREEN if monthly_food_spending <= recommended_food_budget else ft.Colors.RED),
                    ft.Text(f"–û—Å—Ç–∞—Ç–æ–∫: {recommended_food_budget - monthly_food_spending:,.0f} ‚ÇΩ", size=14)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üí∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –µ–¥—É:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üõí –ü—Ä–æ–¥—É–∫—Ç—ã (70%)", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{groceries_budget:,.0f} ‚ÇΩ/–º–µ—Å", size=16, color=ft.Colors.BLUE),
                    ft.Text(f"{groceries_budget/30:,.0f} ‚ÇΩ/–¥–µ–Ω—å", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üçï –†–µ—Å—Ç–æ—Ä–∞–Ω—ã (30%)", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{restaurant_budget:,.0f} ‚ÇΩ/–º–µ—Å", size=16, color=ft.Colors.ORANGE),
                    ft.Text(f"{restaurant_budget/30:,.0f} ‚ÇΩ/–¥–µ–Ω—å", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –µ–¥–µ:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –∑–∞—Ä–∞–Ω–µ–µ", size=12),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∞–∫—Ü–∏—è–º", size=12),
            ft.Text("‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞ –≤–º–µ—Å—Ç–æ –∑–∞–∫–∞–∑–æ–≤", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—É–ø–æ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏", size=12),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", size=12),
            
            ft.Divider(),
            
            ft.Text("üçΩÔ∏è –ë—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –í –¥–µ–Ω—å: {restaurant_budget/30:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –í –Ω–µ–¥–µ–ª—é: {restaurant_budget/4.3:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –û–±–µ–¥—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö: {restaurant_budget * 0.6:,.0f} ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text(f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã: {restaurant_budget * 0.4:,.0f} ‚ÇΩ/–º–µ—Å", size=12),
            
            ft.Divider(),
            
            ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞–º–∏", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", size=12),
            ft.Text("‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞ –¥–≤–æ–∏—Ö –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏", size=12),
            ft.Text("‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö", size=12)
        ], spacing=10)
    
    def create_subscriptions_analysis(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
        subscriptions = [
            {"name": "ChatGPT Plus", "price": 3000, "period": "–º–µ—Å—è—Ü", "enabled": self.finance_app.data["chatgpt_enabled"]},
            {"name": "Netflix", "price": 500, "period": "–º–µ—Å—è—Ü", "enabled": False},
            {"name": "Spotify", "price": 300, "period": "–º–µ—Å—è—Ü", "enabled": False},
            {"name": "YouTube Premium", "price": 200, "period": "–º–µ—Å—è—Ü", "enabled": False}
        ]
        
        # –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
        subscription_transactions = [t for t in self.finance_app.data["transactions"] 
                                   if any(word in t["description"].lower() for word in ["–ø–æ–¥–ø–∏—Å–∫–∞", "subscription", "netflix", "spotify", "youtube", "microsoft", "adobe", "playstation", "xbox"])]
        monthly_subscription_spending = sum(t["amount"] for t in subscription_transactions 
                                          if t["type"] == "expense" and t["date"].startswith(datetime.now().strftime("%Y-%m")))
        
        # –î–æ–±–∞–≤–ª—è–µ–º ChatGPT –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.finance_app.data["chatgpt_enabled"]:
            monthly_subscription_spending += 3000
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommended_subscription_budget = salary * 0.05  # 5% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        
        return ft.Column([
            ft.Text("üí≥ –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üí∏ –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_subscription_spending:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED),
                    ft.Text(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_subscription_budget:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN)
                ], expand=True),
                ft.Column([
                    ft.Text("üìä –°—Ç–∞—Ç—É—Å", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text("‚úÖ –í –Ω–æ—Ä–º–µ" if monthly_subscription_spending <= recommended_subscription_budget else "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ", 
                           size=16, color=ft.Colors.GREEN if monthly_subscription_spending <= recommended_subscription_budget else ft.Colors.RED),
                    ft.Text(f"–û—Å—Ç–∞—Ç–æ–∫: {recommended_subscription_budget - monthly_subscription_spending:,.0f} ‚ÇΩ", size=14)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å:", size=16, weight=ft.FontWeight.BOLD),
            ft.Column([
                ft.Row([
                    ft.Text(f"‚Ä¢ {sub['name']}: {sub['price']:,.0f} ‚ÇΩ/{sub['period']}", size=12),
                    ft.Text("‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if sub['enabled'] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ", 
                           size=10, color=ft.Colors.GREEN if sub['enabled'] else ft.Colors.GREY)
                ]) for sub in subscriptions
            ], spacing=5),
            
            ft.Divider(),
            
            ft.Text("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –û—Ç–º–µ–Ω—è–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", size=12),
            ft.Text("‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –≥–æ–¥–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–º–µ–π–Ω—ã–µ –ø–ª–∞–Ω—ã", size=12),
            ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)", size=12),
            ft.Text("‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è", size=12),
            
            ft.Divider(),
            
            ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ChatGPT Plus:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 3,000 ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text(f"‚Ä¢ –î–æ–ª—è –æ—Ç –¥–æ—Ö–æ–¥–∞: {(3000/salary*100):.1f}%" if salary > 0 else "‚Ä¢ –î–æ–ª—è –æ—Ç –¥–æ—Ö–æ–¥–∞: 0%", size=12),
            ft.Text("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –µ—Å–ª–∏ –¥–æ—Ö–æ–¥ > 60,000 ‚ÇΩ/–º–µ—Å", size=12),
            ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: Claude, Gemini", size=12),
            ft.Text("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏", size=12)
        ], spacing=10)
    
    def create_calculators_page(self):
        return ft.Column([
            ft.Text("üßÆ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫—É–ø–æ–∫", size=18, weight=ft.FontWeight.BOLD),
                        self.create_purchase_calculator()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üè† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_real_estate_calculator()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üöó –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è", size=18, weight=ft.FontWeight.BOLD),
                        self.create_car_calculator()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("‚úàÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–ø—É—Å–∫–∞", size=18, weight=ft.FontWeight.BOLD),
                        self.create_vacation_calculator()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí≥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–µ–¥–∏—Ç–æ–≤", size=18, weight=ft.FontWeight.BOLD),
                        self.create_loan_calculator()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_purchase_calculator(self):
        self.purchase_item = ft.TextField(label="–ß—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ?", width=200)
        self.purchase_price = ft.TextField(label="–¶–µ–Ω–∞ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.purchase_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", size=14, color=ft.Colors.GREY_600)
        
        return ft.Column([
            ft.Row([
                self.purchase_item,
                self.purchase_price,
                ft.ElevatedButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_click=self.calculate_purchase)
            ], spacing=10),
            ft.Container(content=self.purchase_result, padding=10)
        ], spacing=10)
    
    def calculate_purchase(self, e):
        try:
            item = self.purchase_item.value
            price = float(self.purchase_price.value) if self.purchase_price.value else 0
            
            if not item or price <= 0:
                self.purchase_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", size=14, color=ft.Colors.RED)
                self.page.update()
                return
            
            current_money = self.finance_app.data["current_money"]
            safety_reserve = self.finance_app.data["safety_reserve"]
            salary = self.finance_app.data["salary"]
            monthly_expenses = self.calculate_average_monthly_expenses()
            
            # –†–∞—Å—á–µ—Ç—ã
            available_money = current_money - safety_reserve
            months_to_save = (price - available_money) / max(salary - monthly_expenses, 1) if price > available_money else 0
            daily_budget_impact = price / 30 if months_to_save <= 1 else 0
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if price <= available_money:
                recommendation = "‚úÖ –ú–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å"
                color = ft.Colors.GREEN
            elif months_to_save <= 3:
                recommendation = f"‚è∞ –ù—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å {months_to_save:.1f} –º–µ—Å—è—Ü–µ–≤"
                color = ft.Colors.ORANGE
            else:
                recommendation = f"‚ùå –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ - {months_to_save:.1f} –º–µ—Å—è—Ü–µ–≤"
                color = ft.Colors.RED
            
            self.purchase_result = ft.Column([
                ft.Text(f"üì± {item}", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {available_money:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"‚è∞ –í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {months_to_save:.1f} –º–µ—Å", size=14),
                ft.Text(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω—É–∂–Ω–æ: {daily_budget_impact:,.0f} ‚ÇΩ", size=14),
                ft.Text(recommendation, size=14, color=color, weight=ft.FontWeight.BOLD)
            ], spacing=5)
            
            self.page.update()
        except ValueError:
            self.purchase_result = ft.Text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", size=14, color=ft.Colors.RED)
            self.page.update()
    
    def create_real_estate_calculator(self):
        self.property_price = ft.TextField(label="–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=200)
        self.down_payment = ft.TextField(label="–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.interest_rate = ft.TextField(label="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.property_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", size=14, color=ft.Colors.GREY_600)
        
        return ft.Column([
            ft.Row([
                self.property_price,
                self.down_payment,
                self.interest_rate,
                ft.ElevatedButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_click=self.calculate_property)
            ], spacing=10),
            ft.Container(content=self.property_result, padding=10)
        ], spacing=10)
    
    def calculate_property(self, e):
        try:
            price = float(self.property_price.value) if self.property_price.value else 0
            down_payment = float(self.down_payment.value) if self.down_payment.value else 0
            interest_rate = float(self.interest_rate.value) if self.interest_rate.value else 0
            
            if price <= 0 or down_payment < 0 or interest_rate < 0:
                self.property_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", size=14, color=ft.Colors.RED)
                self.page.update()
                return
            
            # –†–∞—Å—á–µ—Ç—ã
            loan_amount = price - down_payment
            monthly_rate = interest_rate / 100 / 12
            months = 20 * 12  # 20 –ª–µ—Ç
            
            if monthly_rate > 0:
                monthly_payment = loan_amount * (monthly_rate * (1 + monthly_rate)**months) / ((1 + monthly_rate)**months - 1)
            else:
                monthly_payment = loan_amount / months
            
            total_payment = monthly_payment * months
            total_interest = total_payment - loan_amount
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            current_money = self.finance_app.data["current_money"]
            salary = self.finance_app.data["salary"]
            monthly_expenses = self.calculate_average_monthly_expenses()
            
            available_for_mortgage = salary - monthly_expenses
            affordability = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if monthly_payment <= available_for_mortgage * 0.4 else "‚ö†Ô∏è –î–æ—Ä–æ–≥–æ" if monthly_payment <= available_for_mortgage * 0.6 else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            
            self.property_result = ft.Column([
                ft.Text("üè† –†–∞—Å—á–µ—Ç –∏–ø–æ—Ç–µ–∫–∏", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üí≥ –ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: {down_payment:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üìä –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan_amount:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üí∏ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(f"üìà –û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: {total_interest:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {affordability}", size=14, 
                       color=ft.Colors.GREEN if "–î–æ—Å—Ç—É–ø–Ω–æ" in affordability else ft.Colors.ORANGE if "–î–æ—Ä–æ–≥–æ" in affordability else ft.Colors.RED)
            ], spacing=5)
            
            self.page.update()
        except ValueError:
            self.property_result = ft.Text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", size=14, color=ft.Colors.RED)
            self.page.update()
    
    def create_car_calculator(self):
        self.car_price = ft.TextField(label="–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=200)
        self.car_down_payment = ft.TextField(label="–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.car_loan_term = ft.TextField(label="–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–º–µ—Å)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.car_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", size=14, color=ft.Colors.GREY_600)
        
        return ft.Column([
            ft.Row([
                self.car_price,
                self.car_down_payment,
                self.car_loan_term,
                ft.ElevatedButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_click=self.calculate_car)
            ], spacing=10),
            ft.Container(content=self.car_result, padding=10)
        ], spacing=10)
    
    def calculate_car(self, e):
        try:
            price = float(self.car_price.value) if self.car_price.value else 0
            down_payment = float(self.car_down_payment.value) if self.car_down_payment.value else 0
            term_months = int(self.car_loan_term.value) if self.car_loan_term.value else 0
            
            if price <= 0 or down_payment < 0 or term_months <= 0:
                self.car_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", size=14, color=ft.Colors.RED)
                self.page.update()
                return
            
            # –†–∞—Å—á–µ—Ç—ã
            loan_amount = price - down_payment
            interest_rate = 0.15  # 15% –≥–æ–¥–æ–≤—ã—Ö –¥–ª—è –∞–≤—Ç–æ
            monthly_rate = interest_rate / 12
            monthly_payment = loan_amount * (monthly_rate * (1 + monthly_rate)**term_months) / ((1 + monthly_rate)**term_months - 1)
            
            total_payment = monthly_payment * term_months
            total_interest = total_payment - loan_amount
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            insurance_monthly = price * 0.01 / 12  # 1% –≤ –≥–æ–¥
            maintenance_monthly = price * 0.02 / 12  # 2% –≤ –≥–æ–¥
            fuel_monthly = 8000  # –ü—Ä–∏–º–µ—Ä–Ω–æ
            total_monthly_cost = monthly_payment + insurance_monthly + maintenance_monthly + fuel_monthly
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            salary = self.finance_app.data["salary"]
            monthly_expenses = self.calculate_average_monthly_expenses()
            available_income = salary - monthly_expenses
            
            affordability = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if total_monthly_cost <= available_income * 0.3 else "‚ö†Ô∏è –î–æ—Ä–æ–≥–æ" if total_monthly_cost <= available_income * 0.5 else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            
            self.car_result = ft.Column([
                ft.Text("üöó –†–∞—Å—á–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üí≥ –ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: {down_payment:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üìä –ö—Ä–µ–¥–∏—Ç: {loan_amount:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üí∏ –ü–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {monthly_payment:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: {insurance_monthly:,.0f} ‚ÇΩ/–º–µ—Å", size=14),
                ft.Text(f"üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {maintenance_monthly:,.0f} ‚ÇΩ/–º–µ—Å", size=14),
                ft.Text(f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {fuel_monthly:,.0f} ‚ÇΩ/–º–µ—Å", size=14),
                ft.Text(f"üìà –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_monthly_cost:,.0f} ‚ÇΩ/–º–µ—Å", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {affordability}", size=14, 
                       color=ft.Colors.GREEN if "–î–æ—Å—Ç—É–ø–Ω–æ" in affordability else ft.Colors.ORANGE if "–î–æ—Ä–æ–≥–æ" in affordability else ft.Colors.RED)
            ], spacing=5)
            
            self.page.update()
        except ValueError:
            self.car_result = ft.Text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", size=14, color=ft.Colors.RED)
            self.page.update()
    
    def create_vacation_calculator(self):
        self.vacation_destination = ft.TextField(label="–ö—É–¥–∞ –µ–¥–µ—Ç–µ?", width=200)
        self.vacation_days = ft.TextField(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.vacation_people = ft.TextField(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.vacation_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", size=14, color=ft.Colors.GREY_600)
        
        return ft.Column([
            ft.Row([
                self.vacation_destination,
                self.vacation_days,
                self.vacation_people,
                ft.ElevatedButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_click=self.calculate_vacation)
            ], spacing=10),
            ft.Container(content=self.vacation_result, padding=10)
        ], spacing=10)
    
    def calculate_vacation(self, e):
        try:
            destination = self.vacation_destination.value
            days = int(self.vacation_days.value) if self.vacation_days.value else 0
            people = int(self.vacation_people.value) if self.vacation_people.value else 0
            
            if not destination or days <= 0 or people <= 0:
                self.vacation_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", size=14, color=ft.Colors.RED)
                self.page.update()
                return
            
            # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã)
            flight_per_person = 15000 if "–∑–∞–≥—Ä–∞–Ω–∏—Ü" in destination.lower() or "–µ–≤—Ä–æ–ø" in destination.lower() else 8000
            hotel_per_night = 3000 if "–∑–∞–≥—Ä–∞–Ω–∏—Ü" in destination.lower() or "–µ–≤—Ä–æ–ø" in destination.lower() else 2000
            food_per_day = 2000 if "–∑–∞–≥—Ä–∞–Ω–∏—Ü" in destination.lower() or "–µ–≤—Ä–æ–ø" in destination.lower() else 1500
            activities_per_day = 1500 if "–∑–∞–≥—Ä–∞–Ω–∏—Ü" in destination.lower() or "–µ–≤—Ä–æ–ø" in destination.lower() else 1000
            
            # –†–∞—Å—á–µ—Ç—ã
            total_flight = flight_per_person * people
            total_hotel = hotel_per_night * days * people
            total_food = food_per_day * days * people
            total_activities = activities_per_day * days * people
            total_cost = total_flight + total_hotel + total_food + total_activities
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            current_money = self.finance_app.data["current_money"]
            safety_reserve = self.finance_app.data["safety_reserve"]
            available_money = current_money - safety_reserve
            
            months_to_save = (total_cost - available_money) / max(self.finance_app.data["salary"] - self.calculate_average_monthly_expenses(), 1) if total_cost > available_money else 0
            
            affordability = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if total_cost <= available_money else f"‚è∞ –ù—É–∂–Ω–æ –∫–æ–ø–∏—Ç—å {months_to_save:.1f} –º–µ—Å" if months_to_save <= 12 else "‚ùå –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ"
            
            self.vacation_result = ft.Column([
                ft.Text(f"‚úàÔ∏è {destination}", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"üìÖ {days} –¥–Ω–µ–π, {people} —á–µ–ª.", size=14),
                ft.Text(f"‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã: {total_flight:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üè® –û—Ç–µ–ª—å: {total_hotel:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ: {total_food:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üéØ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: {total_activities:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {available_money:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üéØ {affordability}", size=14, 
                       color=ft.Colors.GREEN if "–î–æ—Å—Ç—É–ø–Ω–æ" in affordability else ft.Colors.ORANGE if "–∫–æ–ø–∏—Ç—å" in affordability else ft.Colors.RED)
            ], spacing=5)
            
            self.page.update()
        except ValueError:
            self.vacation_result = ft.Text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", size=14, color=ft.Colors.RED)
            self.page.update()
    
    def create_loan_calculator(self):
        self.loan_amount = ft.TextField(label="–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=200)
        self.loan_rate = ft.TextField(label="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.loan_term = ft.TextField(label="–°—Ä–æ–∫ (–º–µ—Å)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.loan_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", size=14, color=ft.Colors.GREY_600)
        
        return ft.Column([
            ft.Row([
                self.loan_amount,
                self.loan_rate,
                self.loan_term,
                ft.ElevatedButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_click=self.calculate_loan)
            ], spacing=10),
            ft.Container(content=self.loan_result, padding=10)
        ], spacing=10)
    
    def calculate_loan(self, e):
        try:
            amount = float(self.loan_amount.value) if self.loan_amount.value else 0
            rate = float(self.loan_rate.value) if self.loan_rate.value else 0
            term = int(self.loan_term.value) if self.loan_term.value else 0
            
            if amount <= 0 or rate < 0 or term <= 0:
                self.loan_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", size=14, color=ft.Colors.RED)
                self.page.update()
                return
            
            # –†–∞—Å—á–µ—Ç—ã
            monthly_rate = rate / 100 / 12
            monthly_payment = amount * (monthly_rate * (1 + monthly_rate)**term) / ((1 + monthly_rate)**term - 1)
            total_payment = monthly_payment * term
            total_interest = total_payment - amount
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            salary = self.finance_app.data["salary"]
            monthly_expenses = self.calculate_average_monthly_expenses()
            available_income = salary - monthly_expenses
            
            debt_ratio = monthly_payment / salary
            affordability = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if debt_ratio <= 0.3 else "‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ" if debt_ratio <= 0.5 else "‚ùå –û–ø–∞—Å–Ω–æ"
            
            self.loan_result = ft.Column([
                ft.Text("üí≥ –†–∞—Å—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–∞", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"üí∞ –°—É–º–º–∞: {amount:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üìä –°—Ç–∞–≤–∫–∞: {rate:.1f}%", size=14),
                ft.Text(f"‚è∞ –°—Ä–æ–∫: {term} –º–µ—Å", size=14),
                ft.Text(f"üí∏ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(f"üìà –û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: {total_interest:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üìä –î–æ–ª—è –æ—Ç –¥–æ—Ö–æ–¥–∞: {debt_ratio*100:.1f}%", size=14),
                ft.Text(f"üéØ {affordability}", size=14, 
                       color=ft.Colors.GREEN if "–î–æ—Å—Ç—É–ø–Ω–æ" in affordability else ft.Colors.ORANGE if "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ" in affordability else ft.Colors.RED)
            ], spacing=5)
            
            self.page.update()
        except ValueError:
            self.loan_result = ft.Text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", size=14, color=ft.Colors.RED)
            self.page.update()
    
    def create_investments_page(self):
        return ft.Column([
            ft.Text("üíé –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", size=18, weight=ft.FontWeight.BOLD),
                        self.create_investment_portfolio()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", size=18, weight=ft.FontWeight.BOLD),
                        self.create_savings_calculator()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_investment_strategies()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º", size=18, weight=ft.FontWeight.BOLD),
                        self.create_investment_recommendations()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_investment_portfolio(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        goal_investments = self.finance_app.data["goal_investments"]
        salary = self.finance_app.data["salary"]
        
        # –†–∞—Å—á–µ—Ç—ã
        total_invested = sum(goal_investments.values())
        available_for_investment = current_money - safety_reserve - total_invested
        investment_ratio = total_invested / current_money if current_money > 0 else 0
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        recommended_emergency = safety_reserve
        recommended_investments = (current_money - safety_reserve) * 0.7
        recommended_cash = (current_money - safety_reserve) * 0.3
        
        return ft.Column([
            ft.Row([
                ft.Column([
                    ft.Text("üíé –û–±—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: {current_money:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"–í –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö: {total_invested:,.0f} ‚ÇΩ", size=14, color=ft.Colors.BLUE),
                    ft.Text(f"–í —Ä–µ–∑–µ—Ä–≤–µ: {safety_reserve:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
                    ft.Text(f"–°–≤–æ–±–æ–¥–Ω–æ: {available_for_investment:,.0f} ‚ÇΩ", size=14, color=ft.Colors.ORANGE)
                ], expand=True),
                ft.Column([
                    ft.Text("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {investment_ratio*100:.1f}%", size=14),
                    ft.Text(f"–†–µ–∑–µ—Ä–≤: {(safety_reserve/current_money*100):.1f}%" if current_money > 0 else "–†–µ–∑–µ—Ä–≤: 0%", size=14),
                    ft.Text(f"–ù–∞–ª–∏—á–Ω—ã–µ: {((current_money-safety_reserve-total_invested)/current_money*100):.1f}%" if current_money > 0 else "–ù–∞–ª–∏—á–Ω—ã–µ: 0%", size=14)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:", size=14, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Text(f"–†–µ–∑–µ—Ä–≤: {recommended_emergency:,.0f} ‚ÇΩ", size=12, color=ft.Colors.GREEN),
                ft.Text(f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {recommended_investments:,.0f} ‚ÇΩ", size=12, color=ft.Colors.BLUE),
                ft.Text(f"–ù–∞–ª–∏—á–Ω—ã–µ: {recommended_cash:,.0f} ‚ÇΩ", size=12, color=ft.Colors.ORANGE)
            ], spacing=20)
        ], spacing=10)
    
    def create_savings_calculator(self):
        self.savings_goal = ft.TextField(label="–¶–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π (‚ÇΩ)", keyboard_type=ft.KeyboardType.NUMBER, width=200)
        self.savings_time = ft.TextField(label="–°—Ä–æ–∫ (–º–µ—Å)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.savings_rate = ft.TextField(label="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)", keyboard_type=ft.KeyboardType.NUMBER, width=150)
        self.savings_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", size=14, color=ft.Colors.GREY_600)
        
        return ft.Column([
            ft.Row([
                self.savings_goal,
                self.savings_time,
                self.savings_rate,
                ft.ElevatedButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_click=self.calculate_savings)
            ], spacing=10),
            ft.Container(content=self.savings_result, padding=10)
        ], spacing=10)
    
    def calculate_savings(self, e):
        try:
            goal = float(self.savings_goal.value) if self.savings_goal.value else 0
            months = int(self.savings_time.value) if self.savings_time.value else 0
            rate = float(self.savings_rate.value) if self.savings_rate.value else 0
            
            if goal <= 0 or months <= 0 or rate < 0:
                self.savings_result = ft.Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", size=14, color=ft.Colors.RED)
                self.page.update()
                return
            
            # –†–∞—Å—á–µ—Ç—ã
            monthly_rate = rate / 100 / 12
            if monthly_rate > 0:
                monthly_payment = goal * monthly_rate / ((1 + monthly_rate)**months - 1)
            else:
                monthly_payment = goal / months
            
            total_invested = monthly_payment * months
            total_earnings = goal - total_invested
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            salary = self.finance_app.data["salary"]
            monthly_expenses = self.calculate_average_monthly_expenses()
            available_income = salary - monthly_expenses
            
            affordability = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if monthly_payment <= available_income * 0.3 else "‚ö†Ô∏è –î–æ—Ä–æ–≥–æ" if monthly_payment <= available_income * 0.5 else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            
            self.savings_result = ft.Column([
                ft.Text("üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", size=16, weight=ft.FontWeight.BOLD),
                ft.Text(f"üéØ –¶–µ–ª—å: {goal:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"‚è∞ –°—Ä–æ–∫: {months} –º–µ—Å", size=14),
                ft.Text(f"üìä –°—Ç–∞–≤–∫–∞: {rate:.1f}%", size=14),
                ft.Text(f"üí∏ –ï–∂–µ–º–µ—Å—è—á–Ω–æ: {monthly_payment:,.0f} ‚ÇΩ", size=14, weight=ft.FontWeight.BOLD),
                ft.Text(f"üìà –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: {total_invested:,.0f} ‚ÇΩ", size=14),
                ft.Text(f"üíé –î–æ—Ö–æ–¥: {total_earnings:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
                ft.Text(f"üéØ {affordability}", size=14, 
                       color=ft.Colors.GREEN if "–î–æ—Å—Ç—É–ø–Ω–æ" in affordability else ft.Colors.ORANGE if "–î–æ—Ä–æ–≥–æ" in affordability else ft.Colors.RED)
            ], spacing=5)
            
            self.page.update()
        except ValueError:
            self.savings_result = ft.Text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", size=14, color=ft.Colors.RED)
            self.page.update()
    
    def create_investment_strategies(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        age = 30  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        if age < 30:
            risk_profile = "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"
            stock_ratio = 0.8
            bond_ratio = 0.2
        elif age < 50:
            risk_profile = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
            stock_ratio = 0.6
            bond_ratio = 0.4
        else:
            risk_profile = "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π"
            stock_ratio = 0.4
            bond_ratio = 0.6
        
        available_for_investment = current_money - safety_reserve
        recommended_stocks = available_for_investment * stock_ratio
        recommended_bonds = available_for_investment * bond_ratio
        
        return ft.Column([
            ft.Text(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: {risk_profile}", size=16, weight=ft.FontWeight.BOLD),
            ft.Text(f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç", size=14),
            
            ft.Divider(),
            
            ft.Text("üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text("üìà –ê–∫—Ü–∏–∏", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{stock_ratio*100:.0f}%", size=16, color=ft.Colors.BLUE),
                    ft.Text(f"{recommended_stocks:,.0f} ‚ÇΩ", size=12)
                ], expand=True),
                ft.Column([
                    ft.Text("üèõÔ∏è –û–±–ª–∏–≥–∞—Ü–∏–∏", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{bond_ratio*100:.0f}%", size=16, color=ft.Colors.GREEN),
                    ft.Text(f"{recommended_bonds:,.0f} ‚ÇΩ", size=12)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üí° –°—Ç—Ä–∞—Ç–µ–≥–∏–∏:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ ETF –Ω–∞ S&P 500 - 40%", size=12),
            ft.Text("‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ - 20%", size=12),
            ft.Text("‚Ä¢ –û–§–ó - 30%", size=12),
            ft.Text("‚Ä¢ –ó–æ–ª–æ—Ç–æ - 10%", size=12),
            
            ft.Divider(),
            
            ft.Text("‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–Ω—å–≥–∏", size=12),
            ft.Text("‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å", size=12),
            ft.Text("‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ", size=12),
            ft.Text("‚Ä¢ –ù–µ –ø–∞–Ω–∏–∫—É–π—Ç–µ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏—è—Ö", size=12)
        ], spacing=10)
    
    def create_investment_recommendations(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        if current_money < safety_reserve * 2:
            recommendations.append(
                ft.Text("üö® –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤ –≤ 2-3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ", 
                       size=14, color=ft.Colors.RED, weight=ft.FontWeight.BOLD)
            )
        elif current_money > safety_reserve * 3:
            excess = current_money - safety_reserve * 3
            recommendations.append(
                ft.Text(f"üíé –ú–æ–∂–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {excess:,.0f} ‚ÇΩ", 
                       size=14, color=ft.Colors.GREEN, weight=ft.FontWeight.BOLD)
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—É–º–º–∞–º
        monthly_savings = salary - monthly_expenses
        if monthly_savings > 0:
            recommended_monthly_investment = monthly_savings * 0.3
            recommendations.append(
                ft.Text(f"üìÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {recommended_monthly_investment:,.0f} ‚ÇΩ/–º–µ—Å", 
                       size=14, color=ft.Colors.BLUE)
            )
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        recommendations.extend([
            ft.Text("üè¶ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≤–∫–ª–∞–¥—ã - 5-7% –≥–æ–¥–æ–≤—ã—Ö", size=12),
            ft.Text("‚Ä¢ –û–§–ó - 6-8% –≥–æ–¥–æ–≤—ã—Ö", size=12),
            ft.Text("‚Ä¢ ETF - 8-12% –≥–æ–¥–æ–≤—ã—Ö", size=12),
            ft.Text("‚Ä¢ –ê–∫—Ü–∏–∏ - 10-15% –≥–æ–¥–æ–≤—ã—Ö (—Ä–∏—Å–∫)", size=12),
            
            ft.Text("üìö –ì–¥–µ –∏–∑—É—á–∞—Ç—å:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", size=12),
            ft.Text("‚Ä¢ –°–±–µ—Ä –ò–Ω–≤–µ—Å—Ç–æ—Ä", size=12),
            ft.Text("‚Ä¢ –í–¢–ë –ú–æ–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", size=12),
            ft.Text("‚Ä¢ YouTube –∫–∞–Ω–∞–ª—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º", size=12)
        ])
        
        return ft.Column(recommendations, spacing=5)
    
    def create_loans_page(self):
        return ft.Column([
            ft.Text("üí≥ –ö—Ä–µ–¥–∏—Ç—ã –∏ –¥–æ–ª–≥–∏", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏", size=18, weight=ft.FontWeight.BOLD),
                        self.create_debt_analysis()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üí° –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤", size=18, weight=ft.FontWeight.BOLD),
                        self.create_debt_strategies()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üÜò –ö—Ä–∏–∑–∏—Å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", size=18, weight=ft.FontWeight.BOLD),
                        self.create_crisis_planning()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_debt_analysis(self):
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        current_money = self.finance_app.data["current_money"]
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        available_income = salary - monthly_expenses
        max_loan_payment = available_income * 0.4  # –ú–∞–∫—Å–∏–º—É–º 40% –æ—Ç –¥–æ—Ö–æ–¥–∞
        recommended_loan_payment = available_income * 0.2  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 20%
        
        # –û—Ü–µ–Ω–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if available_income > 50000:
            credit_score = "–û—Ç–ª–∏—á–Ω–∞—è"
            score_color = ft.Colors.GREEN
        elif available_income > 30000:
            credit_score = "–•–æ—Ä–æ—à–∞—è"
            score_color = ft.Colors.ORANGE
        else:
            credit_score = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è"
            score_color = ft.Colors.RED
        
        return ft.Column([
            ft.Text(f"üè¶ –ö—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {credit_score}", size=16, weight=ft.FontWeight.BOLD, color=score_color),
            
            ft.Divider(),
            
            ft.Row([
                ft.Column([
                    ft.Text("üí∞ –î–æ—Ö–æ–¥—ã", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary:,.0f} ‚ÇΩ", size=12),
                    ft.Text(f"–†–∞—Å—Ö–æ–¥—ã: {monthly_expenses:,.0f} ‚ÇΩ", size=12),
                    ft.Text(f"–°–≤–æ–±–æ–¥–Ω–æ: {available_income:,.0f} ‚ÇΩ", size=12, color=ft.Colors.GREEN)
                ], expand=True),
                ft.Column([
                    ft.Text("üí≥ –ö—Ä–µ–¥–∏—Ç—ã", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–ú–∞–∫—Å. –ø–ª–∞—Ç–µ–∂: {max_loan_payment:,.0f} ‚ÇΩ", size=12),
                    ft.Text(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_loan_payment:,.0f} ‚ÇΩ", size=12),
                    ft.Text(f"–†–µ–∑–µ—Ä–≤: {current_money:,.0f} ‚ÇΩ", size=12, color=ft.Colors.BLUE)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–ª–∞—Ç–µ–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 40% –¥–æ—Ö–æ–¥–∞", size=12),
            ft.Text("‚Ä¢ –û—Å—Ç–∞–≤—å—Ç–µ 20% –¥–æ—Ö–æ–¥–∞ –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è", size=12),
            ft.Text("‚Ä¢ –ò–º–µ–π—Ç–µ —Ä–µ–∑–µ—Ä–≤ –Ω–∞ 3-6 –º–µ—Å—è—Ü–µ–≤", size=12),
            ft.Text("‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤", size=12)
        ], spacing=10)
    
    def create_debt_strategies(self):
        return ft.Column([
            ft.Text("üéØ –ú–µ—Ç–æ–¥—ã –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤:", size=16, weight=ft.FontWeight.BOLD),
            
            ft.Text("1Ô∏è‚É£ –ú–µ—Ç–æ–¥ —Å–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–º–∞", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–æ–≥–∞—à–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–æ–ª–≥–∏", size=12),
            ft.Text("‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ª–µ–≥—á–µ", size=12),
            ft.Text("‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏", size=12),
            
            ft.Text("2Ô∏è‚É£ –ú–µ—Ç–æ–¥ –ª–∞–≤–∏–Ω—ã", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –ü–æ–≥–∞—à–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –¥–æ–ª–≥–∏", size=12),
            ft.Text("‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –≤—ã–≥–æ–¥–Ω–µ–µ", size=12),
            ft.Text("‚Ä¢ –ë—ã—Å—Ç—Ä–µ–µ —Å–Ω–∏–∂–∞–µ—Ç –æ–±—â—É—é –ø–µ—Ä–µ–ø–ª–∞—Ç—É", size=12),
            
            ft.Text("3Ô∏è‚É£ –†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –æ–¥–∏–Ω", size=12),
            ft.Text("‚Ä¢ –°–Ω–∏–∑—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É", size=12),
            ft.Text("‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏", size=12),
            
            ft.Divider(),
            
            ft.Text("üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Å–ª–µ–¥—É–π—Ç–µ –µ–º—É", size=12),
            ft.Text("‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞", size=12),
            ft.Text("‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –¥–æ–ª–≥–æ–≤", size=12),
            ft.Text("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é –¥–æ–ª–≥–æ–≤", size=12)
        ], spacing=10)
    
    def create_crisis_planning(self):
        current_money = self.finance_app.data["current_money"]
        safety_reserve = self.finance_app.data["safety_reserve"]
        salary = self.finance_app.data["salary"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è
        months_survival = current_money / monthly_expenses if monthly_expenses > 0 else 0
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏–∑–∏—Å—É
        if months_survival < 3:
            crisis_status = "üö® –ö–†–ò–¢–ò–ß–ù–û"
            crisis_color = ft.Colors.RED
            crisis_advice = "–°–†–û–ß–ù–û –Ω–∞–π–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞"
        elif months_survival < 6:
            crisis_status = "‚ö†Ô∏è –û–ü–ê–°–ù–û"
            crisis_color = ft.Colors.ORANGE
            crisis_advice = "–ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤"
        else:
            crisis_status = "‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û"
            crisis_color = ft.Colors.GREEN
            crisis_advice = "–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑–µ—Ä–≤"
        
        return ft.Column([
            ft.Text(f"üÜò –°—Ç–∞—Ç—É—Å: {crisis_status}", size=16, weight=ft.FontWeight.BOLD, color=crisis_color),
            ft.Text(f"–í—Ä–µ–º—è –≤—ã–∂–∏–≤–∞–Ω–∏—è: {months_survival:.1f} –º–µ—Å—è—Ü–µ–≤", size=14),
            ft.Text(crisis_advice, size=14, color=crisis_color),
            
            ft.Divider(),
            
            ft.Text("üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫—Ä–∏–∑–∏—Å–µ:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("1. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", size=12),
            ft.Text("2. –ù–∞–π–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞", size=12),
            ft.Text("3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –±–ª–∏–∑–∫–∏–º", size=12),
            ft.Text("4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤", size=12),
            ft.Text("5. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", size=12),
            
            ft.Divider(),
            
            ft.Text("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:", size=16, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –°–ª—É–∂–±–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏: 8-800-2000-122", size=12),
            ft.Text("‚Ä¢ –¶–µ–Ω—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è", size=12),
            ft.Text("‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É–∂–±—ã", size=12),
            ft.Text("‚Ä¢ –ë–∞–Ω–∫ - —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤", size=12)
        ], spacing=10)
    
    def create_reports_page(self):
        return ft.Column([
            ft.Text("üìä –û—Ç—á–µ—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", size=18, weight=ft.FontWeight.BOLD),
                        self.create_financial_report()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìã –ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç", size=18, weight=ft.FontWeight.BOLD),
                        self.create_tax_report()
                    ], spacing=10),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", size=18, weight=ft.FontWeight.BOLD),
                        self.create_export_section()
                    ], spacing=10),
                    padding=20
                )
            )
        ], spacing=20, scroll=ft.ScrollMode.AUTO)
    
    def create_financial_report(self):
        current_money = self.finance_app.data["current_money"]
        salary = self.finance_app.data["salary"]
        transactions = self.finance_app.data["transactions"]
        monthly_expenses = self.calculate_average_monthly_expenses()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥
        current_year = datetime.now().year
        year_income = sum(t["amount"] for t in transactions 
                         if t["type"] == "income" and str(current_year) in t["date"])
        year_expenses = sum(t["amount"] for t in transactions 
                           if t["type"] == "expense" and str(current_year) in t["date"])
        year_savings = year_income - year_expenses
        
        return ft.Column([
            ft.Text(f"üìä –û—Ç—á–µ—Ç –∑–∞ {current_year} –≥–æ–¥", size=16, weight=ft.FontWeight.BOLD),
            
            ft.Row([
                ft.Column([
                    ft.Text("üí∞ –î–æ—Ö–æ–¥—ã", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{year_income:,.0f} ‚ÇΩ", size=16, color=ft.Colors.GREEN)
                ], expand=True),
                ft.Column([
                    ft.Text("üí∏ –†–∞—Å—Ö–æ–¥—ã", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{year_expenses:,.0f} ‚ÇΩ", size=16, color=ft.Colors.RED)
                ], expand=True),
                ft.Column([
                    ft.Text("üíé –°–±–µ—Ä–µ–∂–µ–Ω–∏—è", size=14, weight=ft.FontWeight.BOLD),
                    ft.Text(f"{year_savings:,.0f} ‚ÇΩ", size=16, color=ft.Colors.BLUE)
                ], expand=True)
            ]),
            
            ft.Divider(),
            
            ft.Text("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ù–æ—Ä–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: {(year_savings/year_income*100):.1f}%" if year_income > 0 else "‚Ä¢ –ù–æ—Ä–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: 0%", size=12),
            ft.Text(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: {year_income/12:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü: {year_expenses/12:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_money:,.0f} ‚ÇΩ", size=12)
        ], spacing=10)
    
    def create_tax_report(self):
        salary = self.finance_app.data["salary"]
        transactions = self.finance_app.data["transactions"]
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤
        annual_salary = salary * 12
        income_tax = annual_salary * 0.13  # 13% –ù–î–§–õ
        social_contributions = annual_salary * 0.3  # 30% —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã
        
        # –î–æ—Ö–æ–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        investment_income = sum(t["amount"] for t in transactions 
                               if t["type"] == "income" and "–∏–Ω–≤–µ—Å—Ç" in t["description"].lower())
        investment_tax = investment_income * 0.13
        
        return ft.Column([
            ft.Text("üìã –ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç", size=16, weight=ft.FontWeight.BOLD),
            
            ft.Text("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ª–æ–≥–∏:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –ì–æ–¥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {annual_salary:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ù–î–§–õ (13%): {income_tax:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã (30%): {social_contributions:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ß–∏—Å—Ç–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {annual_salary - income_tax:,.0f} ‚ÇΩ", size=12),
            
            ft.Divider(),
            
            ft.Text("üíé –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥—ã:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text(f"‚Ä¢ –î–æ—Ö–æ–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {investment_income:,.0f} ‚ÇΩ", size=12),
            ft.Text(f"‚Ä¢ –ù–∞–ª–æ–≥ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {investment_tax:,.0f} ‚ÇΩ", size=12),
            
            ft.Divider(),
            
            ft.Text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–π:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ (–æ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)", size=12),
            ft.Text("‚Ä¢ –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è 3-–ù–î–§–õ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)", size=12),
            ft.Text("‚Ä¢ –°–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", size=12),
            ft.Text("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã", size=12)
        ], spacing=10)
    
    def create_export_section(self):
        return ft.Column([
            ft.Text("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", size=16, weight=ft.FontWeight.BOLD),
            
            ft.Row([
                ft.ElevatedButton("üìä Excel –æ—Ç—á–µ—Ç", on_click=self.export_to_excel),
                ft.ElevatedButton("üìÑ PDF –æ—Ç—á–µ—Ç", on_click=self.export_to_pdf),
                ft.ElevatedButton("üì± –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", on_click=self.create_backup)
            ], spacing=10),
            
            ft.Divider(),
            
            ft.Text("üíæ –ß—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", size=12),
            ft.Text("‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏", size=12),
            ft.Text("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", size=12),
            ft.Text("‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã", size=12),
            
            ft.Divider(),
            
            ft.Text("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:", size=14, weight=ft.FontWeight.BOLD),
            ft.Text("‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ", size=12),
            ft.Text("‚Ä¢ –ù–∏–∫—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", size=12),
            ft.Text("‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", size=12)
        ], spacing=10)
    
    def export_to_excel(self, e):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        self.show_export_dialog("Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")
    
    def export_to_pdf(self, e):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        self.show_export_dialog("PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")
    
    def create_backup(self, e):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        self.show_export_dialog("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
    
    def show_export_dialog(self, message):
        dialog = ft.AlertDialog(
            title=ft.Text("–≠–∫—Å–ø–æ—Ä—Ç"),
            content=ft.Text(message),
            actions=[ft.TextButton("OK", on_click=self.close_dialog)]
        )
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def close_dialog(self, e=None):
        if self.page.dialog:
            self.page.dialog.open = False
            self.page.update()
        if self.page.overlay:
            for overlay_item in self.page.overlay:
                if hasattr(overlay_item, 'open') and overlay_item.open:
                    overlay_item.open = False
            self.page.update()
    
    def create_basic_calculator(self):
        def button_click(button_text):
            if button_text == "C":
                self.calculator_expression = ""
                self.calculator_display.value = "0"
            elif button_text == "=":
                try:
                    self.calculator_result = eval(self.calculator_expression)
                    self.calculator_display.value = str(self.calculator_result)
                    self.calculator_expression = str(self.calculator_result)
                except:
                    self.calculator_display.value = "–û—à–∏–±–∫–∞"
                    self.calculator_expression = ""
            elif button_text == "‚å´":
                if len(self.calculator_expression) > 0:
                    self.calculator_expression = self.calculator_expression[:-1]
                    self.calculator_display.value = self.calculator_expression if self.calculator_expression else "0"
            else:
                if self.calculator_expression == "0" and button_text.isdigit():
                    self.calculator_expression = button_text
                else:
                    self.calculator_expression += button_text
                self.calculator_display.value = self.calculator_expression
            self.page.update()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        buttons = [
            ["C", "‚å´", "%", "√∑"],
            ["7", "8", "9", "√ó"],
            ["4", "5", "6", "-"],
            ["1", "2", "3", "+"],
            ["0", ".", "=", ""]
        ]
        
        button_grid = []
        for row in buttons:
            row_buttons = []
            for button_text in row:
                if button_text == "":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
                    continue
                elif button_text == "=":  # –ö–Ω–æ–ø–∫–∞ = –∑–∞–Ω–∏–º–∞–µ—Ç 2 –º–µ—Å—Ç–∞
                    row_buttons.append(ft.ElevatedButton(
                        button_text,
                        on_click=lambda e, text=button_text: button_click(text),
                        width=150,
                        height=50,
                        bgcolor=ft.Colors.ORANGE,
                        color=ft.Colors.WHITE
                    ))
                elif button_text == "0":  # –ö–Ω–æ–ø–∫–∞ 0 –∑–∞–Ω–∏–º–∞–µ—Ç 2 –º–µ—Å—Ç–∞
                    row_buttons.append(ft.ElevatedButton(
                        button_text,
                        on_click=lambda e, text=button_text: button_click(text),
                        width=150,
                        height=50
                    ))
                else:
                    row_buttons.append(ft.ElevatedButton(
                        button_text,
                        on_click=lambda e, text=button_text: button_click(text),
                        width=70,
                        height=50,
                        bgcolor=ft.Colors.BLUE_100 if button_text in ["+", "-", "√ó", "√∑", "%"] else None
                    ))
            button_grid.append(ft.Row(row_buttons, spacing=5))
        
        return ft.Column([
            self.calculator_display,
            ft.Divider(),
            *button_grid
        ], spacing=10)
    
    def create_financial_calculator(self):
        self.financial_result = ft.Container()
        
        def calculate_percentage(e):
            try:
                value = float(self.calculator_display.value)
                percentage = value / 100
                self.calculator_display.value = str(percentage)
                self.calculator_expression = str(percentage)
                self.page.update()
            except:
                pass
        
        def calculate_tax(e):
            try:
                value = float(self.calculator_display.value)
                # –ù–î–§–õ 13%
                tax = value * 0.13
                net_amount = value - tax
                self.financial_result.content = ft.Column([
                    ft.Text("üí∞ –ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–°—É–º–º–∞: {value:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"–ù–î–§–õ (13%): {tax:,.0f} ‚ÇΩ", size=14, color=ft.Colors.RED),
                    ft.Text(f"–ö –ø–æ–ª—É—á–µ–Ω–∏—é: {net_amount:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN)
                ], spacing=5)
                self.page.update()
            except:
                pass
        
        def calculate_tip(e):
            try:
                bill = float(self.calculator_display.value)
                tip_15 = bill * 0.15
                tip_20 = bill * 0.20
                self.financial_result.content = ft.Column([
                    ft.Text("üçΩÔ∏è –ß–∞–µ–≤—ã–µ:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–°—á–µ—Ç: {bill:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"15% —á–∞–µ–≤—ã—Ö: {tip_15:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"20% —á–∞–µ–≤—ã—Ö: {tip_20:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"–ò—Ç–æ–≥–æ —Å 15%: {bill + tip_15:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
                    ft.Text(f"–ò—Ç–æ–≥–æ —Å 20%: {bill + tip_20:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN)
                ], spacing=5)
                self.page.update()
            except:
                pass
        
        def calculate_discount(e):
            try:
                original_price = float(self.calculator_display.value)
                discount_10 = original_price * 0.9
                discount_20 = original_price * 0.8
                discount_30 = original_price * 0.7
                self.financial_result.content = ft.Column([
                    ft.Text("üè∑Ô∏è –°–∫–∏–¥–∫–∏:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {original_price:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"–°–∫–∏–¥–∫–∞ 10%: {discount_10:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
                    ft.Text(f"–°–∫–∏–¥–∫–∞ 20%: {discount_20:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
                    ft.Text(f"–°–∫–∏–¥–∫–∞ 30%: {discount_30:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN)
                ], spacing=5)
                self.page.update()
            except:
                pass
        
        def calculate_compound_interest(e):
            try:
                principal = float(self.calculator_display.value)
                rate = 0.10  # 10% –≥–æ–¥–æ–≤—ã—Ö
                years = 1
                amount = principal * (1 + rate) ** years
                interest = amount - principal
                self.financial_result.content = ft.Column([
                    ft.Text("üìà –°–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {principal:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"–°—Ç–∞–≤–∫–∞: 10% –≥–æ–¥–æ–≤—ã—Ö", size=14),
                    ft.Text(f"–ß–µ—Ä–µ–∑ 1 –≥–æ–¥: {amount:,.0f} ‚ÇΩ", size=14, color=ft.Colors.GREEN),
                    ft.Text(f"–î–æ—Ö–æ–¥: {interest:,.0f} ‚ÇΩ", size=14, color=ft.Colors.BLUE)
                ], spacing=5)
                self.page.update()
            except:
                pass
        
        def calculate_currency(e):
            try:
                rubles = float(self.calculator_display.value)
                usd = rubles / 95  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                eur = rubles / 105
                self.financial_result.content = ft.Column([
                    ft.Text("üí± –í–∞–ª—é—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–†—É–±–ª–∏: {rubles:,.0f} ‚ÇΩ", size=14),
                    ft.Text(f"–î–æ–ª–ª–∞—Ä—ã: ${usd:.2f}", size=14, color=ft.Colors.GREEN),
                    ft.Text(f"–ï–≤—Ä–æ: ‚Ç¨{eur:.2f}", size=14, color=ft.Colors.BLUE)
                ], spacing=5)
                self.page.update()
            except:
                pass
        
        return ft.Column([
            ft.Text("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –≤—ã—à–µ):", size=14, color=ft.Colors.GREY_600),
            ft.Row([
                ft.ElevatedButton("–ù–î–§–õ 13%", on_click=calculate_tax, width=100, height=40),
                ft.ElevatedButton("–ß–∞–µ–≤—ã–µ", on_click=calculate_tip, width=100, height=40),
                ft.ElevatedButton("–°–∫–∏–¥–∫–∏", on_click=calculate_discount, width=100, height=40)
            ], spacing=10),
            ft.Row([
                ft.ElevatedButton("–°–ª–æ–∂–Ω—ã–π %", on_click=calculate_compound_interest, width=100, height=40),
                ft.ElevatedButton("–í–∞–ª—é—Ç—ã", on_click=calculate_currency, width=100, height=40),
                ft.ElevatedButton("–ü—Ä–æ—Ü–µ–Ω—Ç", on_click=calculate_percentage, width=100, height=40)
            ], spacing=10),
            self.financial_result
        ], spacing=10)
    
    def create_note_input(self):
        self.note_title = ft.TextField(label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏", width=300)
        self.note_content = ft.TextField(label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", multiline=True, min_lines=3, max_lines=6, width=400)
        self.note_category = ft.Dropdown(
            label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            width=150,
            options=[
                ft.dropdown.Option("üí∞ –ü–æ–∫—É–ø–∫–∏", "purchases"),
                ft.dropdown.Option("üéØ –¶–µ–ª–∏", "goals"),
                ft.dropdown.Option("üìä –ê–Ω–∞–ª–∏–∑", "analysis"),
                ft.dropdown.Option("üí° –ò–¥–µ–∏", "ideas"),
                ft.dropdown.Option("üìù –û–±—â–µ–µ", "general")
            ]
        )
        
        def add_note(e):
            title = self.note_title.value
            content = self.note_content.value
            category = self.note_category.value
            
            if title and content:
                note = {
                    "title": title,
                    "content": content,
                    "category": category,
                    "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
                    "id": len(self.finance_app.data["notes"]) + 1
                }
                self.finance_app.data["notes"].append(note)
                self.finance_app.save_data()
                
                self.note_title.value = ""
                self.note_content.value = ""
                self.note_category.value = None
                self.page.update()
        
        return ft.Column([
            ft.Row([
                self.note_title,
                self.note_category
            ], spacing=10),
            self.note_content,
            ft.ElevatedButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", on_click=add_note)
        ], spacing=10)
    
    def create_notes_list(self):
        notes = self.finance_app.data["notes"]
        
        if not notes:
            return ft.Text("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
        
        note_widgets = []
        for note in reversed(notes):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ —Å–≤–µ—Ä—Ö—É
            category_icons = {
                "purchases": "üí∞",
                "goals": "üéØ", 
                "analysis": "üìä",
                "ideas": "üí°",
                "general": "üìù"
            }
            
            note_widgets.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Row([
                                ft.Text(f"{category_icons.get(note['category'], 'üìù')} {note['title']}", 
                                       size=16, weight=ft.FontWeight.BOLD),
                                ft.Text(note['date'], size=12, color=ft.Colors.GREY_600),
                                ft.IconButton(ft.Icons.DELETE, on_click=lambda e, note_id=note['id']: self.delete_note(note_id))
                            ]),
                            ft.Text(note['content'], size=14),
                        ], spacing=5),
                        padding=15
                    )
                )
            )
        
        return ft.Column(note_widgets, spacing=10)
    
    def create_note_templates(self):
        templates = [
            {
                "title": "–ü–ª–∞–Ω–∏—Ä—É—é –∫—É–ø–∏—Ç—å",
                "content": "–ß—Ç–æ: \n–¶–µ–Ω–∞: \n–ö–æ–≥–¥–∞: \n–ó–∞—á–µ–º: ",
                "category": "purchases"
            },
            {
                "title": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å",
                "content": "–¶–µ–ª—å: \n–°—É–º–º–∞: \n–°—Ä–æ–∫: \n–ü–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ",
                "category": "goals"
            },
            {
                "title": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç",
                "content": "–ú–µ—Å—è—Ü: \n–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã: \n–í—ã–≤–æ–¥—ã: \n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ",
                "category": "analysis"
            },
            {
                "title": "–ò–¥–µ—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏",
                "content": "–ò–¥–µ—è: \n–≠–∫–æ–Ω–æ–º–∏—è –≤ –º–µ—Å—è—Ü: \n–°–ª–æ–∂–Ω–æ—Å—Ç—å: \n–ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è: ",
                "category": "ideas"
            }
        ]
        
        def use_template(template):
            self.note_title.value = template["title"]
            self.note_content.value = template["content"]
            self.note_category.value = template["category"]
            self.page.update()
        
        template_widgets = []
        for template in templates:
            template_widgets.append(
                ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text(template["title"], size=14, weight=ft.FontWeight.BOLD),
                            ft.Text(template["content"][:100] + "...", size=12, color=ft.Colors.GREY_600),
                            ft.ElevatedButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", on_click=lambda e, t=template: use_template(t), width=120)
                        ], spacing=5),
                        padding=10
                    )
                )
            )
        
        return ft.Column(template_widgets, spacing=10)
    
    def delete_note(self, note_id):
        self.finance_app.data["notes"] = [note for note in self.finance_app.data["notes"] if note["id"] != note_id]
        self.finance_app.save_data()
        self.refresh_all_pages()

def main(page: ft.Page):
    app = MainApp(page)

if __name__ == "__main__":
    ft.app(target=main)
